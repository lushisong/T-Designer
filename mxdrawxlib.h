/****************************************************************************
**
** Namespace MxDrawXLib generated by dumpcpp v5.9.8 using
** D:\Qt\Qt5.9.8\5.9.8\msvc2017_64\bin\dumpcpp.exe {C8C8006C-A26A-42e4-ABCC-6AB1FAB4FF38}
** from the type library D:\Mxkd\MxDrawx86\MxDrawX.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_MXDRAWXLIB_H
#define QAX_DUMPCPP_MXDRAWXLIB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef MXDRAWXLIB_EXPORT
#define MXDRAWXLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace MxDrawXLib {

    enum GradientPatternType {
        mcPreDefinedGradient    = 0,
        mcUserDefinedGradient   = 1
    };

    enum HatchObjectType {
        mcHatchObject           = 0,
        mcGradientObject        = 1
    };

    enum HatchPatternType {
        mcUserDefined           = 0,
        mcPreDefined            = 1,
        mcCustomDefined         = 2
    };

    enum HatchStyle {
        mcNormal                = 0,
        mcOuter                 = 1,
        mcIgnore                = 2
    };

    enum McAttachmentPoint {
        mcAttachmentPointTopLeft= 1,
        mcAttachmentPointTopCenter= 2,
        mcAttachmentPointTopRight= 3,
        mcAttachmentPointMiddleLeft= 4,
        mcAttachmentPointMiddleCenter= 5,
        mcAttachmentPointMiddleRight= 6,
        mcAttachmentPointBottomLeft= 7,
        mcAttachmentPointBottomCenter= 8,
        mcAttachmentPointBottomRight= 9
    };

    enum McAttributeMode {
        mcAttributeModeNormal   = 0,
        mcAttributeModeInvisible= 1,
        mcAttributeModeConstant = 2,
        mcAttributeModeVerify   = 4,
        mcAttributeModePreset   = 8,
        mcAttributeModeLockPosition= 16,
        mcAttributeModeMultipleLine= 32
    };

    enum McColor {
        mcByBlock               = 0,
        mcRed                   = 1,
        mcYellow                = 2,
        mcGreen                 = 3,
        mcCyan                  = 4,
        mcBlue                  = 5,
        mcMagenta               = 6,
        mcWhite                 = 7,
        mcByLayer               = 256
    };

    enum McColorMethod {
        mcColorMethodByLayer    = 1,
        mcColorMethodByBlock    = 2,
        mcColorMethodByRGB      = 3,
        mcColorMethodByACI      = 4,
        mcColorMethodForeground = 5
    };

    enum McDrawingDirection {
        mcLeftToRight           = 1,
        mcRightToLeft           = 2,
        mcTopToBottom           = 3,
        mcBottomToTop           = 4,
        mcByStyle               = 5
    };

    enum McExtendOption {
        mcExtendNone            = 0,
        mcExtendThisEntity      = 1,
        mcExtendOtherEntity     = 2,
        mcExtendBoth            = 3
    };

    enum McHorizontalAlignment {
        mcHorizontalAlignmentLeft= 0,
        mcHorizontalAlignmentCenter= 1,
        mcHorizontalAlignmentRight= 2,
        mcHorizontalAlignmentAligned= 3,
        mcHorizontalAlignmentMiddle= 4,
        mcHorizontalAlignmentFit= 5
    };

    enum McLineWeight {
        mcLnWt000               = 0,
        mcLnWt005               = 5,
        mcLnWt009               = 9,
        mcLnWt013               = 13,
        mcLnWt015               = 15,
        mcLnWt018               = 18,
        mcLnWt020               = 20,
        mcLnWt025               = 25,
        mcLnWt030               = 30,
        mcLnWt035               = 35,
        mcLnWt040               = 40,
        mcLnWt050               = 50,
        mcLnWt053               = 53,
        mcLnWt060               = 60,
        mcLnWt070               = 70,
        mcLnWt080               = 80,
        mcLnWt090               = 90,
        mcLnWt100               = 100,
        mcLnWt106               = 106,
        mcLnWt120               = 120,
        mcLnWt140               = 140,
        mcLnWt158               = 158,
        mcLnWt200               = 200,
        mcLnWt211               = 211,
        mcLnWtByLayer           = -1,
        mcLnWtByBlock           = -2,
        mcLnWtByLwDefault       = -3
    };

    enum McSelect {
        mcSelectionSetWindow    = 0,
        mcSelectionSetCrossing  = 1,
        mcSelectionSetFence     = 2,
        mcSelectionSetPrevious  = 3,
        mcSelectionSetLast      = 4,
        mcSelectionSetAll       = 5,
        mcSelectionSetWindowPolygon= 6,
        mcSelectionSetCrossingPolygon= 7,
        mcSelectionSetUserSelect= 8,
        mcSelectionImpliedSelectSelect= 9,
        mcSelectionHideobjectSetWindow= 20,
        mcSelectionHideobjectSetCrossing= 21,
        mcSelectionHideobjectSetUserSelect= 28,
        mcSelectionHideobjectSetWindowPolygon= 26,
        mcSelectionHideobjectSetCrossingPolygon= 27,
        mcSelectionSetUserSelect_EcsClear= 29,
        mcSelectionSetUserSelect_NoWhileSelect= 30
    };

    enum McUiPrDynamicInputType {
        mcAutoInput             = 0,
        mcNoInput               = 1,
        mcXYCoordInput          = 2,
        mcAngleInput            = 3,
        mcDistanceInput         = 4
    };

    enum McUiPrMcUiPrAngleType {
        mcAngelAny              = 0,
        mcAngelNoZero           = 1,
        mcAngelRange            = 2
    };

    enum McUiPrMcUiPrDoubleType {
        mcDoubleAny             = 0,
        mcDoubleNoNeg           = 1,
        mcDoubleNoZero          = 2,
        mcDoubleNoNegNoZero     = 3,
        mcDoubleRange           = 4
    };

    enum McUiPrStatus {
        mcCancel                = 0,
        mcOk                    = 1,
        mcNone                  = 2,
        mcKeyWord               = 3
    };

    enum McVerticalAlignment {
        mcVerticalAlignmentBaseline= 0,
        mcVerticalAlignmentBottom= 1,
        mcVerticalAlignmentMiddle= 2,
        mcVerticalAlignmentTop  = 3
    };

// forward declarations
    enum McColor;
    enum McColorMethod;
    enum McLineWeight;
    enum McExtendOption;
    enum McAttributeMode;
    enum McHorizontalAlignment;
    enum McVerticalAlignment;
    enum McAttachmentPoint;
    enum McDrawingDirection;
    enum HatchPatternType;
    enum HatchStyle;
    enum HatchObjectType;
    enum GradientPatternType;
    enum McUiPrStatus;
    enum McSelect;
    enum McUiPrDynamicInputType;
    enum McUiPrMcUiPrAngleType;
    enum McUiPrMcUiPrDoubleType;
    class IMxDrawDatabase;
    class IMxDrawResbuf;
    class IMxDrawBlockTableRecord;
    class IMxDrawBlockTable;
    class IMxDrawLayerTable;
    class IMxDrawLinetypeTable;
    class IMxDrawTextStyleTable;
    class IMxDrawDictionary;
    class IMxDrawMcCmColor;
    class IMxDrawPoint;
    class IMxDrawIdMapping;
    class IMxDrawUcs;
    class IMxDrawMcDbObject;
    class IMxDrawDimStyleTable;
    class IMxDrawMatrix3d;
    class IMxDrawVector3d;
    class IMxDrawPoints;
    class IMxDrawXRecord;
    class IMxDrawDictionaryIterator;
    class IMxDrawLine;
    class IMxDrawPolyline;
    class IMxDrawArc;
    class IMxDrawAttributeDefinition;
    class IMxDrawText;
    class IMxDrawCircle;
    class IMxDrawDimAligned;
    class IMxDrawDimAngular;
    class IMxDrawDimDiametric;
    class IMxDrawDimRotated;
    class IMxDrawDimOrdinate;
    class IMxDrawDimRadial;
    class IMxDrawEllipse;
    class IMxDrawMText;
    class IMxDrawPointEntity;
    class IMxDrawRay;
    class IMxDrawSolid;
    class IMxDrawSpline;
    class IMxDrawTolerance;
    class IMxDrawTrace;
    class IMxDrawXline;
    class IMxDrawBlockReference;
    class IMxDrawHatch;
    class IMxDrawLayout;
    class IMxDrawRasterImage;
    class IMxDrawBlockTableRecordIterator;
    class IMxDrawEntity;
    class IMxDrawImageMark;
    enum McColor;
    enum McColorMethod;
    enum McLineWeight;
    enum McExtendOption;
    enum McAttributeMode;
    enum McHorizontalAlignment;
    enum McVerticalAlignment;
    enum McAttachmentPoint;
    enum McDrawingDirection;
    class IMxDrawScale3d;
    class IMxDrawAttribute;
    enum HatchPatternType;
    enum HatchStyle;
    enum HatchObjectType;
    enum GradientPatternType;
    class IMxDrawBlockTableIterator;
    class IMxDrawLayerTableRecord;
    class IMxDrawLayerTableIterator;
    class IMxDrawLinetypeTableRecord;
    class IMxDrawLinetypeTableIterator;
    class IMxDrawTextStyleTableRecord;
    class IMxDrawTextStyleTableIterator;
    class IMxDrawDimStyleTableRecord;
    class IMxDrawDimStyleTableIterator;
    class IMxDrawCustomEntity;
    enum McUiPrStatus;
    enum McSelect;
    enum McUiPrDynamicInputType;
    enum McUiPrMcUiPrAngleType;
    enum McUiPrMcUiPrDoubleType;
    class IMxDrawComment;
    class IMxDrawDimension;

class MXDRAWXLIB_EXPORT _DMxDrawX : public QAxObject
{
public:
    _DMxDrawX(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AutoActive

    property AutoActive
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AutoActive() const; //Returns the value of AutoActive
    inline void SetAutoActive(bool value); //Sets the value of the AutoActive property

    /*
    Property AutoZoomAll

    property AutoZoomAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AutoZoomAll() const; //Returns the value of AutoZoomAll
    inline void SetAutoZoomAll(bool value); //Sets the value of the AutoZoomAll property

    /*
    Property BrowseMode

    property BrowseMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool BrowseMode() const; //Returns the value of BrowseMode
    inline void SetBrowseMode(bool value); //Sets the value of the BrowseMode property

    /*
    Property CommandMessgaeModify

    property CommandMessgaeModify
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int CommandMessgaeModify() const; //Returns the value of CommandMessgaeModify
    inline void SetCommandMessgaeModify(int value); //Sets the value of the CommandMessgaeModify property

    /*
    Property CursorLong

    property CursorLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double CursorLong() const; //Returns the value of CursorLong
    inline void SetCursorLong(double value); //Sets the value of the CursorLong property

    /*
    Property CursorWidth

    property CursorWidth
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double CursorWidth() const; //Returns the value of CursorWidth
    inline void SetCursorWidth(double value); //Sets the value of the CursorWidth property

    /*
    Property DimStyle

    property DimStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimStyle() const; //Returns the value of DimStyle
    inline void SetDimStyle(const QString& value); //Sets the value of the DimStyle property

    /*
    Property DrawCADColor

    property DrawCADColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline uint DrawCADColor() const; //Returns the value of DrawCADColor
    inline void SetDrawCADColor(uint value); //Sets the value of the DrawCADColor property

    /*
    Property DrawCADColorIndex

    property DrawCADColorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int DrawCADColorIndex() const; //Returns the value of DrawCADColorIndex
    inline void SetDrawCADColorIndex(int value); //Sets the value of the DrawCADColorIndex property

    /*
    Property DrawColor

    property DrawColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QColor DrawColor() const; //Returns the value of DrawColor
    inline void SetDrawColor(const QColor& value); //Sets the value of the DrawColor property

    /*
    Property DwgFilePath

    property DwgFilePath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DwgFilePath() const; //Returns the value of DwgFilePath
    inline void SetDwgFilePath(const QString& value); //Sets the value of the DwgFilePath property

    /*
    Property DynToolTip

    property DynToolTip
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DynToolTip() const; //Returns the value of DynToolTip
    inline void SetDynToolTip(bool value); //Sets the value of the DynToolTip property

    /*
    Property DynToolTipTime

    property DynToolTipTime
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int DynToolTipTime() const; //Returns the value of DynToolTipTime
    inline void SetDynToolTipTime(int value); //Sets the value of the DynToolTipTime property

    /*
    Property EditGripPoint

    property EditGripPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EditGripPoint() const; //Returns the value of EditGripPoint
    inline void SetEditGripPoint(bool value); //Sets the value of the EditGripPoint property

    /*
    Property EnableClipboard

    property EnableClipboard
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableClipboard() const; //Returns the value of EnableClipboard
    inline void SetEnableClipboard(bool value); //Sets the value of the EnableClipboard property

    /*
    Property EnableDeleteKey

    property EnableDeleteKey
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableDeleteKey() const; //Returns the value of EnableDeleteKey
    inline void SetEnableDeleteKey(bool value); //Sets the value of the EnableDeleteKey property

    /*
    Property EnableDrawOrder

    property EnableDrawOrder
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableDrawOrder() const; //Returns the value of EnableDrawOrder
    inline void SetEnableDrawOrder(bool value); //Sets the value of the EnableDrawOrder property

    /*
    Property EnableIntelliSelect

    property EnableIntelliSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableIntelliSelect() const; //Returns the value of EnableIntelliSelect
    inline void SetEnableIntelliSelect(bool value); //Sets the value of the EnableIntelliSelect property

    /*
    Property EnableMouseMoveView

    property EnableMouseMoveView
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableMouseMoveView() const; //Returns the value of EnableMouseMoveView
    inline void SetEnableMouseMoveView(bool value); //Sets the value of the EnableMouseMoveView property

    /*
    Property EnableOleShow

    property EnableOleShow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableOleShow() const; //Returns the value of EnableOleShow
    inline void SetEnableOleShow(bool value); //Sets the value of the EnableOleShow property

    /*
    Property EnableOpenCmd

    property EnableOpenCmd
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int EnableOpenCmd() const; //Returns the value of EnableOpenCmd
    inline void SetEnableOpenCmd(int value); //Sets the value of the EnableOpenCmd property

    /*
    Property EnablePrintCmd

    property EnablePrintCmd
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int EnablePrintCmd() const; //Returns the value of EnablePrintCmd
    inline void SetEnablePrintCmd(int value); //Sets the value of the EnablePrintCmd property

    /*
    Property EnableUndo

    property EnableUndo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableUndo() const; //Returns the value of EnableUndo
    inline void SetEnableUndo(bool value); //Sets the value of the EnableUndo property

    /*
    Property HightQualityDraw

    property HightQualityDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HightQualityDraw() const; //Returns the value of HightQualityDraw
    inline void SetHightQualityDraw(bool value); //Sets the value of the HightQualityDraw property

    /*
    Property ImpDynWorldDrawFun

    property ImpDynWorldDrawFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpDynWorldDrawFun() const; //Returns the value of ImpDynWorldDrawFun
    inline void SetImpDynWorldDrawFun(IDispatch* value); //Sets the value of the ImpDynWorldDrawFun property

    /*
    Property ImpExplodeFun

    property ImpExplodeFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpExplodeFun() const; //Returns the value of ImpExplodeFun
    inline void SetImpExplodeFun(IDispatch* value); //Sets the value of the ImpExplodeFun property

    /*
    Property ImpGetGeomExtentsFun

    property ImpGetGeomExtentsFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpGetGeomExtentsFun() const; //Returns the value of ImpGetGeomExtentsFun
    inline void SetImpGetGeomExtentsFun(IDispatch* value); //Sets the value of the ImpGetGeomExtentsFun property

    /*
    Property ImpGetGripPointsFun

    property ImpGetGripPointsFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpGetGripPointsFun() const; //Returns the value of ImpGetGripPointsFun
    inline void SetImpGetGripPointsFun(IDispatch* value); //Sets the value of the ImpGetGripPointsFun property

    /*
    Property ImpGetOsnapPointsFun

    property ImpGetOsnapPointsFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpGetOsnapPointsFun() const; //Returns the value of ImpGetOsnapPointsFun
    inline void SetImpGetOsnapPointsFun(IDispatch* value); //Sets the value of the ImpGetOsnapPointsFun property

    /*
    Property ImpHyperlinkClickFun

    property ImpHyperlinkClickFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpHyperlinkClickFun() const; //Returns the value of ImpHyperlinkClickFun
    inline void SetImpHyperlinkClickFun(IDispatch* value); //Sets the value of the ImpHyperlinkClickFun property

    /*
    Property ImpInputPointToolTipFun

    property ImpInputPointToolTipFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpInputPointToolTipFun() const; //Returns the value of ImpInputPointToolTipFun
    inline void SetImpInputPointToolTipFun(IDispatch* value); //Sets the value of the ImpInputPointToolTipFun property

    /*
    Property ImpMoveGripPointsAtFun

    property ImpMoveGripPointsAtFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpMoveGripPointsAtFun() const; //Returns the value of ImpMoveGripPointsAtFun
    inline void SetImpMoveGripPointsAtFun(IDispatch* value); //Sets the value of the ImpMoveGripPointsAtFun property

    /*
    Property ImpTransformByFun

    property ImpTransformByFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpTransformByFun() const; //Returns the value of ImpTransformByFun
    inline void SetImpTransformByFun(IDispatch* value); //Sets the value of the ImpTransformByFun property

    /*
    Property ImplementCommandEventFun

    property ImplementCommandEventFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImplementCommandEventFun() const; //Returns the value of ImplementCommandEventFun
    inline void SetImplementCommandEventFun(IDispatch* value); //Sets the value of the ImplementCommandEventFun property

    /*
    Property ImplementCustomEvent

    property ImplementCustomEvent
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImplementCustomEvent() const; //Returns the value of ImplementCustomEvent
    inline void SetImplementCustomEvent(IDispatch* value); //Sets the value of the ImplementCustomEvent property

    /*
    Property ImplementMouseEventFun

    property ImplementMouseEventFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImplementMouseEventFun() const; //Returns the value of ImplementMouseEventFun
    inline void SetImplementMouseEventFun(IDispatch* value); //Sets the value of the ImplementMouseEventFun property

    /*
    Property Iniset

    property Iniset
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Iniset() const; //Returns the value of Iniset
    inline void SetIniset(const QString& value); //Sets the value of the Iniset property

    /*
    Property InitUrl

    property InitUrl
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString InitUrl() const; //Returns the value of InitUrl
    inline void SetInitUrl(const QString& value); //Sets the value of the InitUrl property

    /*
    Property IsDrawCoord

    property IsDrawCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsDrawCoord() const; //Returns the value of IsDrawCoord
    inline void SetIsDrawCoord(bool value); //Sets the value of the IsDrawCoord property

    /*
    Property IsFirstRunPan

    property IsFirstRunPan
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsFirstRunPan() const; //Returns the value of IsFirstRunPan
    inline void SetIsFirstRunPan(bool value); //Sets the value of the IsFirstRunPan property

    /*
    Property IsRuningAtIE

    property IsRuningAtIE
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int IsRuningAtIE() const; //Returns the value of IsRuningAtIE
    inline void SetIsRuningAtIE(int value); //Sets the value of the IsRuningAtIE property

    /*
    Property LayerName

    property LayerName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LayerName() const; //Returns the value of LayerName
    inline void SetLayerName(const QString& value); //Sets the value of the LayerName property

    /*
    Property LineType

    property LineType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LineWidth

    property LineWidth
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LineWidth() const; //Returns the value of LineWidth
    inline void SetLineWidth(double value); //Sets the value of the LineWidth property

    /*
    Property PatternDefinition

    property PatternDefinition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString PatternDefinition() const; //Returns the value of PatternDefinition
    inline void SetPatternDefinition(const QString& value); //Sets the value of the PatternDefinition property

    /*
    Property ResPath

    property ResPath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ResPath() const; //Returns the value of ResPath
    inline void SetResPath(const QString& value); //Sets the value of the ResPath property

    /*
    Property ShowCommandWindow

    property ShowCommandWindow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowCommandWindow() const; //Returns the value of ShowCommandWindow
    inline void SetShowCommandWindow(bool value); //Sets the value of the ShowCommandWindow property

    /*
    Property ShowMenuBar

    property ShowMenuBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowMenuBar() const; //Returns the value of ShowMenuBar
    inline void SetShowMenuBar(bool value); //Sets the value of the ShowMenuBar property

    /*
    Property ShowModelBar

    property ShowModelBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowModelBar() const; //Returns the value of ShowModelBar
    inline void SetShowModelBar(bool value); //Sets the value of the ShowModelBar property

    /*
    Property ShowPropertyWindow

    property ShowPropertyWindow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowPropertyWindow() const; //Returns the value of ShowPropertyWindow
    inline void SetShowPropertyWindow(bool value); //Sets the value of the ShowPropertyWindow property

    /*
    Property ShowRulerWindow

    property ShowRulerWindow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowRulerWindow() const; //Returns the value of ShowRulerWindow
    inline void SetShowRulerWindow(bool value); //Sets the value of the ShowRulerWindow property

    /*
    Property ShowStatusBar

    property ShowStatusBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowStatusBar() const; //Returns the value of ShowStatusBar
    inline void SetShowStatusBar(bool value); //Sets the value of the ShowStatusBar property

    /*
    Property ShowToolBars

    property ShowToolBars
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowToolBars() const; //Returns the value of ShowToolBars
    inline void SetShowToolBars(bool value); //Sets the value of the ShowToolBars property

    /*
    Property SingleSelection

    property SingleSelection
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SingleSelection() const; //Returns the value of SingleSelection
    inline void SetSingleSelection(bool value); //Sets the value of the SingleSelection property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property Theme

    property Theme
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Theme() const; //Returns the value of Theme
    inline void SetTheme(int value); //Sets the value of the Theme property

    /*
    Property ToolBarFiles

    property ToolBarFiles
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ToolBarFiles() const; //Returns the value of ToolBarFiles
    inline void SetToolBarFiles(const QString& value); //Sets the value of the ToolBarFiles property

    /*
    Property UseArrowCursor

    property UseArrowCursor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UseArrowCursor() const; //Returns the value of UseArrowCursor
    inline void SetUseArrowCursor(bool value); //Sets the value of the UseArrowCursor property

    /*
    Property UserData

    property UserData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString UserData() const; //Returns the value of UserData
    inline void SetUserData(const QString& value); //Sets the value of the UserData property

    /*
    Property UserName

    property UserName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString UserName() const; //Returns the value of UserName
    inline void SetUserName(const QString& value); //Sets the value of the UserName property

    /*
    Property UserPhone

    property UserPhone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString UserPhone() const; //Returns the value of UserPhone
    inline void SetUserPhone(const QString& value); //Sets the value of the UserPhone property

    /*
    Property UserSoftwareName

    property UserSoftwareName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString UserSoftwareName() const; //Returns the value of UserSoftwareName
    inline void SetUserSoftwareName(const QString& value); //Sets the value of the UserSoftwareName property

    /*
    Property ViewColor

    property ViewColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QColor ViewColor() const; //Returns the value of ViewColor
    inline void SetViewColor(const QColor& value); //Sets the value of the ViewColor property

    /*
    Property Watermark

    property Watermark
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Watermark() const; //Returns the value of Watermark
    inline void SetWatermark(const QString& value); //Sets the value of the Watermark property

    /*
    Method AboutBox

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AboutBox();

    /*
    Method AddCurrentSelect

    method AddCurrentSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AddCurrentSelect(qlonglong lId, bool isShowGrid, bool isUpDisplay);

    /*
    Method AddDimStyle

    method AddDimStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddDimStyle(const QString& pszName, const QString& pszDoubleData, const QString& pszIntData, const QString& pszStringData, const QString& pszIdData);

    /*
    Method AddLayer

    method AddLayer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddLayer(const QString& pszName);

    /*
    Method AddLinetype

    method AddLinetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddLinetype(const QString& pszName, const QString& pszLineDefine);

    /*
    Method AddLinetypeEx

    method AddLinetypeEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddLinetypeEx(const QString& pszName, const QString& pszLineDefine, const QString& pszTextStyle);

    /*
    Method AddPatternDefinition

    method AddPatternDefinition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AddPatternDefinition(const QString& pszName, const QString& pszPatternDefinition);

    /*
    Method AddTextStyle1

    method AddTextStyle1
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddTextStyle1(const QString& pszName, const QString& pszFileName, const QString& pszBigFontFileName, double dXScale);

    /*
    Method AddTextStyle2

    method AddTextStyle2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddTextStyle2(const QString& pszName, const QString& pszTrueTypeFontName, double dXScale);

    /*
    Method Cal

    Cal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Cal(const QString& pszFunName);

    /*
    Method Call

    method Call
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Call(const QString& pszFunName, const QString& pszFunParam);

    /*
    Method CallDoubleParam1

    method CallDoubleParam1
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallDoubleParam1(const QString& pszFunName, double dV);

    /*
    Method CallDoubleParam2

    method CallDoubleParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallDoubleParam2(const QString& pszFunName, double dV1, double dV2);

    /*
    Method CallDoubleParam3

    method CallDoubleParam3
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallDoubleParam3(const QString& pszFunName, double dV1, double dV2, double dV3);

    /*
    Method CallEx

    method CallEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallEx(const QString& pszFunName, IDispatch* pParam);

    /*
    Method CallLongParam1

    method CallLongParam1
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallLongParam1(const QString& pszFunName, int lV);

    /*
    Method CallLongParam2

    method CallLongParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallLongParam2(const QString& pszFunName, int lV1, int lV2);

    /*
    Method CallLongParam3

    method CallLongParam3
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallLongParam3(const QString& pszFunName, int lV1, int lV2, int lV3);

    /*
    Method CallPointParam1

    method CallPointParam1
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallPointParam1(const QString& pszFunName, double dX, double dY, double dZ);

    /*
    Method CallPointParam2

    method CallPointParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallPointParam2(const QString& pszFunName, double dX1, double dY1, double dZ1, double dX2, double dY2, double dZ2);

    /*
    Method Clear

    method Clear
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Clear(qlonglong lId);

    /*
    Method ClearCurrentSelect

    method ClearCurrentSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearCurrentSelect();

    /*
    Method ClearDisplayBuffer

    method ClearDisplayBuffer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearDisplayBuffer();

    /*
    Method ClearPreviousInputPoint

    method ClearPreviousInputPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearPreviousInputPoint();

    /*
    Method ClearUndoData

    method ClearUndoData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearUndoData();

    /*
    Method CreateGroup

    method CreateGroup
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool CreateGroup(const QString& pszName, IDispatch* pAryId);

    /*
    Method CustomEventParam

    method CustomEventParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CustomEventParam();

    /*
    Method CustomInsertBlock

    method CustomInsertBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int CustomInsertBlock(const QString& pszDwgFileName, const QString& pszBlockName);

    /*
    Method DeleteGroup

    method DeleteGroup
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteGroup(const QString& pszName);

    /*
    Method DeleteGroupEx

    DeleteGroupEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteGroupEx(qlonglong lEntId);

    /*
    Method DoCommand

    method DoCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DoCommand(int iCommandId);

    /*
    Method DocLongToViewCoord

    method DocLongToViewCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DocLongToViewCoord(double dLen);

    /*
    Method DocToScreenCoord

    method DocToScreenCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* DocToScreenCoord(double dX, double dY);

    /*
    Method DocToViewCoord

    method DocToViewCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* DocToViewCoord(double dX, double dY);

    /*
    Method Download

    Download
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Download(const QString& pszWebFile);

    /*
    Method DrawArc1

    method DrawArc1
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawArc1(double dCenterX, double dCenterY, double dRadius, double dStartAng, double dEndAng);

    /*
    Method DrawArc2

    method DrawArc2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawArc2(double dStartPointX, double dStartPointY, double dMidPointX, double dMidPointY, double dEndPointX, double dEndPointY);

    /*
    Method DrawArc3

    method DrawArc3
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge);

    /*
    Method DrawBlockReference

    method DrawBlockReference
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawBlockReference(double dPosX, double dPosY, const QString& pszBlkName, double dScale, double dAng);

    /*
    Method DrawCircle

    method DrawCircle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawCircle(double dCenterX, double dCenterY, double dRadius);

    /*
    Method DrawCustomEntity

    method DrawCustomEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* DrawCustomEntity(const QString& pszGuid, const QString& pszBlkRecName);

    /*
    Method DrawDimAligned

    method DrawDimAligned
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimAligned(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dTextPositionX, double dTextPositionY);

    /*
    Method DrawDimAngular

    method DrawDimAngular
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimAngular(double dAngleVertexX, double dAngleVertexY, double dFirstEndPointX, double dFirstEndPointY, double dSecondEndPointX, double dSecondEndPointY, double dTextPointX, double dTextPointY);

    /*
    Method DrawDimDiametric

    method DrawDimDiametric
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimDiametric(double dChordPointX, double dChordPointY, double dFarChordPointX, double dFarChordPointY, double dLeaderLength);

    /*
    Method DrawDimOrdinate

    method DrawDimOrdinate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimOrdinate(double dDefinitionPointX, double dDefinitionPointY, double dDeaderEndPointX, double dDeaderEndPointY, bool isUseXAxis);

    /*
    Method DrawDimRadial

    method DrawDimRadial
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimRadial(double dCenterX, double dCenterY, double dChordPointX, double dChordPointY, double dLeaderLength);

    /*
    Method DrawDimRotated

    method DrawDimRotated
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimRotated(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dDimLineLocationX, double dDimLineLocationY, double dRotationAngle);

    /*
    Method DrawEllipse

    method DrawEllipse
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio);

    /*
    Method DrawEllipseArc

    method DrawEllipseArc
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng);

    /*
    Method DrawEntity

    DrawEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawEntity(IDispatch* pIn);

    /*
    Method DrawEntityToJpg

    method DrawEntityToJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawEntityToJpg(qlonglong lId, const QString& sJpgFilePath, int iWidth, int iHeight, int lBkColor);

    /*
    Method DrawHatchFromPoint

    method DrawHatchFromPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawHatchFromPoint(double dX, double dY, double dPatternScale);

    /*
    Method DrawImage

    method DrawImage
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawImage(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFilePath);

    /*
    Method DrawImageMark

    method DrawImageMark
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawImageMark(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFileName, const QString& pszTwinkeImageFiles, bool isSaveData);

    /*
    Method DrawImageToBackground

    method DrawImageToBackground
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawImageToBackground(const QString& sFileName, int lLeftUpX, int lLeftUpY);

    /*
    Method DrawLine

    method DrawLine
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawLine(double dX1, double dY1, double dX2, double dY2);

    /*
    Method DrawMText

    method DrawMText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawMText(double dPosX, double dPosY, const QString& pszContents, double dHeight, double dWidth, double dRotation, int iAttachment);

    /*
    Method DrawPathToHatch

    method DrawPathToHatch
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawPathToHatch(double dPatternScale);

    /*
    Method DrawPathToHatch2

    method DrawPathToHatch2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawPathToHatch2(double dPatternScale, const QString& sPatternFile, const QString& sPatternName, double dAngel);

    /*
    Method DrawPathToPolyline

    method DrawPathToPolyline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawPathToPolyline();

    /*
    Method DrawPathToSpline

    method DrawPathToSpline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawPathToSpline();

    /*
    Method DrawPoint

    method DrawPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawPoint(double dX, double dY);

    /*
    Method DrawSolid

    method DrawSolid
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4);

    /*
    Method DrawText

    method DrawText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, int horizontalMode, int verticalMode);

    /*
    Method DrawToJpg

    method DrawToJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawToJpg(const QString& sJpgFilePath, double dLBx, double dLBy, double dRTx, double dRTy, int lWidth, int lHeight, int lBkColor);

    /*
    Method DrawVectorCircle

    method DrawVectorCircle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawVectorCircle(double dCenX, double dCenY, double dR, int lColor);

    /*
    Method DrawVectorLine

    method DrawVectorLine
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawVectorLine(double dX1, double dY1, double dX2, double dY2, int lColor);

    /*
    Method EnableGripPoint

    method EnableGripPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void EnableGripPoint(bool bEnable);

    /*
    Method EnableSingleSelection

    method EnableSingleSelection
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableSingleSelection(bool isEnable);

    /*
    Method EnableToolBarButton

    method EnableToolBarButton
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableToolBarButton(const QString& pButtonName, bool isEnable);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Erase(qlonglong lId);

    /*
    Method ExprotPdf

    method ExprotPdf
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ExprotPdf(const QString& sPdfFileName, double dPaperH, double dPaperW, const QString& pszTitle, bool isExportLayout);

    /*
    Method FindEntAtPoint

    FindEntAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* FindEntAtPoint(double dX, double dY, IDispatch* pFilter);

    /*
    Method GetAllGroupName

    method GetAllGroupName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetAllGroupName();

    /*
    Method GetAllLayoutName

    method GetAllLayoutName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetAllLayoutName();

    /*
    Method GetBulidVersion

    method GetBulidVersion
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBulidVersion(int& lMajor, int& lMinor);

    /*
    Method GetCurrentLayout

    method GetCurrentLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetCurrentLayout();

    /*
    Method GetCurrentPath

    GetCurrentPath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetCurrentPath();

    /*
    Method GetCursorCrossLong

    method GetCursorCrossLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetCursorCrossLong();

    /*
    Method GetCursorPickRect

    method GetCursorPickRect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetCursorPickRect();

    /*
    Method GetCustomEntity

    method GetCustomEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetCustomEntity(qlonglong lId);

    /*
    Method GetDatabase

    method GetDatabase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetDatabase();

    /*
    Method GetEntity

    method GetEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetEntity(const QString& pszPrompt);

    /*
    Method GetEntityDrawOrder

    method GetEntityDrawOrder
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetEntityDrawOrder(qlonglong lId);

    /*
    Method GetEntitysLastCmd

    method GetEntitysLastCmd
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetEntitysLastCmd();

    /*
    Method GetExePath

    method GetExePath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetExePath();

    /*
    Method GetFileName

    method GetFileName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetFileName();

    /*
    Method GetGroup

    method GetGroup
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetGroup(const QString& pszGroupName);

    /*
    Method GetImageSize

    GetImageSize
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetImageSize(const QString& pszImageFile);

    /*
    Method GetInputCursorPos

    method GetInputCursorPos
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetInputCursorPos();

    /*
    Method GetLastError

    method GetLastError
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetLastError();

    /*
    Method GetMTextContent

    method GetMTextContent
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetMTextContent(qlonglong lId);

    /*
    Method GetMcDbDatabaseBound

    method GetMcDbDatabaseBound
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetMcDbDatabaseBound(double& pLbx, double& pLby, double& pRtx, double& pRty);

    /*
    Method GetMxDrawXId

    method GetMxDrawXId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetMxDrawXId();

    /*
    Method GetOcxAppPath

    method GetOcxAppPath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetOcxAppPath();

    /*
    Method GetPoint

    method GetPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetPoint(bool bValidBasePoint, double dX, double dY, const QString& pszPrompt);

    /*
    Method GetPopupMenuEntity

    GetPopupMenuEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetPopupMenuEntity(IDispatch* pFilter);

    /*
    Method GetSysVarDouble

    method GetSysVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSysVarDouble(const QString& pszVarName, double& pRet);

    /*
    Method GetSysVarLong

    method GetSysVarLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSysVarLong(const QString& pszVarName, int& pRet);

    /*
    Method GetSysVarString

    method GetSysVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSysVarString(const QString& pszVarName, QString& pRet);

    /*
    Method GetTempPath

    GetTempPath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetTempPath();

    /*
    Method GetViewCoord

    method GetViewCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetViewCoord(double& pLbx, double& pLby, double& pRtx, double& pRty);

    /*
    Method GetViewDocCoord

    method GetViewDocCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetViewDocCoord(double& pLbx, double& pLby, double& pRtx, double& pRty);

    /*
    Method GetWndHandle

    method GetWndHandle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetWndHandle();

    /*
    Method GotoURL

    GotoURL
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GotoURL(const QString& sUrl);

    /*
    Method HandleToObject

    HandleToObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* HandleToObject(const QString& handle);

    /*
    Method Hide

    method Hide
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Hide(qlonglong lId);

    /*
    Method HideMenuBarControl

    method HideMenuBarControl
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HideMenuBarControl(const QString& pszControlName, bool isHide);

    /*
    Method HideToolBarControl

    method HideToolBarControl
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HideToolBarControl(const QString& pszToolBarName, const QString& pszControlName, bool isHide, bool isAutoRecalcLayout);

    /*
    Method InsertBlock

    method InsertBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int InsertBlock(const QString& pszDwgFileName, const QString& pszBlockName);

    /*
    Method IsIniting

    method IsIniting
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsIniting();

    /*
    Method IsModelSpace

    method IsModelSpace
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsModelSpace();

    /*
    Method IsModifyed

    method IsModifyed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsModifyed();

    /*
    Method IsOk

    method IsOk
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsOk();

    /*
    Method IsRuningCommand

    method IsRuningCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsRuningCommand(QString& sCmdName);

    /*
    Method LoadLinetypeFromFile

    method LoadLinetypeFromFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong LoadLinetypeFromFile(const QString& pszLinetypeFile, const QString& pszsLinetypeName, bool isReLoad);

    /*
    Method LoadModule

    method LoadModule
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool LoadModule(const QString& sModuleName);

    /*
    Method LoadToolBar

    method LoadToolBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool LoadToolBar(const QString& pszToolBarFilePath, bool isShow);

    /*
    Method MakeCurrentOcx

    method MakeCurrentOcx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MakeCurrentOcx();

    /*
    Method NewComObject

    method NewComObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewComObject(const QString& pszClassName);

    /*
    Method NewEntity

    NewEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewEntity(const QString& pszClassName);

    /*
    Method NewFile

    method NewFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void NewFile();

    /*
    Method NewPoint

    method NewPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewPoint();

    /*
    Method NewResbuf

    method NewResbuf
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewResbuf();

    /*
    Method NewSelectionSet

    method NewSelectionSet
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewSelectionSet();

    /*
    Method NewUtility

    method NewUtility
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewUtility();

    /*
    Method ObjectIdToObject

    ObjectIdToObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ObjectIdToObject(qlonglong lId);

    /*
    Method OpenBackgroundFile

    method OpenBackgroundFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OpenBackgroundFile(const QString& sFileName, bool isGreyness, int lightColor, bool isZoomE, bool isUpDisplay);

    /*
    Method OpenDwgFile

    method OpenDwgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OpenDwgFile(const QString& pszDwgFile);

    /*
    Method OpenWebDwgFile

    method OpenWebDwgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OpenWebDwgFile(const QString& pszWebDwgFile);

    /*
    Method PathLineTo

    method PathLineTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathLineTo(double dX, double dY);

    /*
    Method PathLineToEx

    method PathLineToEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathLineToEx(double dX, double dY, double dStartWidth, double dEndWidth, double dBulge);

    /*
    Method PathMakeClosed

    method PathMakeClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathMakeClosed();

    /*
    Method PathMakeExclude

    method PathMakeExclude
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathMakeExclude(bool isExclude);

    /*
    Method PathMoveTo

    method PathMoveTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathMoveTo(double dX, double dY);

    /*
    Method PathMoveToEx

    method PathMoveToEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathMoveToEx(double dX, double dY, double dStartWidth, double dEndWidth, double dBulge);

    /*
    Method PrintHtml

    method PrintHtml
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PrintHtml(bool isShowPrintDialog, bool isPrintLineWidth);

    /*
    Method Prompt

    Prompt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Prompt(const QString& pszPrompt);

    /*
    Method PutEntityInView

    method PutEntityInView
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PutEntityInView(qlonglong lId, double dPaddingPercentage);

    /*
    Method ReDraw

    method ReDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ReDraw();

    /*
    Method ReadBinStream

    method ReadBinStream
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ReadBinStream(const QVariant& varBinArray, const QString& sPassword, int lReadContent);

    /*
    Method Regen

    method Regen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Regen();

    /*
    Method RegistUserCustomCommand

    method RegistUserCustomCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool RegistUserCustomCommand(const QString& pszCommandName, int lId);

    /*
    Method RestoreCursor

    method RestoreCursor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool RestoreCursor();

    /*
    Method RestoreStatusBar

    method RestoreStatusBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RestoreStatusBar();

    /*
    Method ReturnViewColor

    method ReturnViewColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QColor ReturnViewColor();

    /*
    Method SaveBmpFile

    method SaveBmpFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveBmpFile(const QString& pszFile, int lWidth, int lHeight);

    /*
    Method SaveCursor

    method SaveCursor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SaveCursor();

    /*
    Method SaveDwgFile

    method SaveDwgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveDwgFile(const QString& pFileName);

    /*
    Method SaveDwgToURL

    method SaveDwgToURL
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveDwgToURL(const QString& pszServerUrl, const QString& pszServerProgramUrl, const QString& pszComponentName, const QString& pszPort);

    /*
    Method SaveDwgToURLEx

    method SaveDwgToURLEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveDwgToURLEx(const QString& sServerUrl, const QString& sServerProgramUrl, const QString& sCommponentName, int lPort, const QString& sFileTag);

    /*
    Method SaveJpgFile

    method SaveJpgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveJpgFile(const QString& pszFileName, int lWidth, int lHeight, int lBkColor);

    /*
    Method SavePartDwg

    method SavePartDwg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SavePartDwg(double dX1, double dY1, double dX2, double dY2, const QString& pszFileName);

    /*
    Method ScreenToDocCoord

    method ScreenToDocCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ScreenToDocCoord(double dX, double dY);

    /*
    Method SendStringToExecute

    method SendStringToExecute
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SendStringToExecute(const QString& pszCmd);

    /*
    Method SendStringToExecuteEx

    method SendStringToExecuteEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SendStringToExecuteEx(const QString& sCmdName, IDispatch* pParam);

    /*
    Method SendStringToExecuteFun

    method SendStringToExecuteFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SendStringToExecuteFun(const QString& sCmdName, IDispatch* pParam);

    /*
    Method SetCurrentLayout

    method SetCurrentLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetCurrentLayout(const QString& pszLayoutName);

    /*
    Method SetCursor

    method SetCursor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetCursor(const QString& pszCursorFileName);

    /*
    Method SetCursorCrossLong

    method SetCursorCrossLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetCursorCrossLong(int lLong);

    /*
    Method SetCursorPickRect

    method SetCursorPickRect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetCursorPickRect(int lWidth);

    /*
    Method SetEntityDrawOrder

    method SetEntityDrawOrder
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetEntityDrawOrder(qlonglong lId, int lOrder);

    /*
    Method SetEventRet

    SetEventRet
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetEventRet(int lRet);

    /*
    Method SetEventRetEx

    method SetEventRetEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetEventRetEx(IDispatch* pParam);

    /*
    Method SetEventRetString

    method SetEventRetString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetEventRetString(const QString& pszResult);

    /*
    Method SetInputCursorPos

    method SetInputCursorPos
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetInputCursorPos(double dX, double dY);

    /*
    Method SetIsModifyed

    method SetIsModifyed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetIsModifyed(bool IsModifyed);

    /*
    Method SetLayerBright

    method SetLayerBright
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double SetLayerBright(const QString& sLayerName, double dBright);

    /*
    Method SetStatusBarProgressMeter

    method SetStatusBarProgressMeter
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetStatusBarProgressMeter(int lMaxPos);

    /*
    Method SetStatusBarProgressMeterPos

    method SetStatusBarProgressMeterPos
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetStatusBarProgressMeterPos(int lPos);

    /*
    Method SetSysVarDouble

    method SetSysVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetSysVarDouble(const QString& pszVarName, double dVal);

    /*
    Method SetSysVarLong

    method SetSysVarLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetSysVarLong(const QString& pszVarName, int lVal);

    /*
    Method SetSysVarString

    method SetSysVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetSysVarString(const QString& pszVarName, const QString& pszVal);

    /*
    Method SetToolTipInitialTime

    method SetToolTipInitialTime
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetToolTipInitialTime(uint ulTime);

    /*
    Method SetToolTipPopTime

    method SetToolTipPopTime
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetToolTipPopTime(uint ulTime);

    /*
    Method SetTwinkeColor

    method SetTwinkeColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTwinkeColor(IDispatch* pColorResbuf);

    /*
    Method SetTwinkeTime

    method SetTwinkeTime
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTwinkeTime(int lTime);

    /*
    Method SetViewTwist

    method SetViewTwist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetViewTwist(double dAng);

    /*
    Method Show

    method Show
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Show(qlonglong lId);

    /*
    Method ShowToolBar

    method ShowToolBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowToolBar(const QString& pszToolBarName, bool isShow);

    /*
    Method StopAllCommand

    method StopAllCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool StopAllCommand();

    /*
    Method StopAllTwinkeEnt

    method StopAllTwinkeEnt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool StopAllTwinkeEnt();

    /*
    Method StopTwinkeEnt

    method StopTwinkeEnt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool StopTwinkeEnt(qlonglong lId);

    /*
    Method TrackPopupMenu

    TrackPopupMenu
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool TrackPopupMenu(double dX, double dY, const QString& pszMenuFile);

    /*
    Method TwinkeEnt

    method TwinkeEnt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool TwinkeEnt(qlonglong lId);

    /*
    Method UnLoadModule

    method UnLoadModule
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UnLoadModule(const QString& sModuleName);

    /*
    Method UnLoadToolBar

    method UnLoadToolBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UnLoadToolBar(const QString& sToolBarName);

    /*
    Method UpdateDisplay

    method UpdateDisplay
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void UpdateDisplay();

    /*
    Method ViewLongToDocCoord

    method ViewLongToDocCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ViewLongToDocCoord(double dLong);

    /*
    Method ViewToDocCoord

    method ViewToDocCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ViewToDocCoord(double dX, double dY);

    /*
    Method WriteBinStream

    method WriteBinStream
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool WriteBinStream(QVariant& pVarBinArray, const QString& sPassword, int iVersion);

    /*
    Method WriteJpgToURL

    method WriteJpgToURL
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool WriteJpgToURL(const QString& pszServerUrl, const QString& pszServerProgramUrl, const QString& pszComponentName, int lPort, const QString& pszFileTag, int iWidth, int iHeight, int bkColor);

    /*
    Method ZoomAll

    method ZoomAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ZoomAll();

    /*
    Method ZoomCenter

    method ZoomCenter
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ZoomCenter(double dCenterX, double dCenterY);

    /*
    Method ZoomPan

    method ZoomPan
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ZoomPan(double dOffsetX, double dOffsetY);

    /*
    Method ZoomScale

    method ZoomScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ZoomScale(double dScale);

    /*
    Method ZoomScale2

    method ZoomScale2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ZoomScale2(double dPtx, double dPty, double dScale);

    /*
    Method ZoomWindow

    method ZoomWindow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ZoomWindow(double dLBx, double dLBy, double dRTx, double dRTy);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _DMxDrawXEvents

class MXDRAWXLIB_EXPORT IMxDrawApplication : public QAxObject
{
public:
    IMxDrawApplication(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Call

    method Call
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* Call(const QString& pszFunName, const QString& pszFunParam);

    /*
    Method CallEx

    method CallEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* CallEx(const QString& pszFunName, MxDrawXLib::IMxDrawResbuf* pParam);

    /*
    Method DwgToJpg

    method DwgToJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName);

    /*
    Method DwgToJpg

    method DwgToJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName, int lWidth);

    /*
    Method DwgToJpg

    method DwgToJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName, int lWidth, int lHeight);

    /*
    Method GetLastError

    method GetLastError
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetLastError();

    /*
    Method Iniset

    method IniSet
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Iniset(const QString& pszVal);

    /*
    Method InitMxDrawOcx

    method InitMxDrawOcx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void InitMxDrawOcx(const QString& pszReserve1, const QString& pszReserve2, const QString& pszReserve3, const QString& pszReserve4, const QString& pszReserve5);

    /*
    Method IsRuningCommand

    method IsRuningCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsRuningCommand();

    /*
    Method ListArx

    method ListArx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* ListArx();

    /*
    Method LoadArx

    method LoadArx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void LoadArx(const QString& pArxPath);

    /*
    Method Regen

    method Regen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Regen();

    /*
    Method StopAllCommand

    method StopAllCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void StopAllCommand();

    /*
    Method UnloadArx

    method UnloadArx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void UnloadArx(const QString& pArxPath);

    /*
    Method UpdateDisplay

    method UpdateDisplay
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void UpdateDisplay();

    /*
    Method WorkingDatabase

    method WorkingDatabase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* WorkingDatabase();

    /*
    Method ZoomAll

    method ZoomAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ZoomAll();

    /*
    Method ZoomPrevious

    method ZoomPrevious
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ZoomPrevious();

    /*
    Method ZoomWindow

    method ZoomWindow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ZoomWindow(double dX1, double dY1, double dX2, double dY2);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDatabase : public QAxObject
{
public:
    IMxDrawDatabase(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property CurrentlyColorIndex

    property CurrentlyColorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor CurrentlyColorIndex() const; //Returns the value of CurrentlyColorIndex
    inline void SetCurrentlyColorIndex(MxDrawXLib::McColor value); //Sets the value of the CurrentlyColorIndex property

    /*
    Property CurrentlyDimstyleName

    property CurrentlyDimstyleName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString CurrentlyDimstyleName() const; //Returns the value of CurrentlyDimstyleName
    inline void SetCurrentlyDimstyleName(const QString& value); //Sets the value of the CurrentlyDimstyleName property

    /*
    Property CurrentlyLayerName

    property CurrentlyLayerName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString CurrentlyLayerName() const; //Returns the value of CurrentlyLayerName
    inline void SetCurrentlyLayerName(const QString& value); //Sets the value of the CurrentlyLayerName property

    /*
    Property CurrentlyLineTypeName

    property CurrentlyLineTypeName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString CurrentlyLineTypeName() const; //Returns the value of CurrentlyLineTypeName
    inline void SetCurrentlyLineTypeName(const QString& value); //Sets the value of the CurrentlyLineTypeName property

    /*
    Property CurrentlyLineTypeScale

    property CurrentlyLineTypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double CurrentlyLineTypeScale() const; //Returns the value of CurrentlyLineTypeScale
    inline void SetCurrentlyLineTypeScale(double value); //Sets the value of the CurrentlyLineTypeScale property

    /*
    Property CurrentlyTextStyle

    property CurrentlyTextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString CurrentlyTextStyle() const; //Returns the value of CurrentlyTextStyle
    inline void SetCurrentlyTextStyle(const QString& value); //Sets the value of the CurrentlyTextStyle property

    /*
    Property CurrentlyTrueColor

    property CurrentlyTrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* CurrentlyTrueColor() const; //Returns the value of CurrentlyTrueColor
    inline void SetCurrentlyTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the CurrentlyTrueColor property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Insbase

    property Insbase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Insbase() const; //Returns the value of Insbase
    inline void SetInsbase(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Insbase property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property LinetypeScale

    property LineTypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Method CurrentSpace

    method CurrentSpace
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* CurrentSpace();

    /*
    Method GetBlockTable

    method GetBlockTable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTable* GetBlockTable();

    /*
    Method GetDimStyleTable

    method  GetDimStyleTable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTable* GetDimStyleTable();

    /*
    Method GetLayerTable

    method GetLayerTable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTable* GetLayerTable();

    /*
    Method GetLayoutDictionary

    method GetLayoutDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetLayoutDictionary();

    /*
    Method GetLinetypeTable

    method GetLinetypeTable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTable* GetLinetypeTable();

    /*
    Method GetNamedObjectsDictionary

    method GetNamedObjectsDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetNamedObjectsDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetTextStyleTable

    method GetTextStyleTable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTable* GetTextStyleTable();

    /*
    Method GetUCS

    method GetUCS
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawUcs* GetUCS();

    /*
    Method HandleToObject

    method HandleToObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* HandleToObject(const QString& handle);

    /*
    Method HandleToObjectId

    method HandleToObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong HandleToObjectId(const QString& pszHandle);

    /*
    Method Insert

    method Insert
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong Insert(MxDrawXLib::IMxDrawDatabase* pDb, const QString& pszBlockName);

    /*
    Method ObjectIdToHandle

    method ObjectIdToHandle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectIdToHandle(qlonglong lId);

    /*
    Method ObjectIdToObject

    method ObjectIdToObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* ObjectIdToObject(qlonglong lId);

    /*
    Method ReadDwgFile

    method ReadDwgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ReadDwgFile(const QString& pszFullFileName, const QString& password);

    /*
    Method SaveAs

    method SaveAs,iSaveType 
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveAs(const QString& pszFullFileName, int SaveAsType);

    /*
    Method SaveAs

    method SaveAs,iSaveType 
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveAs(const QString& pszFullFileName, int SaveAsType, const QVariant& vSecurityParams);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetVariable

    method SetVariable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetVariable(const QString& pszName, MxDrawXLib::IMxDrawResbuf* value);

    /*
    Method Wblock

    method Wblock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Wblock(MxDrawXLib::IMxDrawResbuf* aryId, MxDrawXLib::IMxDrawPoint* basePoint, MxDrawXLib::IMxDrawIdMapping** ppIdMapping);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawMcRxObject : public QAxObject
{
public:
    IMxDrawMcRxObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawResbuf : public QAxObject
{
public:
    IMxDrawResbuf(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    property Count
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method AddAppName

    method AddAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddAppName(const QString& pszAppName);

    /*
    Method AddDouble

    method AddDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddDouble(double dVal);

    /*
    Method AddDoubleEx

    method AddDoubleEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddDoubleEx(double dVal);

    /*
    Method AddDoubleEx

    method AddDoubleEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddDoubleEx(double dVal, int lDataType);

    /*
    Method AddLong

    method AddLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddLong(int lVal);

    /*
    Method AddLongEx

    method AddLongEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddLongEx(int lVal);

    /*
    Method AddLongEx

    method AddLongEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddLongEx(int lVal, int lDataType);

    /*
    Method AddObjectId

    method AddObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddObjectId(qlonglong lVal);

    /*
    Method AddObjectIdEx

    method AddObjectIdEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddObjectIdEx(qlonglong lVal);

    /*
    Method AddObjectIdEx

    method AddObjectIdEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddObjectIdEx(qlonglong lVal, int lDataType);

    /*
    Method AddPoint

    method AddPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddPoint(MxDrawXLib::IMxDrawPoint* pVal);

    /*
    Method AddPointEx

    method AddPointEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddPointEx(MxDrawXLib::IMxDrawPoint* pVal);

    /*
    Method AddPointEx

    method AddPointEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddPointEx(MxDrawXLib::IMxDrawPoint* pVal, int lDataType);

    /*
    Method AddString

    method AddString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddString(const QString& pszVal);

    /*
    Method AddStringEx

    method AddStringEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddStringEx(const QString& pszVal);

    /*
    Method AddStringEx

    method AddStringEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddStringEx(const QString& pszVal, int lDataType);

    /*
    Method AtDouble

    method AtDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double AtDouble(int lItem);

    /*
    Method AtLong

    method AtLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int AtLong(int lItem);

    /*
    Method AtObject

    method AtObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* AtObject(int lItem);

    /*
    Method AtObjectId

    method AtObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AtObjectId(int lItem);

    /*
    Method AtPoint

    method AtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* AtPoint(int lItem);

    /*
    Method AtString

    method AtString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString AtString(int lItem);

    /*
    Method ItemDataType

    method ItemDataType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int ItemDataType(int lItem);

    /*
    Method PrintData

    method PrintData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PrintData();

    /*
    Method Remove

    method Remove
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Remove(int lItem);

    /*
    Method RemoveAll

    method RemoveAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RemoveAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawPoint : public QAxObject
{
public:
    IMxDrawPoint(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property x

    property x
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double x() const; //Returns the value of x
    inline void setX(double value); //Sets the value of the x property

    /*
    Property y

    property y
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double y() const; //Returns the value of y
    inline void setY(double value); //Sets the value of the y property

    /*
    Property z

    property z
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double z() const; //Returns the value of z
    inline void setZ(double value); //Sets the value of the z property

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Add(MxDrawXLib::IMxDrawVector3d* pVec);

    /*
    Method DistanceTo

    method DistanceTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DistanceTo(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method IsEqualTo

    method IsEqualTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsEqualTo(MxDrawXLib::IMxDrawPoint* pPoint, double dTol);

    /*
    Method Sum

    method Sum
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Sum(MxDrawXLib::IMxDrawVector3d* pVec);

    /*
    Method SumVector

    method SumVector
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* SumVector(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* pMat);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawMatrix3d : public QAxObject
{
public:
    IMxDrawMatrix3d(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Det

    method Det
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Det();

    /*
    Method Get

    method Get
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Get(int iRow, int iCol);

    /*
    Method GetCoordSystem

    method GetCoordSystem
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetCoordSystem(MxDrawXLib::IMxDrawPoint** ppOrigin, MxDrawXLib::IMxDrawVector3d** ppXAxis, MxDrawXLib::IMxDrawVector3d** ppYAxis, MxDrawXLib::IMxDrawVector3d** ppZAxis);

    /*
    Method GetCoordSystem2

    method GetCoordSystem2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetCoordSystem2();

    /*
    Method Invert

    method Invert
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Invert();

    /*
    Method IsEqualTo

    method IsEqualTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsEqualTo(MxDrawXLib::IMxDrawMatrix3d* pMat);

    /*
    Method IsScaledOrtho

    method IsScaledOrtho
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsScaledOrtho();

    /*
    Method IsSingular

    method IsSingular
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsSingular(double dTol);

    /*
    Method IsUniScaledOrtho

    method IsUniScaledOrtho
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsUniScaledOrtho();

    /*
    Method Mirroring

    method Mirroring
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirroring(MxDrawXLib::IMxDrawPoint* pPt1, MxDrawXLib::IMxDrawPoint* pPt2);

    /*
    Method PostMultBy

    method PostMultBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PostMultBy(MxDrawXLib::IMxDrawMatrix3d* pRightSide);

    /*
    Method PreMultBy

    method PreMultBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PreMultBy(MxDrawXLib::IMxDrawMatrix3d* pLeftSide);

    /*
    Method Rotation

    method Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotation(double dAng, MxDrawXLib::IMxDrawVector3d* pAxis, MxDrawXLib::IMxDrawPoint* pCenter);

    /*
    Method Scaling

    method Scaling
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Scaling(double dScaleAll, MxDrawXLib::IMxDrawPoint* pCenter);

    /*
    Method Set

    method Set
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Set(int iRow, int iCol, double dVal);

    /*
    Method SetCoordSystem

    method SetCoordSystem
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetCoordSystem(MxDrawXLib::IMxDrawPoint* pOrigin, MxDrawXLib::IMxDrawVector3d* pXAxis, MxDrawXLib::IMxDrawVector3d* pYAxis, MxDrawXLib::IMxDrawVector3d* pZAxis);

    /*
    Method SetToIdentity

    method SetToIdentity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetToIdentity();

    /*
    Method Translation

    method Translation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Translation(MxDrawXLib::IMxDrawVector3d* pVector3d);

    /*
    Method TransposeIt

    method TransposeIt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransposeIt();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawVector3d : public QAxObject
{
public:
    IMxDrawVector3d(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property x

    property x
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double x() const; //Returns the value of x
    inline void setX(double value); //Sets the value of the x property

    /*
    Property y

    property y
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double y() const; //Returns the value of y
    inline void setY(double value); //Sets the value of the y property

    /*
    Property z

    property z
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double z() const; //Returns the value of z
    inline void setZ(double value); //Sets the value of the z property

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Add(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method Angle

    method Angle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Angle();

    /*
    Method AngleTo

    method AngleTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double AngleTo(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method AngleTo

    method AngleTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double AngleTo(MxDrawXLib::IMxDrawVector3d* pVector, MxDrawXLib::IMxDrawVector3d* pRefVec);

    /*
    Method AngleToXyPlan

    method AngleToXyPlan
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double AngleToXyPlan(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method CrossProduct

    method CrossProduct
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* CrossProduct(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method DotProduct

    method DotProduct
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DotProduct(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method IsEqualTo

    method IsEqualTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsEqualTo(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method IsZeroLength

    method IsZeroLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsZeroLength();

    /*
    Method Length

    method Length
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Length();

    /*
    Method MakeXAxis

    method MakeXAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MakeXAxis();

    /*
    Method MakeYAxis

    method MakeYAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MakeYAxis();

    /*
    Method MakeZAxis

    method MakeZAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MakeZAxis();

    /*
    Method Mult

    method Mult
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mult(double dScl);

    /*
    Method Negate

    method Negate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Negate();

    /*
    Method Normalize

    method Normalize
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Normalize();

    /*
    Method RotateBy

    method RotateBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RotateBy(double dAng);

    /*
    Method RotateBy

    method RotateBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RotateBy(double dAng, MxDrawXLib::IMxDrawVector3d* pAxis);

    /*
    Method RotateByXyPlan

    method RotateByXyPlan
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RotateByXyPlan(double dAng);

    /*
    Method Sub

    method Sub
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Sub(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* pMat);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawPoints : public QAxObject
{
public:
    IMxDrawPoints(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    property Count
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Add(double dX, double dY, double dZ);

    /*
    Method Add2

    method Add2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Add2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method Item

    method Item
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Item(int lItem);

    /*
    Method Remove

    method Remove
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Remove(int lItem);

    /*
    Method RemoveAll

    method RemoveAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RemoveAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawMcDbObject : public QAxObject
{
public:
    IMxDrawMcDbObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDictionary : public QAxObject
{
public:
    IMxDrawDictionary(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AddObject

    method AddObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* AddObject(const QString& pszKeyWord, const QString& pszClassName);

    /*
    Method AddXRecord

    method AddXRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawXRecord* AddXRecord(const QString& pszKeyWord);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionaryIterator* NewIterator();

    /*
    Method Remove

    method Remove
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Remove(const QString& pszName);

    /*
    Method Rename

    method Rename
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rename(const QString& pszOldName, const QString& pszNewName);

    /*
    Method Replace

    method Replace
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Replace(const QString& pszName, MxDrawXLib::IMxDrawMcDbObject* pObject);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawXRecord : public QAxObject
{
public:
    IMxDrawXRecord(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsXlateReferences

    property IsXlateReferences
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsXlateReferences() const; //Returns the value of IsXlateReferences
    inline void SetIsXlateReferences(bool value); //Sets the value of the IsXlateReferences property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXRecordData

    method GetXRecordData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXRecordData();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXRecordData

    method SetXRecordData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXRecordData(MxDrawXLib::IMxDrawResbuf* pXData);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDictionaryIterator : public QAxObject
{
public:
    IMxDrawDictionaryIterator(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetObject

    method GetObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* GetObject();

    /*
    Method Name

    method Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawBlockTableRecord : public QAxObject
{
public:
    IMxDrawBlockTableRecord(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Origin

    property Origin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Origin() const; //Returns the value of Origin
    inline void SetOrigin(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Origin property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AddArc

    method AddArc
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawArc* AddArc(double dCenX, double dCenY, double dRadius, double dStartAng, double dEndAng);

    /*
    Method AddArc2

    method AddArc2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawArc* AddArc2(double dStartPointX, double dStartPointY, double dX, double dY, double dEndPointX, double dEndPointY);

    /*
    Method AddArc3

    method AddArc3
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawArc* AddArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge);

    /*
    Method AddAttributeDef

    method AddAttributeDef
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawAttributeDefinition* AddAttributeDef(double dHeight, MxDrawXLib::McAttributeMode mode, const QString& pszPrompt, double dInsertionPointX, double dInsertionPointY, const QString& pszTag, const QString& pszValue);

    /*
    Method AddCircle

    method AddCircle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCircle* AddCircle(double dCenX, double dCenY, double dRadius);

    /*
    Method AddCloneEntity

    method AddCloneEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* AddCloneEntity(qlonglong lId);

    /*
    Method AddCustomObject

    method AddCustomObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* AddCustomObject(const QString& pszClassName);

    /*
    Method AddDimAligned

    method AddDimAligned
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimAligned* AddDimAligned(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dTextPositionX, double dTextPositionY);

    /*
    Method AddDimAngular

    method AddDimAngular
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimAngular* AddDimAngular(double dAngleVertexX, double dAngleVertexY, double dFirstEndPointX, double dFirstEndPointY, double dSecondEndPointX, double dSecondEndPointY, double dTextPointX, double dTextPointY);

    /*
    Method AddDimDiametric

    method AddDimDiametric
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimDiametric* AddDimDiametric(double dChordPointX, double dChordPointY, double dFarChordPointX, double dFarChordPointY, double dLeaderLength);

    /*
    Method AddDimOrdinate

    method AddDimOrdinate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimOrdinate* AddDimOrdinate(double dDefinitionPointX, double dDefinitionPointY, double dLeaderEndPointX, double dLeaderEndPointY, bool useXAxis);

    /*
    Method AddDimRadial

    method AddDimRadial
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimRadial* AddDimRadial(double dCenterX, double dCenterY, double dChordPointX, double dChordPointY, double LeaderLength);

    /*
    Method AddDimRotated

    method AddDimRotated
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimRotated* AddDimRotated(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dDimLineLocationX, double dDimLineLocationY, double dRotationAngle);

    /*
    Method AddEllipse

    method AddEllipse
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEllipse* AddEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio);

    /*
    Method AddEllipseArc

    method AddEllipseArc
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEllipse* AddEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng);

    /*
    Method AddEntity

    method AddEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* AddEntity(const QString& pszClassName);

    /*
    Method AddEntityEx

    method AddEntityEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* AddEntityEx(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method AddHatch

    method AddHatch
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawHatch* AddHatch(int lPatternType, const QString& pszPatternName);

    /*
    Method AddImage

    method AddImage
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawRasterImage* AddImage(double dOriginX, double dOriginY, double dUCornerX, double dUCornerY, double dVOnPlaneX, double dVOnPlaneY, qlonglong ImageDefId);

    /*
    Method AddImage2

    method AddImage2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawRasterImage* AddImage2(double dOriginX, double dOriginY, double dScale, qlonglong ImageDefId);

    /*
    Method AddImageMark

    method AddImageMark
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawImageMark* AddImageMark(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFileName, const QString& pszTwinkeImageFiles, bool isSaveData);

    /*
    Method AddLine

    method AddLine
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLine* AddLine(double dX1, double dY1, double dX2, double dY2);

    /*
    Method AddLines

    method AddLines
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPolyline* AddLines(MxDrawXLib::IMxDrawPoints* points);

    /*
    Method AddMText

    method AddMText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMText* AddMText(double dInsertionPointX, double dInsertionPointY, double dHeight, const QString& pszText);

    /*
    Method AddPoint

    method AddPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPointEntity* AddPoint(double dX1, double dY1);

    /*
    Method AddPolyline

    method AddPolyline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPolyline* AddPolyline(MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* sWdiths, MxDrawXLib::IMxDrawResbuf* eWidths, MxDrawXLib::IMxDrawResbuf* bulges);

    /*
    Method AddPolyline2

    method AddPolyline2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPolyline* AddPolyline2(MxDrawXLib::IMxDrawPoints* points, double dWidth);

    /*
    Method AddRay

    method AddRay
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawRay* AddRay(double dX1, double dY1, double dX2, double dY2);

    /*
    Method AddSolid

    method AddSolid
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawSolid* AddSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4);

    /*
    Method AddSpline

    method AddSpline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawSpline* AddSpline(MxDrawXLib::IMxDrawPoints* points, double dStartTangentX, double dStartTangentY, double dEndTangentX, double dEndTangentY);

    /*
    Method AddText

    method AddText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawText* AddText(double dPosX, double dPosY, const QString& pszText, double dHeight);

    /*
    Method AddText

    method AddText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawText* AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation);

    /*
    Method AddText

    method AddText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawText* AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode);

    /*
    Method AddText

    method AddText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawText* AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode, MxDrawXLib::McVerticalAlignment verticalMode);

    /*
    Method AddTolerance

    method AddTolerance
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTolerance* AddTolerance(const QString& pszText, double dX, double dY, double dDirectionX, double dDirectionY);

    /*
    Method AddTrace

    method AddTrace
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTrace* AddTrace(MxDrawXLib::IMxDrawPoints* points);

    /*
    Method AddXline

    method AddXline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawXline* AddXline(double dX1, double dY1, double dX2, double dY2);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetIsLayout

    method GetIsLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetIsLayout();

    /*
    Method GetLayout

    method GetLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayout* GetLayout();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method InsertBlock

    method InsertBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockReference* InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName);

    /*
    Method InsertBlock

    method InsertBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockReference* InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale);

    /*
    Method InsertBlock

    method InsertBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockReference* InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale, double dAng);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecordIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawSymbolTableRecord : public QAxObject
{
public:
    IMxDrawSymbolTableRecord(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawLine : public QAxObject
{
public:
    IMxDrawLine(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property EndPoint

    property EndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* EndPoint() const; //Returns the value of EndPoint
    inline void SetEndPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the EndPoint property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property StartPoint

    property StartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* StartPoint() const; //Returns the value of StartPoint
    inline void SetStartPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the StartPoint property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawCurve : public QAxObject
{
public:
    IMxDrawCurve(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawEntity : public QAxObject
{
public:
    IMxDrawEntity(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawMcCmColor : public QAxObject
{
public:
    IMxDrawMcCmColor(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ColorMethod

    property ColorMethod
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColorMethod ColorMethod() const; //Returns the value of ColorMethod
    inline void SetColorMethod(MxDrawXLib::McColorMethod value); //Sets the value of the ColorMethod property

    /*
    Property EntityColor

    property EntityColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int EntityColor() const; //Returns the value of EntityColor
    inline void SetEntityColor(int value); //Sets the value of the EntityColor property

    /*
    Property colorIndex

    property ColorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(int value); //Sets the value of the colorIndex property

    /*
    Method GetBlue

    method GetBlue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetBlue();

    /*
    Method GetColorName

    method GetColorName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetColorName();

    /*
    Method GetGreen

    method GetGreen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetGreen();

    /*
    Method GetRed

    method GetRed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetRed();

    /*
    Method SetRGB

    method SetRGB
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetRGB(int lRed, int lGreen, int lBlue);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawPolyline : public QAxObject
{
public:
    IMxDrawPolyline(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ConstantWidth

    property ConstantWidth
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ConstantWidth() const; //Returns the value of ConstantWidth
    inline void SetConstantWidth(double value); //Sets the value of the ConstantWidth property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HasPlinegen

    property HasPlinegen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasPlinegen() const; //Returns the value of HasPlinegen
    inline void SetHasPlinegen(bool value); //Sets the value of the HasPlinegen property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsClosedStatus

    property IsClosedStatus
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosedStatus() const; //Returns the value of IsClosedStatus
    inline void SetIsClosedStatus(bool value); //Sets the value of the IsClosedStatus property

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property NumVerts

    property NumVerts
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int NumVerts() const; //Returns the value of NumVerts

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property Thickness

    property Thickness
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Thickness() const; //Returns the value of Thickness
    inline void SetThickness(double value); //Sets the value of the Thickness property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AddVertexAt

    method AddVertexAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddVertexAt(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method AddVertexAt

    method AddVertexAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge);

    /*
    Method AddVertexAt

    method AddVertexAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge, double startWidth);

    /*
    Method AddVertexAt

    method AddVertexAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge, double startWidth, double endWidth);

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetBulgeAt

    method GetBulgeAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetBulgeAt(int index);

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEWidthsAt

    method GetEWidthsAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEWidthsAt(int index);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAt

    method GetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAt(int index);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSWidthsAt

    method GetSWidthsAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetSWidthsAt(int index);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetWidthsAt

    method GetWidthsAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetWidthsAt(int index, double& pStartWidth, double& pEndWidth);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method PointInPolygon

    method  PointInPolygon
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PointInPolygon(double dX, double dY);

    /*
    Method RemoveVertexAt

    method RemoveVertexAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RemoveVertexAt(int index);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetBulgeAt

    method SetBulgeAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetBulgeAt(int index, double bulge);

    /*
    Method SetPointAt

    method SetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetWidthsAt

    method SetWidthsAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetWidthsAt(int index, double dStartWidth, double dEndWidth);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawArc : public QAxObject
{
public:
    IMxDrawArc(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Center

    property Center
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Center() const; //Returns the value of Center
    inline void SetCenter(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Center property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property EndAngle

    property EndAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double EndAngle() const; //Returns the value of EndAngle
    inline void SetEndAngle(double value); //Sets the value of the EndAngle property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Radius

    property Radius
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Radius() const; //Returns the value of Radius
    inline void SetRadius(double value); //Sets the value of the Radius property

    /*
    Property StartAngle

    property StartAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double StartAngle() const; //Returns the value of StartAngle
    inline void SetStartAngle(double value); //Sets the value of the StartAngle property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawAttributeDefinition : public QAxObject
{
public:
    IMxDrawAttributeDefinition(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignmentPoint

    property AlignmentPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* AlignmentPoint() const; //Returns the value of AlignmentPoint
    inline void SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the AlignmentPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property FieldLength

    property FieldLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int FieldLength() const; //Returns the value of FieldLength
    inline void SetFieldLength(int value); //Sets the value of the FieldLength property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Height

    property Height
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsConstant

    property IsConstant
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsConstant() const; //Returns the value of IsConstant
    inline void SetIsConstant(bool value); //Sets the value of the IsConstant property

    /*
    Property IsInvisible

    property IsInvisible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsInvisible() const; //Returns the value of IsInvisible
    inline void SetIsInvisible(bool value); //Sets the value of the IsInvisible property

    /*
    Property IsMirroredInX

    property IsMirroredInX
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInX() const; //Returns the value of IsMirroredInX
    inline void SetIsMirroredInX(bool value); //Sets the value of the IsMirroredInX property

    /*
    Property IsMirroredInY

    property IsMirroredInY
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInY() const; //Returns the value of IsMirroredInY
    inline void SetIsMirroredInY(bool value); //Sets the value of the IsMirroredInY property

    /*
    Property IsPreset

    property IsPreset
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsPreset() const; //Returns the value of IsPreset
    inline void SetIsPreset(bool value); //Sets the value of the IsPreset property

    /*
    Property IsVerifiable

    property IsVerifiable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsVerifiable() const; //Returns the value of IsVerifiable
    inline void SetIsVerifiable(bool value); //Sets the value of the IsVerifiable property

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Oblique

    property Oblique
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Oblique() const; //Returns the value of Oblique
    inline void SetOblique(double value); //Sets the value of the Oblique property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property Position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property Prompt

    property Prompt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Prompt() const; //Returns the value of Prompt
    inline void SetPrompt(const QString& value); //Sets the value of the Prompt property

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property Tag

    property Tag
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextString

    property TextString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextString() const; //Returns the value of TextString
    inline void SetTextString(const QString& value); //Sets the value of the TextString property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property WidthFactor

    property WidthFactor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double WidthFactor() const; //Returns the value of WidthFactor
    inline void SetWidthFactor(double value); //Sets the value of the WidthFactor property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Property horizontalMode

    property HorizontalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McHorizontalAlignment horizontalMode() const; //Returns the value of horizontalMode
    inline void setHorizontalMode(MxDrawXLib::McHorizontalAlignment value); //Sets the value of the horizontalMode property

    /*
    Property verticalMode

    property VerticalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McVerticalAlignment verticalMode() const; //Returns the value of verticalMode
    inline void setVerticalMode(MxDrawXLib::McVerticalAlignment value); //Sets the value of the verticalMode property

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method ToCurves

    method ToCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* ToCurves();

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawText : public QAxObject
{
public:
    IMxDrawText(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignmentPoint

    property AlignmentPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* AlignmentPoint() const; //Returns the value of AlignmentPoint
    inline void SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the AlignmentPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Height

    property Height
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsMirroredInX

    property IsMirroredInX
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInX() const; //Returns the value of IsMirroredInX
    inline void SetIsMirroredInX(bool value); //Sets the value of the IsMirroredInX property

    /*
    Property IsMirroredInY

    property IsMirroredInY
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInY() const; //Returns the value of IsMirroredInY
    inline void SetIsMirroredInY(bool value); //Sets the value of the IsMirroredInY property

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Oblique

    property Oblique
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Oblique() const; //Returns the value of Oblique
    inline void SetOblique(double value); //Sets the value of the Oblique property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property Position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property TextString

    property TextString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextString() const; //Returns the value of TextString
    inline void SetTextString(const QString& value); //Sets the value of the TextString property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property WidthFactor

    property WidthFactor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double WidthFactor() const; //Returns the value of WidthFactor
    inline void SetWidthFactor(double value); //Sets the value of the WidthFactor property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Property horizontalMode

    property HorizontalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McHorizontalAlignment horizontalMode() const; //Returns the value of horizontalMode
    inline void setHorizontalMode(MxDrawXLib::McHorizontalAlignment value); //Sets the value of the horizontalMode property

    /*
    Property verticalMode

    property VerticalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McVerticalAlignment verticalMode() const; //Returns the value of verticalMode
    inline void setVerticalMode(MxDrawXLib::McVerticalAlignment value); //Sets the value of the verticalMode property

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method ToCurves

    method ToCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* ToCurves();

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawCircle : public QAxObject
{
public:
    IMxDrawCircle(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Center

    property Center
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Center() const; //Returns the value of Center
    inline void SetCenter(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Center property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Radius

    property Radius
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Radius() const; //Returns the value of Radius
    inline void SetRadius(double value); //Sets the value of the Radius property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDimAligned : public QAxObject
{
public:
    IMxDrawDimAligned(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimLinePoint

    property DimLinePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimLinePoint() const; //Returns the value of DimLinePoint
    inline void SetDimLinePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimLinePoint property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Oblique

    property Oblique
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Oblique() const; //Returns the value of Oblique
    inline void SetOblique(double value); //Sets the value of the Oblique property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property XLine1Point

    property XLine1Point
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine1Point() const; //Returns the value of XLine1Point
    inline void SetXLine1Point(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine1Point property

    /*
    Property XLine2Point

    property XLine2Point
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine2Point() const; //Returns the value of XLine2Point
    inline void SetXLine2Point(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine2Point property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDimension : public QAxObject
{
public:
    IMxDrawDimension(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDimAngular : public QAxObject
{
public:
    IMxDrawDimAngular(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ArcPoint

    property ArcPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* ArcPoint() const; //Returns the value of ArcPoint
    inline void SetArcPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the ArcPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property ExtArcOn

    property ExtArcOn
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ExtArcOn() const; //Returns the value of ExtArcOn
    inline void SetExtArcOn(bool value); //Sets the value of the ExtArcOn property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property XLine1End

    property XLine1End
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine1End() const; //Returns the value of XLine1End
    inline void SetXLine1End(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine1End property

    /*
    Property XLine1Start

    property XLine1Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine1Start() const; //Returns the value of XLine1Start
    inline void SetXLine1Start(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine1Start property

    /*
    Property XLine2End

    property XLine2End
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine2End() const; //Returns the value of XLine2End
    inline void SetXLine2End(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine2End property

    /*
    Property XLine2Start

    property XLine2Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine2Start() const; //Returns the value of XLine2Start
    inline void SetXLine2Start(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine2Start property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDimDiametric : public QAxObject
{
public:
    IMxDrawDimDiametric(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ChordPoint

    property ChordPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* ChordPoint() const; //Returns the value of ChordPoint
    inline void SetChordPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the ChordPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property ExtArcEndAngle

    property ExtArcEndAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ExtArcEndAngle() const; //Returns the value of ExtArcEndAngle
    inline void SetExtArcEndAngle(double value); //Sets the value of the ExtArcEndAngle property

    /*
    Property ExtArcStartAngle

    property ExtArcStartAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ExtArcStartAngle() const; //Returns the value of ExtArcStartAngle
    inline void SetExtArcStartAngle(double value); //Sets the value of the ExtArcStartAngle property

    /*
    Property FarChordPoint

    property FarChordPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* FarChordPoint() const; //Returns the value of FarChordPoint
    inline void SetFarChordPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the FarChordPoint property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LeaderLength

    property LeaderLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LeaderLength() const; //Returns the value of LeaderLength
    inline void SetLeaderLength(double value); //Sets the value of the LeaderLength property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDimRotated : public QAxObject
{
public:
    IMxDrawDimRotated(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimLinePoint

    property DimLinePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimLinePoint() const; //Returns the value of DimLinePoint
    inline void SetDimLinePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimLinePoint property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Oblique

    property Oblique
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Oblique() const; //Returns the value of Oblique
    inline void SetOblique(double value); //Sets the value of the Oblique property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property XLine1Point

    property XLine1Point
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine1Point() const; //Returns the value of XLine1Point
    inline void SetXLine1Point(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine1Point property

    /*
    Property XLine2Point

    property XLine2Point
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine2Point() const; //Returns the value of XLine2Point
    inline void SetXLine2Point(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine2Point property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDimOrdinate : public QAxObject
{
public:
    IMxDrawDimOrdinate(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DefiningPoint

    property DefiningPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DefiningPoint() const; //Returns the value of DefiningPoint
    inline void SetDefiningPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DefiningPoint property

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsUsingXAxis

    property IsUsingXAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsUsingXAxis() const; //Returns the value of IsUsingXAxis
    inline void SetIsUsingXAxis(bool value); //Sets the value of the IsUsingXAxis property

    /*
    Property IsUsingYAxis

    property IsUsingYAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsUsingYAxis() const; //Returns the value of IsUsingYAxis
    inline void SetIsUsingYAxis(bool value); //Sets the value of the IsUsingYAxis property

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LeaderEndPoint

    property LeaderEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* LeaderEndPoint() const; //Returns the value of LeaderEndPoint
    inline void SetLeaderEndPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the LeaderEndPoint property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Origin

    property Origin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Origin() const; //Returns the value of Origin
    inline void SetOrigin(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Origin property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDimRadial : public QAxObject
{
public:
    IMxDrawDimRadial(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Center

    property Center
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Center() const; //Returns the value of Center
    inline void SetCenter(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Center property

    /*
    Property ChordPoint

    property ChordPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* ChordPoint() const; //Returns the value of ChordPoint
    inline void SetChordPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the ChordPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property ExtArcEndAngle

    property ExtArcEndAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ExtArcEndAngle() const; //Returns the value of ExtArcEndAngle
    inline void SetExtArcEndAngle(double value); //Sets the value of the ExtArcEndAngle property

    /*
    Property ExtArcStartAngle

    property ExtArcStartAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ExtArcStartAngle() const; //Returns the value of ExtArcStartAngle
    inline void SetExtArcStartAngle(double value); //Sets the value of the ExtArcStartAngle property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LeaderLength

    property LeaderLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LeaderLength() const; //Returns the value of LeaderLength
    inline void SetLeaderLength(double value); //Sets the value of the LeaderLength property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawEllipse : public QAxObject
{
public:
    IMxDrawEllipse(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Center

    property Center
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Center() const; //Returns the value of Center
    inline void SetCenter(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Center property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property EndAngle

    property EndAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double EndAngle() const; //Returns the value of EndAngle
    inline void SetEndAngle(double value); //Sets the value of the EndAngle property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property MajorAxis

    property MajorAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* MajorAxis() const; //Returns the value of MajorAxis
    inline void SetMajorAxis(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the MajorAxis property

    /*
    Property MinorAxis

    property MinorAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* MinorAxis() const; //Returns the value of MinorAxis

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property RadiusRatio

    property RadiusRatio
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double RadiusRatio() const; //Returns the value of RadiusRatio
    inline void SetRadiusRatio(double value); //Sets the value of the RadiusRatio property

    /*
    Property StartAngle

    property StartAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double StartAngle() const; //Returns the value of StartAngle
    inline void SetStartAngle(double value); //Sets the value of the StartAngle property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawMText : public QAxObject
{
public:
    IMxDrawMText(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Attachment

    property Attachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint Attachment() const; //Returns the value of Attachment
    inline void SetAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the Attachment property

    /*
    Property Contents

    property Contents
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Contents() const; //Returns the value of Contents
    inline void SetContents(const QString& value); //Sets the value of the Contents property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Direction

    property Direction
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Direction() const; //Returns the value of Direction
    inline void SetDirection(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Direction property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property FlowDirection

    property FlowDirection
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McDrawingDirection FlowDirection() const; //Returns the value of FlowDirection
    inline void SetFlowDirection(MxDrawXLib::McDrawingDirection value); //Sets the value of the FlowDirection property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineSpacingFactor

    property LineSpacingFactor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LineSpacingFactor() const; //Returns the value of LineSpacingFactor
    inline void SetLineSpacingFactor(double value); //Sets the value of the LineSpacingFactor property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Location

    property Location
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Location() const; //Returns the value of Location
    inline void SetLocation(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Location property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property TextHeight

    property TextHeight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextHeight() const; //Returns the value of TextHeight
    inline void SetTextHeight(double value); //Sets the value of the TextHeight property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method ToCurves

    method ToCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* ToCurves();

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawPointEntity : public QAxObject
{
public:
    IMxDrawPointEntity(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property Position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawRay : public QAxObject
{
public:
    IMxDrawRay(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UnitDir

    property UnitDir
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* UnitDir() const; //Returns the value of UnitDir
    inline void SetUnitDir(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the UnitDir property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property basePoint

    property BasePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePoint() const; //Returns the value of basePoint
    inline void setBasePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePoint property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawSolid : public QAxObject
{
public:
    IMxDrawSolid(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetPointAt

    method GetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAt(int index);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetPointAt

    method SetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawSpline : public QAxObject
{
public:
    IMxDrawSpline(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetControlPoints

    method GetControlPoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetControlPoints();

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetFitData

    method GetFitData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetFitData(MxDrawXLib::IMxDrawPoints** pPoints, int& degree, double& fitTolerance, bool& tangentsExist, MxDrawXLib::IMxDrawVector3d** startTangent, MxDrawXLib::IMxDrawVector3d** endTangent);

    /*
    Method GetFitParam

    method GetFitParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetFitParam();

    /*
    Method GetFitPoints

    method GetFitPoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetFitPoints();

    /*
    Method GetKnots

    method GetKnots
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetKnots();

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetNurbsData

    method GetNurbsData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetNurbsData(int& degree, bool& rational, bool& closed, bool& periodic, MxDrawXLib::IMxDrawPoints** controlPoints, MxDrawXLib::IMxDrawResbuf** knots, MxDrawXLib::IMxDrawResbuf** weights, double& controlPtTol, double& knotTol);

    /*
    Method GetParam

    method GetParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetParam();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetWeights

    method GetWeights
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetWeights();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetFitData

    method SetFitData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetFitData(MxDrawXLib::IMxDrawPoints* points, int degree, double fitTolerance, MxDrawXLib::IMxDrawVector3d* startTangent, MxDrawXLib::IMxDrawVector3d* endTangent);

    /*
    Method SetNurbsData

    method SetNurbsData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetNurbsData(int degree, bool rational, bool closed, bool periodic, MxDrawXLib::IMxDrawPoints* controlPoints, MxDrawXLib::IMxDrawResbuf* knots, MxDrawXLib::IMxDrawResbuf* weights, double controlPtTol, double knotTol);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawTolerance : public QAxObject
{
public:
    IMxDrawTolerance(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawTrace : public QAxObject
{
public:
    IMxDrawTrace(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetPointAt

    method GetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAt(int index);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetPointAt

    method SetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawXline : public QAxObject
{
public:
    IMxDrawXline(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UnitDir

    property UnitDir
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* UnitDir() const; //Returns the value of UnitDir
    inline void SetUnitDir(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the UnitDir property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property basePoint

    property BasePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePoint() const; //Returns the value of basePoint
    inline void setBasePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePoint property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawBlockReference : public QAxObject
{
public:
    IMxDrawBlockReference(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AttributeCount

    property AttributeCount
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int AttributeCount() const; //Returns the value of AttributeCount

    /*
    Property BlockTableRecord

    property BlockTableRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* BlockTableRecord() const; //Returns the value of BlockTableRecord
    inline void SetBlockTableRecord(MxDrawXLib::IMxDrawBlockTableRecord* value); //Sets the value of the BlockTableRecord property

    /*
    Property BlockTableRecordId

    property BlockTableRecordId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong BlockTableRecordId() const; //Returns the value of BlockTableRecordId
    inline void SetBlockTableRecordId(qlonglong value); //Sets the value of the BlockTableRecordId property

    /*
    Property BlockTransform

    property BlockTransform
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMatrix3d* BlockTransform() const; //Returns the value of BlockTransform
    inline void SetBlockTransform(MxDrawXLib::IMxDrawMatrix3d* value); //Sets the value of the BlockTransform property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property Position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property ScaleFactors

    property ScaleFactors
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawScale3d* ScaleFactors() const; //Returns the value of ScaleFactors
    inline void SetScaleFactors(MxDrawXLib::IMxDrawScale3d* value); //Sets the value of the ScaleFactors property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AppendAttribute

    method AppendAttribute
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawAttribute* AppendAttribute();

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method AttributeItem

    method AttributeItem
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawAttribute* AttributeItem(int lItem);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method Explode

    method Explode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* Explode();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBlockName

    method GetBlockName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetBlockName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawScale3d : public QAxObject
{
public:
    IMxDrawScale3d(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property sx

    property sx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double sx() const; //Returns the value of sx
    inline void setSx(double value); //Sets the value of the sx property

    /*
    Property sy

    property sy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double sy() const; //Returns the value of sy
    inline void setSy(double value); //Sets the value of the sy property

    /*
    Property sz

    property sz
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double sz() const; //Returns the value of sz
    inline void setSz(double value); //Sets the value of the sz property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawAttribute : public QAxObject
{
public:
    IMxDrawAttribute(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AlignmentPoint

    property AlignmentPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* AlignmentPoint() const; //Returns the value of AlignmentPoint
    inline void SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the AlignmentPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property FieldLength

    property FieldLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int FieldLength() const; //Returns the value of FieldLength
    inline void SetFieldLength(int value); //Sets the value of the FieldLength property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Height

    property Height
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsConstant

    property IsConstant
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsConstant() const; //Returns the value of IsConstant

    /*
    Property IsInvisible

    property IsInvisible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsInvisible() const; //Returns the value of IsInvisible
    inline void SetIsInvisible(bool value); //Sets the value of the IsInvisible property

    /*
    Property IsMirroredInX

    property IsMirroredInX
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInX() const; //Returns the value of IsMirroredInX
    inline void SetIsMirroredInX(bool value); //Sets the value of the IsMirroredInX property

    /*
    Property IsMirroredInY

    property IsMirroredInY
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInY() const; //Returns the value of IsMirroredInY
    inline void SetIsMirroredInY(bool value); //Sets the value of the IsMirroredInY property

    /*
    Property IsPreset

    property IsPreset
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsPreset() const; //Returns the value of IsPreset

    /*
    Property IsVerifiable

    property IsVerifiable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsVerifiable() const; //Returns the value of IsVerifiable

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Oblique

    property Oblique
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Oblique() const; //Returns the value of Oblique
    inline void SetOblique(double value); //Sets the value of the Oblique property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property Position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property Tag

    property Tag
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextString

    property TextString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextString() const; //Returns the value of TextString
    inline void SetTextString(const QString& value); //Sets the value of the TextString property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property WidthFactor

    property WidthFactor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double WidthFactor() const; //Returns the value of WidthFactor
    inline void SetWidthFactor(double value); //Sets the value of the WidthFactor property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Property horizontalMode

    property HorizontalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McHorizontalAlignment horizontalMode() const; //Returns the value of horizontalMode
    inline void setHorizontalMode(MxDrawXLib::McHorizontalAlignment value); //Sets the value of the horizontalMode property

    /*
    Property verticalMode

    property VerticalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McVerticalAlignment verticalMode() const; //Returns the value of verticalMode
    inline void setVerticalMode(MxDrawXLib::McVerticalAlignment value); //Sets the value of the verticalMode property

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method ToCurves

    method ToCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* ToCurves();

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawHatch : public QAxObject
{
public:
    IMxDrawHatch(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property GradientAngle

    property GradientAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GradientAngle() const; //Returns the value of GradientAngle
    inline void SetGradientAngle(double value); //Sets the value of the GradientAngle property

    /*
    Property GradientName

    property GradientName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GradientName() const; //Returns the value of GradientName
    inline void SetGradientName(const QString& value); //Sets the value of the GradientName property

    /*
    Property GradientOneColorMode

    property GradientOneColorMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GradientOneColorMode() const; //Returns the value of GradientOneColorMode
    inline void SetGradientOneColorMode(bool value); //Sets the value of the GradientOneColorMode property

    /*
    Property GradientType

    property GradientType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::GradientPatternType GradientType() const; //Returns the value of GradientType
    inline void SetGradientType(MxDrawXLib::GradientPatternType value); //Sets the value of the GradientType property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HatchObjectType

    property HatchObjectType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::HatchObjectType HatchObjectType() const; //Returns the value of HatchObjectType
    inline void SetHatchObjectType(MxDrawXLib::HatchObjectType value); //Sets the value of the HatchObjectType property

    /*
    Property HatchStyle

    property HatchStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::HatchStyle HatchStyle() const; //Returns the value of HatchStyle
    inline void SetHatchStyle(MxDrawXLib::HatchStyle value); //Sets the value of the HatchStyle property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property NumLoops

    property NumLoops
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int NumLoops() const; //Returns the value of NumLoops

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property PatternAngle

    property PatternAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double PatternAngle() const; //Returns the value of PatternAngle
    inline void SetPatternAngle(double value); //Sets the value of the PatternAngle property

    /*
    Property PatternDouble

    property PatternDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PatternDouble() const; //Returns the value of PatternDouble
    inline void SetPatternDouble(bool value); //Sets the value of the PatternDouble property

    /*
    Property PatternName

    property PatternName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString PatternName() const; //Returns the value of PatternName
    inline void SetPatternName(const QString& value); //Sets the value of the PatternName property

    /*
    Property PatternScale

    property PatternScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double PatternScale() const; //Returns the value of PatternScale
    inline void SetPatternScale(double value); //Sets the value of the PatternScale property

    /*
    Property PatternSpace

    property PatternSpace
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double PatternSpace() const; //Returns the value of PatternSpace
    inline void SetPatternSpace(double value); //Sets the value of the PatternSpace property

    /*
    Property PatternType

    property PatternType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::HatchPatternType PatternType() const; //Returns the value of PatternType
    inline void SetPatternType(MxDrawXLib::HatchPatternType value); //Sets the value of the PatternType property

    /*
    Property ShadeTintValue

    property ShadeTintValue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ShadeTintValue() const; //Returns the value of ShadeTintValue
    inline void SetShadeTintValue(double value); //Sets the value of the ShadeTintValue property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AddPatternDefinition

    method AddPatternDefinition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AddPatternDefinition(double Angle, double baseX, double baseY, double offsetX, double offsetY, MxDrawXLib::IMxDrawResbuf* dashes);

    /*
    Method AddPatternDefinitionEx

    method AddPatternDefinitionEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AddPatternDefinitionEx(const QString& pszDefinitionData, double dScale);

    /*
    Method AppendLoop

    method AppendLoop
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AppendLoop(int loopType, MxDrawXLib::IMxDrawResbuf* pData);

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method ClearPatternDefinition

    method ClearPatternDefinition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearPatternDefinition();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method EvaluateHatch

    method EvaluateHatch
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EvaluateHatch(bool bUnderestimateNumLines);

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetLoopAt

    method GetLoopAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetLoopAt(int loopIndex);

    /*
    Method GetPatternDefinitionAt

    method GetPatternDefinitionAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetPatternDefinitionAt(int index, double& Angle, double& baseX, double& baseY, double& offsetX, double& offsetY);

    /*
    Method GetPolylines

    method GetPolylines
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetPolylines();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsGradient

    method IsGradient
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsGradient();

    /*
    Method IsHatch

    method IsHatch
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsHatch();

    /*
    Method IsSolid

    method IsSolid
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsSolid();

    /*
    Method LoadPatternDefinition

    method LoadPatternDefinition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool LoadPatternDefinition(const QString& pszFileName, const QString& pszName, double dPatternScale, double dPatternAngel);

    /*
    Method LoopTypeAt

    method LoopTypeAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int LoopTypeAt(int loopIndex);

    /*
    Method LoopTypeIsPolyline

    method LoopTypeIsPolyline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool LoopTypeIsPolyline(int loopIndex);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method NumPatternDefinitions

    method NumPatternDefinitions
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int NumPatternDefinitions();

    /*
    Method RemoveAllLoop

    method RemoveAllLoop
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RemoveAllLoop();

    /*
    Method RemoveLoopAt

    method RemoveLoopAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool RemoveLoopAt(int loopIndex);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method ScalePattern

    method ScalePattern
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ScalePattern(double dScale);

    /*
    Method SetLoopAt

    method SetLoopAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetLoopAt(int loopIndex, int loopType, MxDrawXLib::IMxDrawResbuf* pData);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

    /*
    Method getGradientColors

    method getGradientColors
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getGradientColors(MxDrawXLib::IMxDrawResbuf** mxColors);

    /*
    Method setGradientColors

    method setGradientColors
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool setGradientColors(MxDrawXLib::IMxDrawResbuf* mxColors, MxDrawXLib::IMxDrawResbuf* mxValues);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawLayout : public QAxObject
{
public:
    IMxDrawLayout(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property LayoutName

    property LayoutName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LayoutName() const; //Returns the value of LayoutName
    inline void SetLayoutName(const QString& value); //Sets the value of the LayoutName property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawRasterImage : public QAxObject
{
public:
    IMxDrawRasterImage(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property ImageDefId

    property ImageDefId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ImageDefId() const; //Returns the value of ImageDefId
    inline void SetImageDefId(qlonglong value); //Sets the value of the ImageDefId property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetOrientation

    method GetOrientation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetOrientation(MxDrawXLib::IMxDrawPoint** Origin, MxDrawXLib::IMxDrawVector3d** uCorner, MxDrawXLib::IMxDrawVector3d** vOnPlane);

    /*
    Method GetOrientation2

    method GetOrientation2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetOrientation2();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetOrientation

    method SetOrientation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetOrientation(MxDrawXLib::IMxDrawPoint* Origin, MxDrawXLib::IMxDrawVector3d* uCorner, MxDrawXLib::IMxDrawVector3d* vOnPlane);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawBlockTableRecordIterator : public QAxObject
{
public:
    IMxDrawBlockTableRecordIterator(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetEntity

    method GetEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* GetEntity();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawImageMark : public QAxObject
{
public:
    IMxDrawImageMark(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Angle

    property Angle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Angle() const; //Returns the value of Angle
    inline void SetAngle(double value); //Sets the value of the Angle property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Height

    property Height
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property ImageFile

    property ImageFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ImageFile() const; //Returns the value of ImageFile
    inline void SetImageFile(const QString& value); //Sets the value of the ImageFile property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsCDCDraw

    property IsCDCDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsCDCDraw() const; //Returns the value of IsCDCDraw
    inline void SetIsCDCDraw(bool value); //Sets the value of the IsCDCDraw property

    /*
    Property IsDrawFlag

    property IsDrawFlag
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsDrawFlag() const; //Returns the value of IsDrawFlag
    inline void SetIsDrawFlag(bool value); //Sets the value of the IsDrawFlag property

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property Scale

    property Scale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Scale() const; //Returns the value of Scale
    inline void SetScale(double value); //Sets the value of the Scale property

    /*
    Property Text

    property Text
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextHeight

    property TextHeight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextHeight() const; //Returns the value of TextHeight
    inline void SetTextHeight(double value); //Sets the value of the TextHeight property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property TwinkeImageFile

    property TwinkeImageFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TwinkeImageFile() const; //Returns the value of TwinkeImageFile
    inline void SetTwinkeImageFile(const QString& value); //Sets the value of the TwinkeImageFile property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method ClearImageData

    method ClearImageData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearImageData();

    /*
    Method ClearTwinkeImageData

    method ClearTwinkeImageData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearTwinkeImageData();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method ReadImageData

    method ReadImageData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ReadImageData(const QString& pszFile);

    /*
    Method ReadTwinkeImageData

    method ReadTwinkeImageData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ReadTwinkeImageData(const QString& pszFiles);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawBlockTable : public QAxObject
{
public:
    IMxDrawBlockTable(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* Add(const QString& pszName);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method Has

    method Has
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Has(const QString& pName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawSymbolTable : public QAxObject
{
public:
    IMxDrawSymbolTable(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawBlockTableIterator : public QAxObject
{
public:
    IMxDrawBlockTableIterator(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetRecord

    method GetRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* GetRecord();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawLayerTable : public QAxObject
{
public:
    IMxDrawLayerTable(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTableRecord* Add(const QString& pszName);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTableRecord* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTableRecord* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method Has

    method Has
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Has(const QString& pName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTableIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawLayerTableRecord : public QAxObject
{
public:
    IMxDrawLayerTableRecord(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Color

    property Color
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* Color() const; //Returns the value of Color
    inline void SetColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the Color property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsFrozen

    property IsFrozen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsFrozen() const; //Returns the value of IsFrozen
    inline void SetIsFrozen(bool value); //Sets the value of the IsFrozen property

    /*
    Property IsLocked

    property IsLocked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsLocked() const; //Returns the value of IsLocked
    inline void SetIsLocked(bool value); //Sets the value of the IsLocked property

    /*
    Property IsOff

    property IsOff
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsOff() const; //Returns the value of IsOff
    inline void SetIsOff(bool value); //Sets the value of the IsOff property

    /*
    Property LinetypeObjectId

    property LinetypeObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong LinetypeObjectId() const; //Returns the value of LinetypeObjectId
    inline void SetLinetypeObjectId(qlonglong value); //Sets the value of the LinetypeObjectId property

    /*
    Property Lineweight

    property LineWeight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawLayerTableIterator : public QAxObject
{
public:
    IMxDrawLayerTableIterator(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetRecord

    method GetRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTableRecord* GetRecord();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawLinetypeTable : public QAxObject
{
public:
    IMxDrawLinetypeTable(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTableRecord* Add(const QString& pszName);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTableRecord* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTableRecord* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method Has

    method Has
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Has(const QString& pName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTableIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawLinetypeTableRecord : public QAxObject
{
public:
    IMxDrawLinetypeTableRecord(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Comments

    property Comments
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Comments() const; //Returns the value of Comments
    inline void SetComments(const QString& value); //Sets the value of the Comments property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsScaledToFit

    property IsScaledToFit
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsScaledToFit() const; //Returns the value of IsScaledToFit
    inline void SetIsScaledToFit(bool value); //Sets the value of the IsScaledToFit property

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NumDashes

    property NumDashes
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int NumDashes() const; //Returns the value of NumDashes
    inline void SetNumDashes(int value); //Sets the value of the NumDashes property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property PatternLength

    property PatternLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double PatternLength() const; //Returns the value of PatternLength
    inline void SetPatternLength(double value); //Sets the value of the PatternLength property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method DashLengthAt

    method DashLengthAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DashLengthAt(int index);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetDashLengthAt

    method SetDashLengthAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDashLengthAt(int index, double dLen);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetShapeIsUcsOrientedAt

    method SetShapeIsUcsOrientedAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetShapeIsUcsOrientedAt(int index, bool isUcsOriented);

    /*
    Method SetShapeNumberAt

    method SetShapeNumberAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetShapeNumberAt(int index, int lNumber);

    /*
    Method SetShapeOffsetAt

    method SetShapeOffsetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetShapeOffsetAt(int index, MxDrawXLib::IMxDrawVector3d* offset);

    /*
    Method SetShapeRotationAt

    method SetShapeRotationAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetShapeRotationAt(int index, double dRotation);

    /*
    Method SetTextAt

    method SetTextAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTextAt(int index, const QString& pszText);

    /*
    Method ShapeIsUcsOrientedAt

    method ShapeIsUcsOrientedAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShapeIsUcsOrientedAt(int index);

    /*
    Method ShapeNumberAt

    method ShapeNumberAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int ShapeNumberAt(int index);

    /*
    Method ShapeOffsetAt

    method ShapeOffsetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* ShapeOffsetAt(int index);

    /*
    Method ShapeRotationAt

    method ShapeRotationAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ShapeRotationAt(int index);

    /*
    Method ShapeStyleAt

    method ShapeStyleAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ShapeStyleAt(int index);

    /*
    Method TextAt

    method TextAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextAt(int index);

    /*
    Method setShapeStyleAt

    method setShapeStyleAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setShapeStyleAt(int index, qlonglong lId);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawLinetypeTableIterator : public QAxObject
{
public:
    IMxDrawLinetypeTableIterator(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetRecord

    method GetRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTableRecord* GetRecord();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawTextStyleTable : public QAxObject
{
public:
    IMxDrawTextStyleTable(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTableRecord* Add(const QString& pszName);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTableRecord* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTableRecord* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method Has

    method Has
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Has(const QString& pName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTableIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawTextStyleTableRecord : public QAxObject
{
public:
    IMxDrawTextStyleTableRecord(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property bigFontFileName

    property bigFontFileName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString bigFontFileName() const; //Returns the value of bigFontFileName
    inline void setBigFontFileName(const QString& value); //Sets the value of the bigFontFileName property

    /*
    Property fileName

    property fileName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString fileName() const; //Returns the value of fileName
    inline void setFileName(const QString& value); //Sets the value of the fileName property

    /*
    Property flagBits

    property flagBits
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int flagBits() const; //Returns the value of flagBits
    inline void setFlagBits(int value); //Sets the value of the flagBits property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Property isShapeFile

    property isShapeFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isShapeFile() const; //Returns the value of isShapeFile
    inline void setIsShapeFile(bool value); //Sets the value of the isShapeFile property

    /*
    Property isVertical

    property isVertical
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isVertical() const; //Returns the value of isVertical
    inline void setIsVertical(bool value); //Sets the value of the isVertical property

    /*
    Property obliquingAngle

    property obliquingAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double obliquingAngle() const; //Returns the value of obliquingAngle
    inline void setObliquingAngle(double value); //Sets the value of the obliquingAngle property

    /*
    Property priorSize

    property priorSize
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double priorSize() const; //Returns the value of priorSize
    inline void setPriorSize(double value); //Sets the value of the priorSize property

    /*
    Property textSize

    property textSize
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double textSize() const; //Returns the value of textSize
    inline void setTextSize(double value); //Sets the value of the textSize property

    /*
    Property xScale

    property xScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double xScale() const; //Returns the value of xScale
    inline void setXScale(double value); //Sets the value of the xScale property

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method Font

    method Font
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Font(QString& pTypeface, bool& bold, bool& italic, int& charset, int& pitchAndFamily);

    /*
    Method Font2

    method Font2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* Font2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetFont

    method SetFont
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetFont(const QString& pTypeface, bool bold, bool italic, int charset, int pitchAndFamily);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawTextStyleTableIterator : public QAxObject
{
public:
    IMxDrawTextStyleTableIterator(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetRecord

    method GetRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTableRecord* GetRecord();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawIdMapping : public QAxObject
{
public:
    IMxDrawIdMapping(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    property Count
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Find

    method Find
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong Find(qlonglong lKeyId);

    /*
    Method Item

    method Item
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong Item(int index, qlonglong& lId1);

    /*
    Method ItemKey

    method ItemKey
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ItemKey(int index);

    /*
    Method ItemValue

    method ItemValue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ItemValue(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawUcs : public QAxObject
{
public:
    IMxDrawUcs(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDimStyleTable : public QAxObject
{
public:
    IMxDrawDimStyleTable(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTableRecord* Add(const QString& pszName);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTableRecord* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTableRecord* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method Has

    method Has
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Has(const QString& pName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTableIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDimStyleTableRecord : public QAxObject
{
public:
    IMxDrawDimStyleTableRecord(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawDimStyleTableIterator : public QAxObject
{
public:
    IMxDrawDimStyleTableIterator(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetRecord

    method GetRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTableRecord* GetRecord();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawUtility : public QAxObject
{
public:
    IMxDrawUtility(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method GetAngle

    method GetAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetAngle(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt);

    /*
    Method GetCorner

    method GetCorner
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetCorner(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt);

    /*
    Method GetDimAngle

    method GetDimAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimAngle(double dAng);

    /*
    Method GetDistance

    method GetDistance
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistance(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt);

    /*
    Method GetEntity

    method GetEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* GetEntity(MxDrawXLib::IMxDrawPoint** pPickPoint, const QString& Prompt);

    /*
    Method GetImageSize

    method GetImageSize
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetImageSize(const QString& sImageFile);

    /*
    Method GetInteger

    method GetInteger
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetInteger(const QString& Prompt);

    /*
    Method GetKeyword

    method GetKeyword
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetKeyword(const QString& Prompt, const QString& keyWordList);

    /*
    Method GetPoint

    method GetPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPoint(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt);

    /*
    Method GetReal

    method GetReal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetReal(const QString& Prompt);

    /*
    Method GetStatus

    method GetStatus
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus GetStatus();

    /*
    Method GetString

    method GetString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetString(const QString& pormpt, const QString& defval);

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method InitializeUserInput

    method InitializeUserInput
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void InitializeUserInput(int bits, const QString& keyWordList);

    /*
    Method PointInPolyline

    method PointInPolyline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PointInPolyline(MxDrawXLib::IMxDrawPoints* pPointArray, double dX, double dY);

    /*
    Method Prompt

    method Prompt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Prompt(const QString& message);

    /*
    Method TableSearch

    method TableSearch
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* TableSearch(const QString& pszSpaceName, const QString& pszTableHead);

    /*
    Method UcsToWcs

    method UcsToWcs
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* UcsToWcs(MxDrawXLib::IMxDrawPoint* pIn);

    /*
    Method WcsToUcs

    method WcsToUcs
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* WcsToUcs(MxDrawXLib::IMxDrawPoint* pIn);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawCustomEntity : public QAxObject
{
public:
    IMxDrawCustomEntity(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DragPoint

    property DragPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DragPoint() const; //Returns the value of DragPoint
    inline void SetDragPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DragPoint property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Guid

    property Guid
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Guid() const; //Returns the value of Guid
    inline void SetGuid(const QString& value); //Sets the value of the Guid property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method BeginSetValue

    method BeginSetValue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void BeginSetValue();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Draw

    method Draw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* Draw();

    /*
    Method EntSetValue

    method EntSetValue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void EntSetValue();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDouble

    method GetDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDouble(const QString& pszName);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetLong

    method GetLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetLong(const QString& pszName);

    /*
    Method GetLongPtr

    method GetLongPtr
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetLongPtr(const QString& pszName);

    /*
    Method GetPoint

    method GetPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPoint(const QString& pszName);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetString

    method GetString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetString(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsHave

    methodIsHave
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsHave(const QString& pszName);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDouble

    method SetDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDouble(const QString& pszName, double dV);

    /*
    Method SetLong

    method SetLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetLong(const QString& pszName, int lV);

    /*
    Method SetLongPtr

    method SetLongPtr
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetLongPtr(const QString& pszName, qlonglong lV);

    /*
    Method SetPoint

    method SetPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetPoint(const QString& pszName, MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetString

    method SetString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetString(const QString& pszName, const QString& pszV);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawSelectionSet : public QAxObject
{
public:
    IMxDrawSelectionSet(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    property Count
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method AllSelect

    method AllSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AllSelect();

    /*
    Method AllSelect

    method AllSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AllSelect(MxDrawXLib::IMxDrawResbuf* filterData);

    /*
    Method CurrentSelect

    method CurrentSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void CurrentSelect();

    /*
    Method CurrentSelect

    method CurrentSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void CurrentSelect(MxDrawXLib::IMxDrawResbuf* pFilter);

    /*
    Method Item

    method Item
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* Item(int index);

    /*
    Method Select

    method Select
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Select(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Select

    method Select
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Select(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2, MxDrawXLib::IMxDrawResbuf* filterData);

    /*
    Method Select2

    method Select2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2);

    /*
    Method Select2

    method Select2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2, const QVariant& filterType);

    /*
    Method Select2

    method Select2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2, const QVariant& filterType, const QVariant& filterData);

    /*
    Method SelectAtPoint

    method SelectAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SelectAtPoint(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method SelectAtPoint

    method SelectAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SelectAtPoint(MxDrawXLib::IMxDrawPoint* point, MxDrawXLib::IMxDrawResbuf* filterData);

    /*
    Method SelectByPolygon

    method SelectByPolygon
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SelectByPolygon(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoints* points);

    /*
    Method SelectByPolygon

    method SelectByPolygon
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SelectByPolygon(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* filterData);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawRasterImageDef : public QAxObject
{
public:
    IMxDrawRasterImageDef(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property SourceFileName

    property SourceFileName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString SourceFileName() const; //Returns the value of SourceFileName
    inline void SetSourceFileName(const QString& value); //Sets the value of the SourceFileName property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawEntityImp : public QAxObject
{
public:
    IMxDrawEntityImp(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawBinStream : public QAxObject
{
public:
    IMxDrawBinStream(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ExParam

    property ExParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ExParam() const; //Returns the value of ExParam
    inline void SetExParam(const QString& value); //Sets the value of the ExParam property

    /*
    Method FreeMemory

    method FreeMemory
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void FreeMemory();

    /*
    Method GetByte

    method GetByte
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline uint GetByte(int lIndex);

    /*
    Method GetCount

    method GetCount
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetCount();

    /*
    Method MallocMemory

    method MallocMemory
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MallocMemory(int lLen);

    /*
    Method SetByte

    method SetByte
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetByte(int lIndex, uint value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawService : public QAxObject
{
public:
    IMxDrawService(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method DrawImage

    method DrawImage
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawImage(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFilePath);

    /*
    Method GetCurrentLayout

    method GetCurrentLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetCurrentLayout();

    /*
    Method GetDatabase

    method GetDatabase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* GetDatabase();

    /*
    Method MakeCurrent

    method MakeCurrent
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MakeCurrent();

    /*
    Method Open

    method Open
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Open(const QString& pszFileName);

    /*
    Method SaveDwgFile

    method SaveDwgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveDwgFile(const QString& pFileName);

    /*
    Method SetCurrentLayout

    method SetCurrentLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetCurrentLayout(const QString& pszLayoutName);

    /*
    Method SetViewColor

    method SetViewColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetViewColor(uint red, uint green, uint blue);

    /*
    Method WriteJpg

    method WriteJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool WriteJpg(const QString& pszFileName, int lWidth, int lHeight);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawUiPrString : public QAxObject
{
public:
    IMxDrawUiPrString(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property defValue

    property defValue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString defValue() const; //Returns the value of defValue
    inline void setDefValue(const QString& value); //Sets the value of the defValue property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawUiPrBase : public QAxObject
{
public:
    IMxDrawUiPrBase(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawUiPrPoint : public QAxObject
{
public:
    IMxDrawUiPrPoint(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property basePoint

    property basePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePoint() const; //Returns the value of basePoint
    inline void setBasePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePoint property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method setUseBasePt

    method setUseBasePt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setUseBasePt(bool isUse);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawWorldDraw : public QAxObject
{
public:
    IMxDrawWorldDraw(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Color

    property  Color
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Color() const; //Returns the value of Color
    inline void SetColor(int value); //Sets the value of the Color property

    /*
    Property DimStyle

    property DimStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimStyle() const; //Returns the value of DimStyle
    inline void SetDimStyle(const QString& value); //Sets the value of the DimStyle property

    /*
    Property Draworder

    property  Draworder
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Draworder() const; //Returns the value of Draworder
    inline void SetDraworder(int value); //Sets the value of the Draworder property

    /*
    Property Layer

    property  Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property  LineType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LineWidth

    property  LineWidth
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LineWidth() const; //Returns the value of LineWidth
    inline void SetLineWidth(double value); //Sets the value of the LineWidth property

    /*
    Property LinetypeScale

    property  LineTypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property TextStyle

    property  TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Method DrawArc

    method DrawArc
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawArc(double dCenX, double dCenY, double dRadius, double dStartAng, double dEndAng);

    /*
    Method DrawArc2

    method DrawArc2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawArc2(double dStartPointX, double dStartPointY, double dX, double dY, double dEndPointX, double dEndPointY);

    /*
    Method DrawArc3

    method DrawArc3
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge);

    /*
    Method DrawBlockReference

    method DrawBlockReference
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawBlockReference(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale, double dAng);

    /*
    Method DrawCircle

    method DrawCircle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawCircle(double dCenX, double dCenY, double dRadius);

    /*
    Method DrawEllipse

    method DrawEllipse
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio);

    /*
    Method DrawEllipseArc

    method DrawEllipseArc
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng);

    /*
    Method DrawEntity

    method DrawEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawEntity(MxDrawXLib::IMxDrawEntity* pEntity);

    /*
    Method DrawImage

    method DrawImage
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawImage(double dOriginX, double dOriginY, double dScale, double dAng, const QString& pszImageFileName);

    /*
    Method DrawLine

    method DrawLine
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void DrawLine(double dX1, double dY1, double dX2, double dY2);

    /*
    Method DrawLines

    method DrawLines
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawLines(MxDrawXLib::IMxDrawPoints* points);

    /*
    Method DrawMText

    method DrawMText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawMText(double dInsertionPointX, double dInsertionPointY, double dHeight, const QString& pszText);

    /*
    Method DrawPoint

    method DrawPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawPoint(double dX, double dY);

    /*
    Method DrawPolyline

    method DrawPolyline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawPolyline(MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* sWdiths, MxDrawXLib::IMxDrawResbuf* eWidths, MxDrawXLib::IMxDrawResbuf* bulges);

    /*
    Method DrawPolyline2

    method DrawPolyline2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawPolyline2(MxDrawXLib::IMxDrawPoints* points, double dWidth);

    /*
    Method DrawRay

    method DrawRay
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawRay(double dX1, double dY1, double dX2, double dY2);

    /*
    Method DrawSolid

    method DrawSolid
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4);

    /*
    Method DrawSpline

    method DrawSpline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawSpline(MxDrawXLib::IMxDrawPoints* points, double dStartTangentX, double dStartTangentY, double dEndTangentX, double dEndTangentY);

    /*
    Method DrawText

    method DrawText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight);

    /*
    Method DrawText

    method DrawText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation);

    /*
    Method DrawText

    method DrawText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode);

    /*
    Method DrawText

    method DrawText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode, MxDrawXLib::McVerticalAlignment verticalMode);

    /*
    Method DrawWipeout

    method DrawWipeout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawWipeout(MxDrawXLib::IMxDrawPoints* points);

    /*
    Method DrawXline

    method DrawXline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawXline(double dX1, double dY1, double dX2, double dY2);

    /*
    Method SetColorIndex

    method SetColorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetColorIndex(int lIndex);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawPrint : public QAxObject
{
public:
    IMxDrawPrint(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property CorrectPrintPageMargin

    property CorrectPrintPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool CorrectPrintPageMargin() const; //Returns the value of CorrectPrintPageMargin
    inline void SetCorrectPrintPageMargin(bool value); //Sets the value of the CorrectPrintPageMargin property

    /*
    Property DocName

    property DocName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DocName() const; //Returns the value of DocName
    inline void SetDocName(const QString& value); //Sets the value of the DocName property

    /*
    Property Flag

    property Flag
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Flag() const; //Returns the value of Flag
    inline void SetFlag(int value); //Sets the value of the Flag property

    /*
    Property LayoutName

    property LayoutName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LayoutName() const; //Returns the value of LayoutName
    inline void SetLayoutName(const QString& value); //Sets the value of the LayoutName property

    /*
    Property PaperName

    property PaperName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString PaperName() const; //Returns the value of PaperName
    inline void SetPaperName(const QString& value); //Sets the value of the PaperName property

    /*
    Property PrintConfig

    property PrintConfig
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString PrintConfig() const; //Returns the value of PrintConfig
    inline void SetPrintConfig(const QString& value); //Sets the value of the PrintConfig property

    /*
    Property PrintDirection

    property PrintDirection
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int PrintDirection() const; //Returns the value of PrintDirection
    inline void SetPrintDirection(int value); //Sets the value of the PrintDirection property

    /*
    Property PrintLineWidth

    property PrintLineWidth
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PrintLineWidth() const; //Returns the value of PrintLineWidth
    inline void SetPrintLineWidth(bool value); //Sets the value of the PrintLineWidth property

    /*
    Property PrintName

    property PrintName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString PrintName() const; //Returns the value of PrintName
    inline void SetPrintName(const QString& value); //Sets the value of the PrintName property

    /*
    Property dBottomPageMargin

    property dBottomPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double dBottomPageMargin() const; //Returns the value of dBottomPageMargin
    inline void setDBottomPageMargin(double value); //Sets the value of the dBottomPageMargin property

    /*
    Property dLeftPageMargin

    property dLeftPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double dLeftPageMargin() const; //Returns the value of dLeftPageMargin
    inline void setDLeftPageMargin(double value); //Sets the value of the dLeftPageMargin property

    /*
    Property dRightPageMargin

    property dRightPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double dRightPageMargin() const; //Returns the value of dRightPageMargin
    inline void setDRightPageMargin(double value); //Sets the value of the dRightPageMargin property

    /*
    Property dTopPageMargin

    property dTopPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double dTopPageMargin() const; //Returns the value of dTopPageMargin
    inline void setDTopPageMargin(double value); //Sets the value of the dTopPageMargin property

    /*
    Method AddPageComment

    method AddPageComment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AddPageComment(const QString& sText, const QString& sFont, double iFontSize, int pos);

    /*
    Method BatchPrintDialog

    method BatchPrintDialog
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool BatchPrintDialog(MxDrawXLib::IMxDrawResbuf* pParam);

    /*
    Method BeginNestedPrint

    method BeginNestedPrint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool BeginNestedPrint();

    /*
    Method EndNestedPrint

    method EndNestedPrint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EndNestedPrint();

    /*
    Method Print

    method Print
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Print(double dX1, double dY1, double dX2, double dY2);

    /*
    Method Print2

    method Print2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Print2(double dCenX, double dCenY, double dScale);

    /*
    Method PrintAll

    method PrintAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PrintAll();

    /*
    Method PrintDialog

    method PrintDialog
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PrintDialog();

    /*
    Method PrintHtml

    method PrintHtml
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PrintHtml(bool isShowPrintDialog);

    /*
    Method PrintScreen

    method PrintScreen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PrintScreen();

    /*
    Method SetData

    method SetData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetData(MxDrawXLib::IMxDrawResbuf* pData);

    /*
    Method UseDefaultPageMargin

    method UseDefaultPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UseDefaultPageMargin(bool isUse);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawUiPrAngle : public QAxObject
{
public:
    IMxDrawUiPrAngle(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property angleType

    property angleType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrMcUiPrAngleType angleType() const; //Returns the value of angleType
    inline void setAngleType(MxDrawXLib::McUiPrMcUiPrAngleType value); //Sets the value of the angleType property

    /*
    Property basePoint

    property basePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePoint() const; //Returns the value of basePoint
    inline void setBasePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePoint property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Property precision

    property precision
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int precision() const; //Returns the value of precision
    inline void setPrecision(int value); //Sets the value of the precision property

    /*
    Property unit

    property unit
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int unit() const; //Returns the value of unit
    inline void setUnit(int value); //Sets the value of the unit property

    /*
    Property useBasePt

    property useBasePt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool useBasePt() const; //Returns the value of useBasePt
    inline void setUseBasePt(bool value); //Sets the value of the useBasePt property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setDefault

    method setDefault
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setDefault(double def, const QString& pszDefAngPrompt);

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawUiPrDist : public QAxObject
{
public:
    IMxDrawUiPrDist(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property basePt

    property basePt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePt() const; //Returns the value of basePt
    inline void setBasePt(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePt property

    /*
    Property distType

    property distType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrMcUiPrDoubleType distType() const; //Returns the value of distType
    inline void setDistType(MxDrawXLib::McUiPrMcUiPrDoubleType value); //Sets the value of the distType property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Property precision

    property precision
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int precision() const; //Returns the value of precision
    inline void setPrecision(int value); //Sets the value of the precision property

    /*
    Property useBasePt

    property useBasePt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool useBasePt() const; //Returns the value of useBasePt
    inline void setUseBasePt(bool value); //Sets the value of the useBasePt property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setDefault

    method setDefault
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setDefault(double def);

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method setRange

    method setRange
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setRange(double dMin, double dMax);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawUiPrDouble : public QAxObject
{
public:
    IMxDrawUiPrDouble(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property doubleType

    property doubleType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrMcUiPrDoubleType doubleType() const; //Returns the value of doubleType
    inline void setDoubleType(MxDrawXLib::McUiPrMcUiPrDoubleType value); //Sets the value of the doubleType property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Property precision

    property precision
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int precision() const; //Returns the value of precision
    inline void setPrecision(int value); //Sets the value of the precision property

    /*
    Property unit

    property unit
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int unit() const; //Returns the value of unit
    inline void setUnit(int value); //Sets the value of the unit property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setDefault

    method setDefault
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setDefault(double def);

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method setRange

    method setRange
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setRange(double dMin, double dMax);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawUiPrEntity : public QAxObject
{
public:
    IMxDrawUiPrEntity(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property filterLockedLayers

    property filterLockedLayers
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool filterLockedLayers() const; //Returns the value of filterLockedLayers
    inline void setFilterLockedLayers(bool value); //Sets the value of the filterLockedLayers property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method Entity

    method Entity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* Entity();

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method pickPoint

    method pickPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* pickPoint();

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method setFilter

    method setFilter
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setFilter(MxDrawXLib::IMxDrawResbuf* pFilter);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawUiPrInt : public QAxObject
{
public:
    IMxDrawUiPrInt(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property intType

    property intType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrMcUiPrDoubleType intType() const; //Returns the value of intType
    inline void setIntType(MxDrawXLib::McUiPrMcUiPrDoubleType value); //Sets the value of the intType property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setDefault

    method setDefault
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setDefault(int def);

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method setRange

    method setRange
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setRange(int lMin, int lMax);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawUiPrKeyWord : public QAxObject
{
public:
    IMxDrawUiPrKeyWord(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setDefault

    method setDefault
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setDefault(const QString& def, const QString& pszDefKeyPrompt);

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawCompare : public QAxObject
{
public:
    IMxDrawCompare(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Bound

    property Bound
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* Bound() const; //Returns the value of Bound
    inline void SetBound(MxDrawXLib::IMxDrawPoints* value); //Sets the value of the Bound property

    /*
    Method Do

    method Do
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Do(MxDrawXLib::IMxDrawDatabase* pSrc, MxDrawXLib::IMxDrawDatabase* pNew);

    /*
    Method Do

    method Do
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Do(MxDrawXLib::IMxDrawDatabase* pSrc, MxDrawXLib::IMxDrawDatabase* pNew, MxDrawXLib::IMxDrawResbuf* filterData);

    /*
    Method DrawFlag

    method DrawFlag
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void DrawFlag(double dScale, bool isNew);

    /*
    Method GetCurveIdsOfTheDifferent

    method GetCurveIdsOfTheDifferent
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetCurveIdsOfTheDifferent();

    /*
    Method GetIsErase

    method GetIsErase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetIsErase(qlonglong lId);

    /*
    Method GetPos

    method GetPos
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPos(qlonglong lId);

    /*
    Method SetTheOffsetMatrix

    method SetTheOffsetMatrix
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTheOffsetMatrix(MxDrawXLib::IMxDrawMatrix3d* pMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawModifyTheColor : public QAxObject
{
public:
    IMxDrawModifyTheColor(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Do

    method Do
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Do(MxDrawXLib::IMxDrawDatabase* pDatabase, int lRGB);

    /*
    Method DoEntity

    method DoEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void DoEntity(MxDrawXLib::IMxDrawResbuf* pEntitys, int lRGB);

    /*
    Method Restore

    method Restore
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Restore();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawComment : public QAxObject
{
public:
    IMxDrawComment(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ArrowType

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int ArrowType() const; //Returns the value of ArrowType
    inline void SetArrowType(int value); //Sets the value of the ArrowType property

    /*
    Property Bounding

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* Bounding() const; //Returns the value of Bounding
    inline void SetBounding(MxDrawXLib::IMxDrawPoints* value); //Sets the value of the Bounding property

    /*
    Property BoundingBoxType

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int BoundingBoxType() const; //Returns the value of BoundingBoxType
    inline void SetBoundingBoxType(int value); //Sets the value of the BoundingBoxType property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property EdgeNumber

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int EdgeNumber() const; //Returns the value of EdgeNumber
    inline void SetEdgeNumber(int value); //Sets the value of the EdgeNumber property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property ShapRadius

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ShapRadius() const; //Returns the value of ShapRadius
    inline void SetShapRadius(double value); //Sets the value of the ShapRadius property

    /*
    Property Text

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextHeight

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextHeight() const; //Returns the value of TextHeight
    inline void SetTextHeight(double value); //Sets the value of the TextHeight property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property basePoint

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePoint() const; //Returns the value of basePoint
    inline void setBasePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePoint property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawChange : public QAxObject
{
public:
    IMxDrawChange(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method ToArc

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawArc* ToArc(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToAttribute

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawAttribute* ToAttribute(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToBlockReference

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockReference* ToBlockReference(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToCircle

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCircle* ToCircle(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToCustomEntity

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* ToCustomEntity(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimAligned

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimAligned* ToDimAligned(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimAngular

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimAngular* ToDimAngular(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimDiametric

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimDiametric* ToDimDiametric(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimRadial

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimRadial* ToDimRadial(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimRotated

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimRotated* ToDimRotated(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimension

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimension* ToDimension(MxDrawXLib::IMxDrawEntity* ppIn);

    /*
    Method ToEllipse

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEllipse* ToEllipse(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToHatch

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawHatch* ToHatch(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToImageMark

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawImageMark* ToImageMark(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToLine

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLine* ToLine(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToMText

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMText* ToMText(MxDrawXLib::IMxDrawEntity* pEntity);

    /*
    Method ToMxDrawComment

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawComment* ToMxDrawComment(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToPolyline

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPolyline* ToPolyline(MxDrawXLib::IMxDrawEntity* pEnt);

    /*
    Method ToRasterImage

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawRasterImage* ToRasterImage(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToRay

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawRay* ToRay(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToSolid

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawSolid* ToSolid(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToSpline

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawSpline* ToSpline(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToText

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawText* ToText(MxDrawXLib::IMxDrawEntity* pEntity);

    /*
    Method ToXline

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawXline* ToXline(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method toPoint

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* toPoint(MxDrawXLib::IMxDrawEntity* pIn);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawQrCode : public QAxObject
{
public:
    IMxDrawQrCode(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Center

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Center() const; //Returns the value of Center
    inline void SetCenter(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Center property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Rotation

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property Scale

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Scale() const; //Returns the value of Scale
    inline void SetScale(double value); //Sets the value of the Scale property

    /*
    Property Text

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawAnimation : public QAxObject
{
public:
    IMxDrawAnimation(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method Draw

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Draw(qlonglong lId);

    /*
    Method Draw2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Draw2(const QString& pszHandle);

    /*
    Method EndDraw

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void EndDraw();

    /*
    Method GetAnimationEntity

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* GetAnimationEntity(qlonglong lId);

    /*
    Method GetAnimationEntity2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* GetAnimationEntity2(const QString& pszHandle);

    /*
    Method InitAnimationEntity

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void InitAnimationEntity(MxDrawXLib::IMxDrawEntity* pEnt);

    /*
    Method InitAnimationEntity2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void InitAnimationEntity2(const QString& pszHandle);

    /*
    Method Remove

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Remove(qlonglong lId);

    /*
    Method Remove2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Remove2(const QString& pszHandle);

    /*
    Method SetTwinkeColor

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTwinkeColor(MxDrawXLib::IMxDrawResbuf* colors);

    /*
    Method SetTwinkeTime

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTwinkeTime(int lTimer);

    /*
    Method StartDraw

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void StartDraw();

    /*
    Method Stop

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Stop(qlonglong lId, bool isStop);

    /*
    Method Stop2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Stop2(const QString& pszHandle, bool isStop);

    /*
    Method StopAllTwinke

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void StopAllTwinke();

    /*
    Method StopTwinke

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool StopTwinke(qlonglong lId);

    /*
    Method StopTwinke2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool StopTwinke2(const QString& pszHandle);

    /*
    Method Twinke

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Twinke(qlonglong lId);

    /*
    Method Twinke2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Twinke2(const QString& pszHandle);

    /*
    Method TwinkeEx

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool TwinkeEx(qlonglong lId, int lCount);

    /*
    Method TwinkeEx2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool TwinkeEx2(const QString& pszHandle, int lCount);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT IMxDrawProxyEntity : public QAxObject
{
public:
    IMxDrawProxyEntity(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Property originalClassName

    property originalClassName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString originalClassName() const; //Returns the value of originalClassName

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class MXDRAWXLIB_EXPORT MxDrawX : public QAxWidget
{
public:
    MxDrawX(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl(QStringLiteral("{74a777f8-7a8f-4e7c-af47-7074828086e2}"));
    }

    MxDrawX(_DMxDrawX *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AutoActive

    property AutoActive
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AutoActive() const; //Returns the value of AutoActive
    inline void SetAutoActive(bool value); //Sets the value of the AutoActive property

    /*
    Property AutoZoomAll

    property AutoZoomAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AutoZoomAll() const; //Returns the value of AutoZoomAll
    inline void SetAutoZoomAll(bool value); //Sets the value of the AutoZoomAll property

    /*
    Property BrowseMode

    property BrowseMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool BrowseMode() const; //Returns the value of BrowseMode
    inline void SetBrowseMode(bool value); //Sets the value of the BrowseMode property

    /*
    Property CommandMessgaeModify

    property CommandMessgaeModify
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int CommandMessgaeModify() const; //Returns the value of CommandMessgaeModify
    inline void SetCommandMessgaeModify(int value); //Sets the value of the CommandMessgaeModify property

    /*
    Property CursorLong

    property CursorLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double CursorLong() const; //Returns the value of CursorLong
    inline void SetCursorLong(double value); //Sets the value of the CursorLong property

    /*
    Property CursorWidth

    property CursorWidth
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double CursorWidth() const; //Returns the value of CursorWidth
    inline void SetCursorWidth(double value); //Sets the value of the CursorWidth property

    /*
    Property DimStyle

    property DimStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimStyle() const; //Returns the value of DimStyle
    inline void SetDimStyle(const QString& value); //Sets the value of the DimStyle property

    /*
    Property DrawCADColor

    property DrawCADColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline uint DrawCADColor() const; //Returns the value of DrawCADColor
    inline void SetDrawCADColor(uint value); //Sets the value of the DrawCADColor property

    /*
    Property DrawCADColorIndex

    property DrawCADColorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int DrawCADColorIndex() const; //Returns the value of DrawCADColorIndex
    inline void SetDrawCADColorIndex(int value); //Sets the value of the DrawCADColorIndex property

    /*
    Property DrawColor

    property DrawColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QColor DrawColor() const; //Returns the value of DrawColor
    inline void SetDrawColor(const QColor& value); //Sets the value of the DrawColor property

    /*
    Property DwgFilePath

    property DwgFilePath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DwgFilePath() const; //Returns the value of DwgFilePath
    inline void SetDwgFilePath(const QString& value); //Sets the value of the DwgFilePath property

    /*
    Property DynToolTip

    property DynToolTip
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DynToolTip() const; //Returns the value of DynToolTip
    inline void SetDynToolTip(bool value); //Sets the value of the DynToolTip property

    /*
    Property DynToolTipTime

    property DynToolTipTime
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int DynToolTipTime() const; //Returns the value of DynToolTipTime
    inline void SetDynToolTipTime(int value); //Sets the value of the DynToolTipTime property

    /*
    Property EditGripPoint

    property EditGripPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EditGripPoint() const; //Returns the value of EditGripPoint
    inline void SetEditGripPoint(bool value); //Sets the value of the EditGripPoint property

    /*
    Property EnableClipboard

    property EnableClipboard
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableClipboard() const; //Returns the value of EnableClipboard
    inline void SetEnableClipboard(bool value); //Sets the value of the EnableClipboard property

    /*
    Property EnableDeleteKey

    property EnableDeleteKey
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableDeleteKey() const; //Returns the value of EnableDeleteKey
    inline void SetEnableDeleteKey(bool value); //Sets the value of the EnableDeleteKey property

    /*
    Property EnableDrawOrder

    property EnableDrawOrder
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableDrawOrder() const; //Returns the value of EnableDrawOrder
    inline void SetEnableDrawOrder(bool value); //Sets the value of the EnableDrawOrder property

    /*
    Property EnableIntelliSelect

    property EnableIntelliSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableIntelliSelect() const; //Returns the value of EnableIntelliSelect
    inline void SetEnableIntelliSelect(bool value); //Sets the value of the EnableIntelliSelect property

    /*
    Property EnableMouseMoveView

    property EnableMouseMoveView
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableMouseMoveView() const; //Returns the value of EnableMouseMoveView
    inline void SetEnableMouseMoveView(bool value); //Sets the value of the EnableMouseMoveView property

    /*
    Property EnableOleShow

    property EnableOleShow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableOleShow() const; //Returns the value of EnableOleShow
    inline void SetEnableOleShow(bool value); //Sets the value of the EnableOleShow property

    /*
    Property EnableOpenCmd

    property EnableOpenCmd
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int EnableOpenCmd() const; //Returns the value of EnableOpenCmd
    inline void SetEnableOpenCmd(int value); //Sets the value of the EnableOpenCmd property

    /*
    Property EnablePrintCmd

    property EnablePrintCmd
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int EnablePrintCmd() const; //Returns the value of EnablePrintCmd
    inline void SetEnablePrintCmd(int value); //Sets the value of the EnablePrintCmd property

    /*
    Property EnableUndo

    property EnableUndo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableUndo() const; //Returns the value of EnableUndo
    inline void SetEnableUndo(bool value); //Sets the value of the EnableUndo property

    /*
    Property HightQualityDraw

    property HightQualityDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HightQualityDraw() const; //Returns the value of HightQualityDraw
    inline void SetHightQualityDraw(bool value); //Sets the value of the HightQualityDraw property

    /*
    Property ImpDynWorldDrawFun

    property ImpDynWorldDrawFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpDynWorldDrawFun() const; //Returns the value of ImpDynWorldDrawFun
    inline void SetImpDynWorldDrawFun(IDispatch* value); //Sets the value of the ImpDynWorldDrawFun property

    /*
    Property ImpExplodeFun

    property ImpExplodeFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpExplodeFun() const; //Returns the value of ImpExplodeFun
    inline void SetImpExplodeFun(IDispatch* value); //Sets the value of the ImpExplodeFun property

    /*
    Property ImpGetGeomExtentsFun

    property ImpGetGeomExtentsFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpGetGeomExtentsFun() const; //Returns the value of ImpGetGeomExtentsFun
    inline void SetImpGetGeomExtentsFun(IDispatch* value); //Sets the value of the ImpGetGeomExtentsFun property

    /*
    Property ImpGetGripPointsFun

    property ImpGetGripPointsFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpGetGripPointsFun() const; //Returns the value of ImpGetGripPointsFun
    inline void SetImpGetGripPointsFun(IDispatch* value); //Sets the value of the ImpGetGripPointsFun property

    /*
    Property ImpGetOsnapPointsFun

    property ImpGetOsnapPointsFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpGetOsnapPointsFun() const; //Returns the value of ImpGetOsnapPointsFun
    inline void SetImpGetOsnapPointsFun(IDispatch* value); //Sets the value of the ImpGetOsnapPointsFun property

    /*
    Property ImpHyperlinkClickFun

    property ImpHyperlinkClickFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpHyperlinkClickFun() const; //Returns the value of ImpHyperlinkClickFun
    inline void SetImpHyperlinkClickFun(IDispatch* value); //Sets the value of the ImpHyperlinkClickFun property

    /*
    Property ImpInputPointToolTipFun

    property ImpInputPointToolTipFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpInputPointToolTipFun() const; //Returns the value of ImpInputPointToolTipFun
    inline void SetImpInputPointToolTipFun(IDispatch* value); //Sets the value of the ImpInputPointToolTipFun property

    /*
    Property ImpMoveGripPointsAtFun

    property ImpMoveGripPointsAtFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpMoveGripPointsAtFun() const; //Returns the value of ImpMoveGripPointsAtFun
    inline void SetImpMoveGripPointsAtFun(IDispatch* value); //Sets the value of the ImpMoveGripPointsAtFun property

    /*
    Property ImpTransformByFun

    property ImpTransformByFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImpTransformByFun() const; //Returns the value of ImpTransformByFun
    inline void SetImpTransformByFun(IDispatch* value); //Sets the value of the ImpTransformByFun property

    /*
    Property ImplementCommandEventFun

    property ImplementCommandEventFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImplementCommandEventFun() const; //Returns the value of ImplementCommandEventFun
    inline void SetImplementCommandEventFun(IDispatch* value); //Sets the value of the ImplementCommandEventFun property

    /*
    Property ImplementCustomEvent

    property ImplementCustomEvent
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImplementCustomEvent() const; //Returns the value of ImplementCustomEvent
    inline void SetImplementCustomEvent(IDispatch* value); //Sets the value of the ImplementCustomEvent property

    /*
    Property ImplementMouseEventFun

    property ImplementMouseEventFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ImplementMouseEventFun() const; //Returns the value of ImplementMouseEventFun
    inline void SetImplementMouseEventFun(IDispatch* value); //Sets the value of the ImplementMouseEventFun property

    /*
    Property Iniset

    property Iniset
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Iniset() const; //Returns the value of Iniset
    inline void SetIniset(const QString& value); //Sets the value of the Iniset property

    /*
    Property InitUrl

    property InitUrl
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString InitUrl() const; //Returns the value of InitUrl
    inline void SetInitUrl(const QString& value); //Sets the value of the InitUrl property

    /*
    Property IsDrawCoord

    property IsDrawCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsDrawCoord() const; //Returns the value of IsDrawCoord
    inline void SetIsDrawCoord(bool value); //Sets the value of the IsDrawCoord property

    /*
    Property IsFirstRunPan

    property IsFirstRunPan
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsFirstRunPan() const; //Returns the value of IsFirstRunPan
    inline void SetIsFirstRunPan(bool value); //Sets the value of the IsFirstRunPan property

    /*
    Property IsRuningAtIE

    property IsRuningAtIE
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int IsRuningAtIE() const; //Returns the value of IsRuningAtIE
    inline void SetIsRuningAtIE(int value); //Sets the value of the IsRuningAtIE property

    /*
    Property LayerName

    property LayerName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LayerName() const; //Returns the value of LayerName
    inline void SetLayerName(const QString& value); //Sets the value of the LayerName property

    /*
    Property LineType

    property LineType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LineWidth

    property LineWidth
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LineWidth() const; //Returns the value of LineWidth
    inline void SetLineWidth(double value); //Sets the value of the LineWidth property

    /*
    Property PatternDefinition

    property PatternDefinition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString PatternDefinition() const; //Returns the value of PatternDefinition
    inline void SetPatternDefinition(const QString& value); //Sets the value of the PatternDefinition property

    /*
    Property ResPath

    property ResPath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ResPath() const; //Returns the value of ResPath
    inline void SetResPath(const QString& value); //Sets the value of the ResPath property

    /*
    Property ShowCommandWindow

    property ShowCommandWindow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowCommandWindow() const; //Returns the value of ShowCommandWindow
    inline void SetShowCommandWindow(bool value); //Sets the value of the ShowCommandWindow property

    /*
    Property ShowMenuBar

    property ShowMenuBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowMenuBar() const; //Returns the value of ShowMenuBar
    inline void SetShowMenuBar(bool value); //Sets the value of the ShowMenuBar property

    /*
    Property ShowModelBar

    property ShowModelBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowModelBar() const; //Returns the value of ShowModelBar
    inline void SetShowModelBar(bool value); //Sets the value of the ShowModelBar property

    /*
    Property ShowPropertyWindow

    property ShowPropertyWindow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowPropertyWindow() const; //Returns the value of ShowPropertyWindow
    inline void SetShowPropertyWindow(bool value); //Sets the value of the ShowPropertyWindow property

    /*
    Property ShowRulerWindow

    property ShowRulerWindow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowRulerWindow() const; //Returns the value of ShowRulerWindow
    inline void SetShowRulerWindow(bool value); //Sets the value of the ShowRulerWindow property

    /*
    Property ShowStatusBar

    property ShowStatusBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowStatusBar() const; //Returns the value of ShowStatusBar
    inline void SetShowStatusBar(bool value); //Sets the value of the ShowStatusBar property

    /*
    Property ShowToolBars

    property ShowToolBars
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowToolBars() const; //Returns the value of ShowToolBars
    inline void SetShowToolBars(bool value); //Sets the value of the ShowToolBars property

    /*
    Property SingleSelection

    property SingleSelection
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SingleSelection() const; //Returns the value of SingleSelection
    inline void SetSingleSelection(bool value); //Sets the value of the SingleSelection property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property Theme

    property Theme
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Theme() const; //Returns the value of Theme
    inline void SetTheme(int value); //Sets the value of the Theme property

    /*
    Property ToolBarFiles

    property ToolBarFiles
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ToolBarFiles() const; //Returns the value of ToolBarFiles
    inline void SetToolBarFiles(const QString& value); //Sets the value of the ToolBarFiles property

    /*
    Property UseArrowCursor

    property UseArrowCursor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UseArrowCursor() const; //Returns the value of UseArrowCursor
    inline void SetUseArrowCursor(bool value); //Sets the value of the UseArrowCursor property

    /*
    Property UserData

    property UserData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString UserData() const; //Returns the value of UserData
    inline void SetUserData(const QString& value); //Sets the value of the UserData property

    /*
    Property UserName

    property UserName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString UserName() const; //Returns the value of UserName
    inline void SetUserName(const QString& value); //Sets the value of the UserName property

    /*
    Property UserPhone

    property UserPhone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString UserPhone() const; //Returns the value of UserPhone
    inline void SetUserPhone(const QString& value); //Sets the value of the UserPhone property

    /*
    Property UserSoftwareName

    property UserSoftwareName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString UserSoftwareName() const; //Returns the value of UserSoftwareName
    inline void SetUserSoftwareName(const QString& value); //Sets the value of the UserSoftwareName property

    /*
    Property ViewColor

    property ViewColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QColor ViewColor() const; //Returns the value of ViewColor
    inline void SetViewColor(const QColor& value); //Sets the value of the ViewColor property

    /*
    Property Watermark

    property Watermark
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Watermark() const; //Returns the value of Watermark
    inline void SetWatermark(const QString& value); //Sets the value of the Watermark property

    /*
    Method AboutBox

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AboutBox();

    /*
    Method AddCurrentSelect

    method AddCurrentSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AddCurrentSelect(qlonglong lId, bool isShowGrid, bool isUpDisplay);

    /*
    Method AddDimStyle

    method AddDimStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddDimStyle(const QString& pszName, const QString& pszDoubleData, const QString& pszIntData, const QString& pszStringData, const QString& pszIdData);

    /*
    Method AddLayer

    method AddLayer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddLayer(const QString& pszName);

    /*
    Method AddLinetype

    method AddLinetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddLinetype(const QString& pszName, const QString& pszLineDefine);

    /*
    Method AddLinetypeEx

    method AddLinetypeEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddLinetypeEx(const QString& pszName, const QString& pszLineDefine, const QString& pszTextStyle);

    /*
    Method AddPatternDefinition

    method AddPatternDefinition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AddPatternDefinition(const QString& pszName, const QString& pszPatternDefinition);

    /*
    Method AddTextStyle1

    method AddTextStyle1
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddTextStyle1(const QString& pszName, const QString& pszFileName, const QString& pszBigFontFileName, double dXScale);

    /*
    Method AddTextStyle2

    method AddTextStyle2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AddTextStyle2(const QString& pszName, const QString& pszTrueTypeFontName, double dXScale);

    /*
    Method Cal

    Cal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Cal(const QString& pszFunName);

    /*
    Method Call

    method Call
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Call(const QString& pszFunName, const QString& pszFunParam);

    /*
    Method CallDoubleParam1

    method CallDoubleParam1
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallDoubleParam1(const QString& pszFunName, double dV);

    /*
    Method CallDoubleParam2

    method CallDoubleParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallDoubleParam2(const QString& pszFunName, double dV1, double dV2);

    /*
    Method CallDoubleParam3

    method CallDoubleParam3
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallDoubleParam3(const QString& pszFunName, double dV1, double dV2, double dV3);

    /*
    Method CallEx

    method CallEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallEx(const QString& pszFunName, IDispatch* pParam);

    /*
    Method CallLongParam1

    method CallLongParam1
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallLongParam1(const QString& pszFunName, int lV);

    /*
    Method CallLongParam2

    method CallLongParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallLongParam2(const QString& pszFunName, int lV1, int lV2);

    /*
    Method CallLongParam3

    method CallLongParam3
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallLongParam3(const QString& pszFunName, int lV1, int lV2, int lV3);

    /*
    Method CallPointParam1

    method CallPointParam1
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallPointParam1(const QString& pszFunName, double dX, double dY, double dZ);

    /*
    Method CallPointParam2

    method CallPointParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CallPointParam2(const QString& pszFunName, double dX1, double dY1, double dZ1, double dX2, double dY2, double dZ2);

    /*
    Method Clear

    method Clear
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Clear(qlonglong lId);

    /*
    Method ClearCurrentSelect

    method ClearCurrentSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearCurrentSelect();

    /*
    Method ClearDisplayBuffer

    method ClearDisplayBuffer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearDisplayBuffer();

    /*
    Method ClearPreviousInputPoint

    method ClearPreviousInputPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearPreviousInputPoint();

    /*
    Method ClearUndoData

    method ClearUndoData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearUndoData();

    /*
    Method CreateGroup

    method CreateGroup
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool CreateGroup(const QString& pszName, IDispatch* pAryId);

    /*
    Method CustomEventParam

    method CustomEventParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* CustomEventParam();

    /*
    Method CustomInsertBlock

    method CustomInsertBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int CustomInsertBlock(const QString& pszDwgFileName, const QString& pszBlockName);

    /*
    Method DeleteGroup

    method DeleteGroup
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteGroup(const QString& pszName);

    /*
    Method DeleteGroupEx

    DeleteGroupEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteGroupEx(qlonglong lEntId);

    /*
    Method DoCommand

    method DoCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DoCommand(int iCommandId);

    /*
    Method DocLongToViewCoord

    method DocLongToViewCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DocLongToViewCoord(double dLen);

    /*
    Method DocToScreenCoord

    method DocToScreenCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* DocToScreenCoord(double dX, double dY);

    /*
    Method DocToViewCoord

    method DocToViewCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* DocToViewCoord(double dX, double dY);

    /*
    Method Download

    Download
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Download(const QString& pszWebFile);

    /*
    Method DrawArc1

    method DrawArc1
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawArc1(double dCenterX, double dCenterY, double dRadius, double dStartAng, double dEndAng);

    /*
    Method DrawArc2

    method DrawArc2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawArc2(double dStartPointX, double dStartPointY, double dMidPointX, double dMidPointY, double dEndPointX, double dEndPointY);

    /*
    Method DrawArc3

    method DrawArc3
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge);

    /*
    Method DrawBlockReference

    method DrawBlockReference
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawBlockReference(double dPosX, double dPosY, const QString& pszBlkName, double dScale, double dAng);

    /*
    Method DrawCircle

    method DrawCircle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawCircle(double dCenterX, double dCenterY, double dRadius);

    /*
    Method DrawCustomEntity

    method DrawCustomEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* DrawCustomEntity(const QString& pszGuid, const QString& pszBlkRecName);

    /*
    Method DrawDimAligned

    method DrawDimAligned
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimAligned(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dTextPositionX, double dTextPositionY);

    /*
    Method DrawDimAngular

    method DrawDimAngular
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimAngular(double dAngleVertexX, double dAngleVertexY, double dFirstEndPointX, double dFirstEndPointY, double dSecondEndPointX, double dSecondEndPointY, double dTextPointX, double dTextPointY);

    /*
    Method DrawDimDiametric

    method DrawDimDiametric
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimDiametric(double dChordPointX, double dChordPointY, double dFarChordPointX, double dFarChordPointY, double dLeaderLength);

    /*
    Method DrawDimOrdinate

    method DrawDimOrdinate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimOrdinate(double dDefinitionPointX, double dDefinitionPointY, double dDeaderEndPointX, double dDeaderEndPointY, bool isUseXAxis);

    /*
    Method DrawDimRadial

    method DrawDimRadial
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimRadial(double dCenterX, double dCenterY, double dChordPointX, double dChordPointY, double dLeaderLength);

    /*
    Method DrawDimRotated

    method DrawDimRotated
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawDimRotated(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dDimLineLocationX, double dDimLineLocationY, double dRotationAngle);

    /*
    Method DrawEllipse

    method DrawEllipse
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio);

    /*
    Method DrawEllipseArc

    method DrawEllipseArc
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng);

    /*
    Method DrawEntity

    DrawEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawEntity(IDispatch* pIn);

    /*
    Method DrawEntityToJpg

    method DrawEntityToJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawEntityToJpg(qlonglong lId, const QString& sJpgFilePath, int iWidth, int iHeight, int lBkColor);

    /*
    Method DrawHatchFromPoint

    method DrawHatchFromPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawHatchFromPoint(double dX, double dY, double dPatternScale);

    /*
    Method DrawImage

    method DrawImage
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawImage(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFilePath);

    /*
    Method DrawImageMark

    method DrawImageMark
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawImageMark(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFileName, const QString& pszTwinkeImageFiles, bool isSaveData);

    /*
    Method DrawImageToBackground

    method DrawImageToBackground
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawImageToBackground(const QString& sFileName, int lLeftUpX, int lLeftUpY);

    /*
    Method DrawLine

    method DrawLine
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawLine(double dX1, double dY1, double dX2, double dY2);

    /*
    Method DrawMText

    method DrawMText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawMText(double dPosX, double dPosY, const QString& pszContents, double dHeight, double dWidth, double dRotation, int iAttachment);

    /*
    Method DrawPathToHatch

    method DrawPathToHatch
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawPathToHatch(double dPatternScale);

    /*
    Method DrawPathToHatch2

    method DrawPathToHatch2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawPathToHatch2(double dPatternScale, const QString& sPatternFile, const QString& sPatternName, double dAngel);

    /*
    Method DrawPathToPolyline

    method DrawPathToPolyline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawPathToPolyline();

    /*
    Method DrawPathToSpline

    method DrawPathToSpline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawPathToSpline();

    /*
    Method DrawPoint

    method DrawPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawPoint(double dX, double dY);

    /*
    Method DrawSolid

    method DrawSolid
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4);

    /*
    Method DrawText

    method DrawText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, int horizontalMode, int verticalMode);

    /*
    Method DrawToJpg

    method DrawToJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawToJpg(const QString& sJpgFilePath, double dLBx, double dLBy, double dRTx, double dRTy, int lWidth, int lHeight, int lBkColor);

    /*
    Method DrawVectorCircle

    method DrawVectorCircle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawVectorCircle(double dCenX, double dCenY, double dR, int lColor);

    /*
    Method DrawVectorLine

    method DrawVectorLine
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawVectorLine(double dX1, double dY1, double dX2, double dY2, int lColor);

    /*
    Method EnableGripPoint

    method EnableGripPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void EnableGripPoint(bool bEnable);

    /*
    Method EnableSingleSelection

    method EnableSingleSelection
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableSingleSelection(bool isEnable);

    /*
    Method EnableToolBarButton

    method EnableToolBarButton
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EnableToolBarButton(const QString& pButtonName, bool isEnable);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Erase(qlonglong lId);

    /*
    Method ExprotPdf

    method ExprotPdf
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ExprotPdf(const QString& sPdfFileName, double dPaperH, double dPaperW, const QString& pszTitle, bool isExportLayout);

    /*
    Method FindEntAtPoint

    FindEntAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* FindEntAtPoint(double dX, double dY, IDispatch* pFilter);

    /*
    Method GetAllGroupName

    method GetAllGroupName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetAllGroupName();

    /*
    Method GetAllLayoutName

    method GetAllLayoutName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetAllLayoutName();

    /*
    Method GetBulidVersion

    method GetBulidVersion
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBulidVersion(int& lMajor, int& lMinor);

    /*
    Method GetCurrentLayout

    method GetCurrentLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetCurrentLayout();

    /*
    Method GetCurrentPath

    GetCurrentPath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetCurrentPath();

    /*
    Method GetCursorCrossLong

    method GetCursorCrossLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetCursorCrossLong();

    /*
    Method GetCursorPickRect

    method GetCursorPickRect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetCursorPickRect();

    /*
    Method GetCustomEntity

    method GetCustomEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetCustomEntity(qlonglong lId);

    /*
    Method GetDatabase

    method GetDatabase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetDatabase();

    /*
    Method GetEntity

    method GetEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetEntity(const QString& pszPrompt);

    /*
    Method GetEntityDrawOrder

    method GetEntityDrawOrder
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetEntityDrawOrder(qlonglong lId);

    /*
    Method GetEntitysLastCmd

    method GetEntitysLastCmd
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetEntitysLastCmd();

    /*
    Method GetExePath

    method GetExePath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetExePath();

    /*
    Method GetFileName

    method GetFileName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetFileName();

    /*
    Method GetGroup

    method GetGroup
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetGroup(const QString& pszGroupName);

    /*
    Method GetImageSize

    GetImageSize
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetImageSize(const QString& pszImageFile);

    /*
    Method GetInputCursorPos

    method GetInputCursorPos
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetInputCursorPos();

    /*
    Method GetLastError

    method GetLastError
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetLastError();

    /*
    Method GetMTextContent

    method GetMTextContent
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetMTextContent(qlonglong lId);

    /*
    Method GetMcDbDatabaseBound

    method GetMcDbDatabaseBound
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetMcDbDatabaseBound(double& pLbx, double& pLby, double& pRtx, double& pRty);

    /*
    Method GetMxDrawXId

    method GetMxDrawXId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetMxDrawXId();

    /*
    Method GetOcxAppPath

    method GetOcxAppPath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetOcxAppPath();

    /*
    Method GetPoint

    method GetPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetPoint(bool bValidBasePoint, double dX, double dY, const QString& pszPrompt);

    /*
    Method GetPopupMenuEntity

    GetPopupMenuEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* GetPopupMenuEntity(IDispatch* pFilter);

    /*
    Method GetSysVarDouble

    method GetSysVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSysVarDouble(const QString& pszVarName, double& pRet);

    /*
    Method GetSysVarLong

    method GetSysVarLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSysVarLong(const QString& pszVarName, int& pRet);

    /*
    Method GetSysVarString

    method GetSysVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSysVarString(const QString& pszVarName, QString& pRet);

    /*
    Method GetTempPath

    GetTempPath
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetTempPath();

    /*
    Method GetViewCoord

    method GetViewCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetViewCoord(double& pLbx, double& pLby, double& pRtx, double& pRty);

    /*
    Method GetViewDocCoord

    method GetViewDocCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetViewDocCoord(double& pLbx, double& pLby, double& pRtx, double& pRty);

    /*
    Method GetWndHandle

    method GetWndHandle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetWndHandle();

    /*
    Method GotoURL

    GotoURL
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GotoURL(const QString& sUrl);

    /*
    Method HandleToObject

    HandleToObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* HandleToObject(const QString& handle);

    /*
    Method Hide

    method Hide
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Hide(qlonglong lId);

    /*
    Method HideMenuBarControl

    method HideMenuBarControl
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HideMenuBarControl(const QString& pszControlName, bool isHide);

    /*
    Method HideToolBarControl

    method HideToolBarControl
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HideToolBarControl(const QString& pszToolBarName, const QString& pszControlName, bool isHide, bool isAutoRecalcLayout);

    /*
    Method InsertBlock

    method InsertBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int InsertBlock(const QString& pszDwgFileName, const QString& pszBlockName);

    /*
    Method IsIniting

    method IsIniting
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsIniting();

    /*
    Method IsModelSpace

    method IsModelSpace
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsModelSpace();

    /*
    Method IsModifyed

    method IsModifyed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsModifyed();

    /*
    Method IsOk

    method IsOk
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsOk();

    /*
    Method IsRuningCommand

    method IsRuningCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsRuningCommand(QString& sCmdName);

    /*
    Method LoadLinetypeFromFile

    method LoadLinetypeFromFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong LoadLinetypeFromFile(const QString& pszLinetypeFile, const QString& pszsLinetypeName, bool isReLoad);

    /*
    Method LoadModule

    method LoadModule
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool LoadModule(const QString& sModuleName);

    /*
    Method LoadToolBar

    method LoadToolBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool LoadToolBar(const QString& pszToolBarFilePath, bool isShow);

    /*
    Method MakeCurrentOcx

    method MakeCurrentOcx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MakeCurrentOcx();

    /*
    Method NewComObject

    method NewComObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewComObject(const QString& pszClassName);

    /*
    Method NewEntity

    NewEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewEntity(const QString& pszClassName);

    /*
    Method NewFile

    method NewFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void NewFile();

    /*
    Method NewPoint

    method NewPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewPoint();

    /*
    Method NewResbuf

    method NewResbuf
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewResbuf();

    /*
    Method NewSelectionSet

    method NewSelectionSet
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewSelectionSet();

    /*
    Method NewUtility

    method NewUtility
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* NewUtility();

    /*
    Method ObjectIdToObject

    ObjectIdToObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ObjectIdToObject(qlonglong lId);

    /*
    Method OpenBackgroundFile

    method OpenBackgroundFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OpenBackgroundFile(const QString& sFileName, bool isGreyness, int lightColor, bool isZoomE, bool isUpDisplay);

    /*
    Method OpenDwgFile

    method OpenDwgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OpenDwgFile(const QString& pszDwgFile);

    /*
    Method OpenWebDwgFile

    method OpenWebDwgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OpenWebDwgFile(const QString& pszWebDwgFile);

    /*
    Method PathLineTo

    method PathLineTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathLineTo(double dX, double dY);

    /*
    Method PathLineToEx

    method PathLineToEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathLineToEx(double dX, double dY, double dStartWidth, double dEndWidth, double dBulge);

    /*
    Method PathMakeClosed

    method PathMakeClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathMakeClosed();

    /*
    Method PathMakeExclude

    method PathMakeExclude
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathMakeExclude(bool isExclude);

    /*
    Method PathMoveTo

    method PathMoveTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathMoveTo(double dX, double dY);

    /*
    Method PathMoveToEx

    method PathMoveToEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PathMoveToEx(double dX, double dY, double dStartWidth, double dEndWidth, double dBulge);

    /*
    Method PrintHtml

    method PrintHtml
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PrintHtml(bool isShowPrintDialog, bool isPrintLineWidth);

    /*
    Method Prompt

    Prompt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Prompt(const QString& pszPrompt);

    /*
    Method PutEntityInView

    method PutEntityInView
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PutEntityInView(qlonglong lId, double dPaddingPercentage);

    /*
    Method ReDraw

    method ReDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ReDraw();

    /*
    Method ReadBinStream

    method ReadBinStream
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ReadBinStream(const QVariant& varBinArray, const QString& sPassword, int lReadContent);

    /*
    Method Regen

    method Regen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Regen();

    /*
    Method RegistUserCustomCommand

    method RegistUserCustomCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool RegistUserCustomCommand(const QString& pszCommandName, int lId);

    /*
    Method RestoreCursor

    method RestoreCursor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool RestoreCursor();

    /*
    Method RestoreStatusBar

    method RestoreStatusBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RestoreStatusBar();

    /*
    Method ReturnViewColor

    method ReturnViewColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QColor ReturnViewColor();

    /*
    Method SaveBmpFile

    method SaveBmpFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveBmpFile(const QString& pszFile, int lWidth, int lHeight);

    /*
    Method SaveCursor

    method SaveCursor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SaveCursor();

    /*
    Method SaveDwgFile

    method SaveDwgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveDwgFile(const QString& pFileName);

    /*
    Method SaveDwgToURL

    method SaveDwgToURL
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveDwgToURL(const QString& pszServerUrl, const QString& pszServerProgramUrl, const QString& pszComponentName, const QString& pszPort);

    /*
    Method SaveDwgToURLEx

    method SaveDwgToURLEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveDwgToURLEx(const QString& sServerUrl, const QString& sServerProgramUrl, const QString& sCommponentName, int lPort, const QString& sFileTag);

    /*
    Method SaveJpgFile

    method SaveJpgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveJpgFile(const QString& pszFileName, int lWidth, int lHeight, int lBkColor);

    /*
    Method SavePartDwg

    method SavePartDwg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SavePartDwg(double dX1, double dY1, double dX2, double dY2, const QString& pszFileName);

    /*
    Method ScreenToDocCoord

    method ScreenToDocCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ScreenToDocCoord(double dX, double dY);

    /*
    Method SendStringToExecute

    method SendStringToExecute
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SendStringToExecute(const QString& pszCmd);

    /*
    Method SendStringToExecuteEx

    method SendStringToExecuteEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SendStringToExecuteEx(const QString& sCmdName, IDispatch* pParam);

    /*
    Method SendStringToExecuteFun

    method SendStringToExecuteFun
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SendStringToExecuteFun(const QString& sCmdName, IDispatch* pParam);

    /*
    Method SetCurrentLayout

    method SetCurrentLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetCurrentLayout(const QString& pszLayoutName);

    /*
    Method SetCursor

    method SetCursor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetCursor(const QString& pszCursorFileName);

    /*
    Method SetCursorCrossLong

    method SetCursorCrossLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetCursorCrossLong(int lLong);

    /*
    Method SetCursorPickRect

    method SetCursorPickRect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetCursorPickRect(int lWidth);

    /*
    Method SetEntityDrawOrder

    method SetEntityDrawOrder
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetEntityDrawOrder(qlonglong lId, int lOrder);

    /*
    Method SetEventRet

    SetEventRet
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetEventRet(int lRet);

    /*
    Method SetEventRetEx

    method SetEventRetEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetEventRetEx(IDispatch* pParam);

    /*
    Method SetEventRetString

    method SetEventRetString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetEventRetString(const QString& pszResult);

    /*
    Method SetInputCursorPos

    method SetInputCursorPos
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetInputCursorPos(double dX, double dY);

    /*
    Method SetIsModifyed

    method SetIsModifyed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetIsModifyed(bool IsModifyed);

    /*
    Method SetLayerBright

    method SetLayerBright
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double SetLayerBright(const QString& sLayerName, double dBright);

    /*
    Method SetStatusBarProgressMeter

    method SetStatusBarProgressMeter
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetStatusBarProgressMeter(int lMaxPos);

    /*
    Method SetStatusBarProgressMeterPos

    method SetStatusBarProgressMeterPos
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetStatusBarProgressMeterPos(int lPos);

    /*
    Method SetSysVarDouble

    method SetSysVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetSysVarDouble(const QString& pszVarName, double dVal);

    /*
    Method SetSysVarLong

    method SetSysVarLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetSysVarLong(const QString& pszVarName, int lVal);

    /*
    Method SetSysVarString

    method SetSysVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetSysVarString(const QString& pszVarName, const QString& pszVal);

    /*
    Method SetToolTipInitialTime

    method SetToolTipInitialTime
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetToolTipInitialTime(uint ulTime);

    /*
    Method SetToolTipPopTime

    method SetToolTipPopTime
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetToolTipPopTime(uint ulTime);

    /*
    Method SetTwinkeColor

    method SetTwinkeColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTwinkeColor(IDispatch* pColorResbuf);

    /*
    Method SetTwinkeTime

    method SetTwinkeTime
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTwinkeTime(int lTime);

    /*
    Method SetViewTwist

    method SetViewTwist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetViewTwist(double dAng);

    /*
    Method Show

    method Show
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Show(qlonglong lId);

    /*
    Method ShowToolBar

    method ShowToolBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShowToolBar(const QString& pszToolBarName, bool isShow);

    /*
    Method StopAllCommand

    method StopAllCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool StopAllCommand();

    /*
    Method StopAllTwinkeEnt

    method StopAllTwinkeEnt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool StopAllTwinkeEnt();

    /*
    Method StopTwinkeEnt

    method StopTwinkeEnt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool StopTwinkeEnt(qlonglong lId);

    /*
    Method TrackPopupMenu

    TrackPopupMenu
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool TrackPopupMenu(double dX, double dY, const QString& pszMenuFile);

    /*
    Method TwinkeEnt

    method TwinkeEnt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool TwinkeEnt(qlonglong lId);

    /*
    Method UnLoadModule

    method UnLoadModule
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UnLoadModule(const QString& sModuleName);

    /*
    Method UnLoadToolBar

    method UnLoadToolBar
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UnLoadToolBar(const QString& sToolBarName);

    /*
    Method UpdateDisplay

    method UpdateDisplay
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void UpdateDisplay();

    /*
    Method ViewLongToDocCoord

    method ViewLongToDocCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ViewLongToDocCoord(double dLong);

    /*
    Method ViewToDocCoord

    method ViewToDocCoord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* ViewToDocCoord(double dX, double dY);

    /*
    Method WriteBinStream

    method WriteBinStream
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool WriteBinStream(QVariant& pVarBinArray, const QString& sPassword, int iVersion);

    /*
    Method WriteJpgToURL

    method WriteJpgToURL
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool WriteJpgToURL(const QString& pszServerUrl, const QString& pszServerProgramUrl, const QString& pszComponentName, int lPort, const QString& pszFileTag, int iWidth, int iHeight, int bkColor);

    /*
    Method ZoomAll

    method ZoomAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ZoomAll();

    /*
    Method ZoomCenter

    method ZoomCenter
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ZoomCenter(double dCenterX, double dCenterY);

    /*
    Method ZoomPan

    method ZoomPan
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ZoomPan(double dOffsetX, double dOffsetY);

    /*
    Method ZoomScale

    method ZoomScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ZoomScale(double dScale);

    /*
    Method ZoomScale2

    method ZoomScale2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ZoomScale2(double dPtx, double dPty, double dScale);

    /*
    Method ZoomWindow

    method ZoomWindow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ZoomWindow(double dLBx, double dLBy, double dRTx, double dRTy);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawApplication : public QAxObject
{
public:
    MxDrawApplication(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{4ff8f5e1-8d85-45cc-b58e-be1cf4a5c3ec}"));
    }

    MxDrawApplication(IMxDrawApplication *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Call

    method Call
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* Call(const QString& pszFunName, const QString& pszFunParam);

    /*
    Method CallEx

    method CallEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* CallEx(const QString& pszFunName, MxDrawXLib::IMxDrawResbuf* pParam);

    /*
    Method DwgToJpg

    method DwgToJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName);

    /*
    Method DwgToJpg

    method DwgToJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName, int lWidth);

    /*
    Method DwgToJpg

    method DwgToJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName, int lWidth, int lHeight);

    /*
    Method GetLastError

    method GetLastError
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetLastError();

    /*
    Method Iniset

    method IniSet
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Iniset(const QString& pszVal);

    /*
    Method InitMxDrawOcx

    method InitMxDrawOcx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void InitMxDrawOcx(const QString& pszReserve1, const QString& pszReserve2, const QString& pszReserve3, const QString& pszReserve4, const QString& pszReserve5);

    /*
    Method IsRuningCommand

    method IsRuningCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsRuningCommand();

    /*
    Method ListArx

    method ListArx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* ListArx();

    /*
    Method LoadArx

    method LoadArx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void LoadArx(const QString& pArxPath);

    /*
    Method Regen

    method Regen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Regen();

    /*
    Method StopAllCommand

    method StopAllCommand
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void StopAllCommand();

    /*
    Method UnloadArx

    method UnloadArx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void UnloadArx(const QString& pArxPath);

    /*
    Method UpdateDisplay

    method UpdateDisplay
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void UpdateDisplay();

    /*
    Method WorkingDatabase

    method WorkingDatabase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* WorkingDatabase();

    /*
    Method ZoomAll

    method ZoomAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ZoomAll();

    /*
    Method ZoomPrevious

    method ZoomPrevious
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ZoomPrevious();

    /*
    Method ZoomWindow

    method ZoomWindow
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ZoomWindow(double dX1, double dY1, double dX2, double dY2);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDatabase : public QAxObject
{
public:
    MxDrawDatabase(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{96081fe3-a7c4-4ae7-9fcc-386528521048}"));
    }

    MxDrawDatabase(IMxDrawDatabase *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CurrentlyColorIndex

    property CurrentlyColorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor CurrentlyColorIndex() const; //Returns the value of CurrentlyColorIndex
    inline void SetCurrentlyColorIndex(MxDrawXLib::McColor value); //Sets the value of the CurrentlyColorIndex property

    /*
    Property CurrentlyDimstyleName

    property CurrentlyDimstyleName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString CurrentlyDimstyleName() const; //Returns the value of CurrentlyDimstyleName
    inline void SetCurrentlyDimstyleName(const QString& value); //Sets the value of the CurrentlyDimstyleName property

    /*
    Property CurrentlyLayerName

    property CurrentlyLayerName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString CurrentlyLayerName() const; //Returns the value of CurrentlyLayerName
    inline void SetCurrentlyLayerName(const QString& value); //Sets the value of the CurrentlyLayerName property

    /*
    Property CurrentlyLineTypeName

    property CurrentlyLineTypeName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString CurrentlyLineTypeName() const; //Returns the value of CurrentlyLineTypeName
    inline void SetCurrentlyLineTypeName(const QString& value); //Sets the value of the CurrentlyLineTypeName property

    /*
    Property CurrentlyLineTypeScale

    property CurrentlyLineTypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double CurrentlyLineTypeScale() const; //Returns the value of CurrentlyLineTypeScale
    inline void SetCurrentlyLineTypeScale(double value); //Sets the value of the CurrentlyLineTypeScale property

    /*
    Property CurrentlyTextStyle

    property CurrentlyTextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString CurrentlyTextStyle() const; //Returns the value of CurrentlyTextStyle
    inline void SetCurrentlyTextStyle(const QString& value); //Sets the value of the CurrentlyTextStyle property

    /*
    Property CurrentlyTrueColor

    property CurrentlyTrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* CurrentlyTrueColor() const; //Returns the value of CurrentlyTrueColor
    inline void SetCurrentlyTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the CurrentlyTrueColor property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Insbase

    property Insbase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Insbase() const; //Returns the value of Insbase
    inline void SetInsbase(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Insbase property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property LinetypeScale

    property LineTypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Method CurrentSpace

    method CurrentSpace
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* CurrentSpace();

    /*
    Method GetBlockTable

    method GetBlockTable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTable* GetBlockTable();

    /*
    Method GetDimStyleTable

    method  GetDimStyleTable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTable* GetDimStyleTable();

    /*
    Method GetLayerTable

    method GetLayerTable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTable* GetLayerTable();

    /*
    Method GetLayoutDictionary

    method GetLayoutDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetLayoutDictionary();

    /*
    Method GetLinetypeTable

    method GetLinetypeTable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTable* GetLinetypeTable();

    /*
    Method GetNamedObjectsDictionary

    method GetNamedObjectsDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetNamedObjectsDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetTextStyleTable

    method GetTextStyleTable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTable* GetTextStyleTable();

    /*
    Method GetUCS

    method GetUCS
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawUcs* GetUCS();

    /*
    Method HandleToObject

    method HandleToObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* HandleToObject(const QString& handle);

    /*
    Method HandleToObjectId

    method HandleToObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong HandleToObjectId(const QString& pszHandle);

    /*
    Method Insert

    method Insert
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong Insert(MxDrawXLib::IMxDrawDatabase* pDb, const QString& pszBlockName);

    /*
    Method ObjectIdToHandle

    method ObjectIdToHandle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectIdToHandle(qlonglong lId);

    /*
    Method ObjectIdToObject

    method ObjectIdToObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* ObjectIdToObject(qlonglong lId);

    /*
    Method ReadDwgFile

    method ReadDwgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ReadDwgFile(const QString& pszFullFileName, const QString& password);

    /*
    Method SaveAs

    method SaveAs,iSaveType 
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveAs(const QString& pszFullFileName, int SaveAsType);

    /*
    Method SaveAs

    method SaveAs,iSaveType 
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveAs(const QString& pszFullFileName, int SaveAsType, const QVariant& vSecurityParams);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetVariable

    method SetVariable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetVariable(const QString& pszName, MxDrawXLib::IMxDrawResbuf* value);

    /*
    Method Wblock

    method Wblock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Wblock(MxDrawXLib::IMxDrawResbuf* aryId, MxDrawXLib::IMxDrawPoint* basePoint, MxDrawXLib::IMxDrawIdMapping** ppIdMapping);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawMcRxObject : public QAxObject
{
public:
    MxDrawMcRxObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{26cb7c81-5dae-4a7e-a1f4-b1bbf0c18e97}"));
    }

    MxDrawMcRxObject(IMxDrawMcRxObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawMcDbObject : public QAxObject
{
public:
    MxDrawMcDbObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{dca8cc56-5fb6-4f4d-a45d-9bd4772d9fcc}"));
    }

    MxDrawMcDbObject(IMxDrawMcDbObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawSymbolTableRecord : public QAxObject
{
public:
    MxDrawSymbolTableRecord(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{89f437a1-ed1c-4376-a9fb-4ee1bbafa019}"));
    }

    MxDrawSymbolTableRecord(IMxDrawSymbolTableRecord *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawBlockTableRecord : public QAxObject
{
public:
    MxDrawBlockTableRecord(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{a3d73a0e-1b38-48c2-bbaa-3057529f5ded}"));
    }

    MxDrawBlockTableRecord(IMxDrawBlockTableRecord *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Origin

    property Origin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Origin() const; //Returns the value of Origin
    inline void SetOrigin(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Origin property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AddArc

    method AddArc
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawArc* AddArc(double dCenX, double dCenY, double dRadius, double dStartAng, double dEndAng);

    /*
    Method AddArc2

    method AddArc2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawArc* AddArc2(double dStartPointX, double dStartPointY, double dX, double dY, double dEndPointX, double dEndPointY);

    /*
    Method AddArc3

    method AddArc3
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawArc* AddArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge);

    /*
    Method AddAttributeDef

    method AddAttributeDef
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawAttributeDefinition* AddAttributeDef(double dHeight, MxDrawXLib::McAttributeMode mode, const QString& pszPrompt, double dInsertionPointX, double dInsertionPointY, const QString& pszTag, const QString& pszValue);

    /*
    Method AddCircle

    method AddCircle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCircle* AddCircle(double dCenX, double dCenY, double dRadius);

    /*
    Method AddCloneEntity

    method AddCloneEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* AddCloneEntity(qlonglong lId);

    /*
    Method AddCustomObject

    method AddCustomObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* AddCustomObject(const QString& pszClassName);

    /*
    Method AddDimAligned

    method AddDimAligned
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimAligned* AddDimAligned(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dTextPositionX, double dTextPositionY);

    /*
    Method AddDimAngular

    method AddDimAngular
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimAngular* AddDimAngular(double dAngleVertexX, double dAngleVertexY, double dFirstEndPointX, double dFirstEndPointY, double dSecondEndPointX, double dSecondEndPointY, double dTextPointX, double dTextPointY);

    /*
    Method AddDimDiametric

    method AddDimDiametric
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimDiametric* AddDimDiametric(double dChordPointX, double dChordPointY, double dFarChordPointX, double dFarChordPointY, double dLeaderLength);

    /*
    Method AddDimOrdinate

    method AddDimOrdinate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimOrdinate* AddDimOrdinate(double dDefinitionPointX, double dDefinitionPointY, double dLeaderEndPointX, double dLeaderEndPointY, bool useXAxis);

    /*
    Method AddDimRadial

    method AddDimRadial
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimRadial* AddDimRadial(double dCenterX, double dCenterY, double dChordPointX, double dChordPointY, double LeaderLength);

    /*
    Method AddDimRotated

    method AddDimRotated
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimRotated* AddDimRotated(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dDimLineLocationX, double dDimLineLocationY, double dRotationAngle);

    /*
    Method AddEllipse

    method AddEllipse
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEllipse* AddEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio);

    /*
    Method AddEllipseArc

    method AddEllipseArc
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEllipse* AddEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng);

    /*
    Method AddEntity

    method AddEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* AddEntity(const QString& pszClassName);

    /*
    Method AddEntityEx

    method AddEntityEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* AddEntityEx(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method AddHatch

    method AddHatch
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawHatch* AddHatch(int lPatternType, const QString& pszPatternName);

    /*
    Method AddImage

    method AddImage
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawRasterImage* AddImage(double dOriginX, double dOriginY, double dUCornerX, double dUCornerY, double dVOnPlaneX, double dVOnPlaneY, qlonglong ImageDefId);

    /*
    Method AddImage2

    method AddImage2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawRasterImage* AddImage2(double dOriginX, double dOriginY, double dScale, qlonglong ImageDefId);

    /*
    Method AddImageMark

    method AddImageMark
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawImageMark* AddImageMark(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFileName, const QString& pszTwinkeImageFiles, bool isSaveData);

    /*
    Method AddLine

    method AddLine
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLine* AddLine(double dX1, double dY1, double dX2, double dY2);

    /*
    Method AddLines

    method AddLines
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPolyline* AddLines(MxDrawXLib::IMxDrawPoints* points);

    /*
    Method AddMText

    method AddMText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMText* AddMText(double dInsertionPointX, double dInsertionPointY, double dHeight, const QString& pszText);

    /*
    Method AddPoint

    method AddPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPointEntity* AddPoint(double dX1, double dY1);

    /*
    Method AddPolyline

    method AddPolyline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPolyline* AddPolyline(MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* sWdiths, MxDrawXLib::IMxDrawResbuf* eWidths, MxDrawXLib::IMxDrawResbuf* bulges);

    /*
    Method AddPolyline2

    method AddPolyline2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPolyline* AddPolyline2(MxDrawXLib::IMxDrawPoints* points, double dWidth);

    /*
    Method AddRay

    method AddRay
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawRay* AddRay(double dX1, double dY1, double dX2, double dY2);

    /*
    Method AddSolid

    method AddSolid
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawSolid* AddSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4);

    /*
    Method AddSpline

    method AddSpline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawSpline* AddSpline(MxDrawXLib::IMxDrawPoints* points, double dStartTangentX, double dStartTangentY, double dEndTangentX, double dEndTangentY);

    /*
    Method AddText

    method AddText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawText* AddText(double dPosX, double dPosY, const QString& pszText, double dHeight);

    /*
    Method AddText

    method AddText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawText* AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation);

    /*
    Method AddText

    method AddText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawText* AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode);

    /*
    Method AddText

    method AddText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawText* AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode, MxDrawXLib::McVerticalAlignment verticalMode);

    /*
    Method AddTolerance

    method AddTolerance
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTolerance* AddTolerance(const QString& pszText, double dX, double dY, double dDirectionX, double dDirectionY);

    /*
    Method AddTrace

    method AddTrace
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTrace* AddTrace(MxDrawXLib::IMxDrawPoints* points);

    /*
    Method AddXline

    method AddXline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawXline* AddXline(double dX1, double dY1, double dX2, double dY2);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetIsLayout

    method GetIsLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetIsLayout();

    /*
    Method GetLayout

    method GetLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayout* GetLayout();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method InsertBlock

    method InsertBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockReference* InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName);

    /*
    Method InsertBlock

    method InsertBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockReference* InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale);

    /*
    Method InsertBlock

    method InsertBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockReference* InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale, double dAng);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecordIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawEntity : public QAxObject
{
public:
    MxDrawEntity(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{bde4efdf-773d-4866-b58d-b560c0acee33}"));
    }

    MxDrawEntity(IMxDrawEntity *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawLine : public QAxObject
{
public:
    MxDrawLine(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{5df5f7a7-425b-47f3-865c-7eb8df49afe6}"));
    }

    MxDrawLine(IMxDrawLine *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property EndPoint

    property EndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* EndPoint() const; //Returns the value of EndPoint
    inline void SetEndPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the EndPoint property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property StartPoint

    property StartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* StartPoint() const; //Returns the value of StartPoint
    inline void SetStartPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the StartPoint property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDictionary : public QAxObject
{
public:
    MxDrawDictionary(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{59c8e6db-fdbd-4394-a331-2a0f53f5648e}"));
    }

    MxDrawDictionary(IMxDrawDictionary *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AddObject

    method AddObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* AddObject(const QString& pszKeyWord, const QString& pszClassName);

    /*
    Method AddXRecord

    method AddXRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawXRecord* AddXRecord(const QString& pszKeyWord);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionaryIterator* NewIterator();

    /*
    Method Remove

    method Remove
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Remove(const QString& pszName);

    /*
    Method Rename

    method Rename
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rename(const QString& pszOldName, const QString& pszNewName);

    /*
    Method Replace

    method Replace
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Replace(const QString& pszName, MxDrawXLib::IMxDrawMcDbObject* pObject);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawMcCmColor : public QAxObject
{
public:
    MxDrawMcCmColor(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{d1b52c26-101f-4668-b42b-c54be81c38b1}"));
    }

    MxDrawMcCmColor(IMxDrawMcCmColor *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ColorMethod

    property ColorMethod
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColorMethod ColorMethod() const; //Returns the value of ColorMethod
    inline void SetColorMethod(MxDrawXLib::McColorMethod value); //Sets the value of the ColorMethod property

    /*
    Property EntityColor

    property EntityColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int EntityColor() const; //Returns the value of EntityColor
    inline void SetEntityColor(int value); //Sets the value of the EntityColor property

    /*
    Property colorIndex

    property ColorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(int value); //Sets the value of the colorIndex property

    /*
    Method GetBlue

    method GetBlue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetBlue();

    /*
    Method GetColorName

    method GetColorName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetColorName();

    /*
    Method GetGreen

    method GetGreen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetGreen();

    /*
    Method GetRed

    method GetRed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetRed();

    /*
    Method SetRGB

    method SetRGB
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetRGB(int lRed, int lGreen, int lBlue);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawCurve : public QAxObject
{
public:
    MxDrawCurve(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{d793e883-d562-4058-b2ee-a60f9ae4ee36}"));
    }

    MxDrawCurve(IMxDrawCurve *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawPoint : public QAxObject
{
public:
    MxDrawPoint(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{9d13d2da-8de9-45bc-a5f2-4a38bc41ad6e}"));
    }

    MxDrawPoint(IMxDrawPoint *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property x

    property x
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double x() const; //Returns the value of x
    inline void setX(double value); //Sets the value of the x property

    /*
    Property y

    property y
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double y() const; //Returns the value of y
    inline void setY(double value); //Sets the value of the y property

    /*
    Property z

    property z
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double z() const; //Returns the value of z
    inline void setZ(double value); //Sets the value of the z property

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Add(MxDrawXLib::IMxDrawVector3d* pVec);

    /*
    Method DistanceTo

    method DistanceTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DistanceTo(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method IsEqualTo

    method IsEqualTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsEqualTo(MxDrawXLib::IMxDrawPoint* pPoint, double dTol);

    /*
    Method Sum

    method Sum
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Sum(MxDrawXLib::IMxDrawVector3d* pVec);

    /*
    Method SumVector

    method SumVector
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* SumVector(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* pMat);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawPoints : public QAxObject
{
public:
    MxDrawPoints(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{a425173e-c42d-476e-8c1a-1e5b629abbf5}"));
    }

    MxDrawPoints(IMxDrawPoints *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    property Count
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Add(double dX, double dY, double dZ);

    /*
    Method Add2

    method Add2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Add2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method Item

    method Item
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Item(int lItem);

    /*
    Method Remove

    method Remove
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Remove(int lItem);

    /*
    Method RemoveAll

    method RemoveAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RemoveAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawPolyline : public QAxObject
{
public:
    MxDrawPolyline(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{7d649a44-f5b9-41e1-85c4-637e5aafa915}"));
    }

    MxDrawPolyline(IMxDrawPolyline *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ConstantWidth

    property ConstantWidth
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ConstantWidth() const; //Returns the value of ConstantWidth
    inline void SetConstantWidth(double value); //Sets the value of the ConstantWidth property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HasPlinegen

    property HasPlinegen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasPlinegen() const; //Returns the value of HasPlinegen
    inline void SetHasPlinegen(bool value); //Sets the value of the HasPlinegen property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsClosedStatus

    property IsClosedStatus
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosedStatus() const; //Returns the value of IsClosedStatus
    inline void SetIsClosedStatus(bool value); //Sets the value of the IsClosedStatus property

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property NumVerts

    property NumVerts
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int NumVerts() const; //Returns the value of NumVerts

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property Thickness

    property Thickness
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Thickness() const; //Returns the value of Thickness
    inline void SetThickness(double value); //Sets the value of the Thickness property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AddVertexAt

    method AddVertexAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddVertexAt(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method AddVertexAt

    method AddVertexAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge);

    /*
    Method AddVertexAt

    method AddVertexAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge, double startWidth);

    /*
    Method AddVertexAt

    method AddVertexAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge, double startWidth, double endWidth);

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetBulgeAt

    method GetBulgeAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetBulgeAt(int index);

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEWidthsAt

    method GetEWidthsAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEWidthsAt(int index);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAt

    method GetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAt(int index);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSWidthsAt

    method GetSWidthsAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetSWidthsAt(int index);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetWidthsAt

    method GetWidthsAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetWidthsAt(int index, double& pStartWidth, double& pEndWidth);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method PointInPolygon

    method  PointInPolygon
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PointInPolygon(double dX, double dY);

    /*
    Method RemoveVertexAt

    method RemoveVertexAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RemoveVertexAt(int index);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetBulgeAt

    method SetBulgeAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetBulgeAt(int index, double bulge);

    /*
    Method SetPointAt

    method SetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetWidthsAt

    method SetWidthsAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetWidthsAt(int index, double dStartWidth, double dEndWidth);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawArc : public QAxObject
{
public:
    MxDrawArc(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{5b5e0220-6046-47db-beae-713d987737ba}"));
    }

    MxDrawArc(IMxDrawArc *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Center

    property Center
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Center() const; //Returns the value of Center
    inline void SetCenter(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Center property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property EndAngle

    property EndAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double EndAngle() const; //Returns the value of EndAngle
    inline void SetEndAngle(double value); //Sets the value of the EndAngle property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Radius

    property Radius
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Radius() const; //Returns the value of Radius
    inline void SetRadius(double value); //Sets the value of the Radius property

    /*
    Property StartAngle

    property StartAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double StartAngle() const; //Returns the value of StartAngle
    inline void SetStartAngle(double value); //Sets the value of the StartAngle property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawText : public QAxObject
{
public:
    MxDrawText(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{47251d1f-6998-47ec-8958-25f8b006d9d8}"));
    }

    MxDrawText(IMxDrawText *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AlignmentPoint

    property AlignmentPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* AlignmentPoint() const; //Returns the value of AlignmentPoint
    inline void SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the AlignmentPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Height

    property Height
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsMirroredInX

    property IsMirroredInX
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInX() const; //Returns the value of IsMirroredInX
    inline void SetIsMirroredInX(bool value); //Sets the value of the IsMirroredInX property

    /*
    Property IsMirroredInY

    property IsMirroredInY
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInY() const; //Returns the value of IsMirroredInY
    inline void SetIsMirroredInY(bool value); //Sets the value of the IsMirroredInY property

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Oblique

    property Oblique
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Oblique() const; //Returns the value of Oblique
    inline void SetOblique(double value); //Sets the value of the Oblique property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property Position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property TextString

    property TextString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextString() const; //Returns the value of TextString
    inline void SetTextString(const QString& value); //Sets the value of the TextString property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property WidthFactor

    property WidthFactor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double WidthFactor() const; //Returns the value of WidthFactor
    inline void SetWidthFactor(double value); //Sets the value of the WidthFactor property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Property horizontalMode

    property HorizontalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McHorizontalAlignment horizontalMode() const; //Returns the value of horizontalMode
    inline void setHorizontalMode(MxDrawXLib::McHorizontalAlignment value); //Sets the value of the horizontalMode property

    /*
    Property verticalMode

    property VerticalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McVerticalAlignment verticalMode() const; //Returns the value of verticalMode
    inline void setVerticalMode(MxDrawXLib::McVerticalAlignment value); //Sets the value of the verticalMode property

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method ToCurves

    method ToCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* ToCurves();

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawAttributeDefinition : public QAxObject
{
public:
    MxDrawAttributeDefinition(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{407d3e16-cbd9-40dc-a5d1-bfa4d735fe43}"));
    }

    MxDrawAttributeDefinition(IMxDrawAttributeDefinition *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AlignmentPoint

    property AlignmentPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* AlignmentPoint() const; //Returns the value of AlignmentPoint
    inline void SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the AlignmentPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property FieldLength

    property FieldLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int FieldLength() const; //Returns the value of FieldLength
    inline void SetFieldLength(int value); //Sets the value of the FieldLength property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Height

    property Height
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsConstant

    property IsConstant
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsConstant() const; //Returns the value of IsConstant
    inline void SetIsConstant(bool value); //Sets the value of the IsConstant property

    /*
    Property IsInvisible

    property IsInvisible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsInvisible() const; //Returns the value of IsInvisible
    inline void SetIsInvisible(bool value); //Sets the value of the IsInvisible property

    /*
    Property IsMirroredInX

    property IsMirroredInX
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInX() const; //Returns the value of IsMirroredInX
    inline void SetIsMirroredInX(bool value); //Sets the value of the IsMirroredInX property

    /*
    Property IsMirroredInY

    property IsMirroredInY
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInY() const; //Returns the value of IsMirroredInY
    inline void SetIsMirroredInY(bool value); //Sets the value of the IsMirroredInY property

    /*
    Property IsPreset

    property IsPreset
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsPreset() const; //Returns the value of IsPreset
    inline void SetIsPreset(bool value); //Sets the value of the IsPreset property

    /*
    Property IsVerifiable

    property IsVerifiable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsVerifiable() const; //Returns the value of IsVerifiable
    inline void SetIsVerifiable(bool value); //Sets the value of the IsVerifiable property

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Oblique

    property Oblique
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Oblique() const; //Returns the value of Oblique
    inline void SetOblique(double value); //Sets the value of the Oblique property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property Position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property Prompt

    property Prompt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Prompt() const; //Returns the value of Prompt
    inline void SetPrompt(const QString& value); //Sets the value of the Prompt property

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property Tag

    property Tag
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextString

    property TextString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextString() const; //Returns the value of TextString
    inline void SetTextString(const QString& value); //Sets the value of the TextString property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property WidthFactor

    property WidthFactor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double WidthFactor() const; //Returns the value of WidthFactor
    inline void SetWidthFactor(double value); //Sets the value of the WidthFactor property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Property horizontalMode

    property HorizontalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McHorizontalAlignment horizontalMode() const; //Returns the value of horizontalMode
    inline void setHorizontalMode(MxDrawXLib::McHorizontalAlignment value); //Sets the value of the horizontalMode property

    /*
    Property verticalMode

    property VerticalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McVerticalAlignment verticalMode() const; //Returns the value of verticalMode
    inline void setVerticalMode(MxDrawXLib::McVerticalAlignment value); //Sets the value of the verticalMode property

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method ToCurves

    method ToCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* ToCurves();

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawAttribute : public QAxObject
{
public:
    MxDrawAttribute(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{ea949465-23e8-4f59-92bc-bfdd3939ab96}"));
    }

    MxDrawAttribute(IMxDrawAttribute *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AlignmentPoint

    property AlignmentPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* AlignmentPoint() const; //Returns the value of AlignmentPoint
    inline void SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the AlignmentPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property FieldLength

    property FieldLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int FieldLength() const; //Returns the value of FieldLength
    inline void SetFieldLength(int value); //Sets the value of the FieldLength property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Height

    property Height
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsConstant

    property IsConstant
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsConstant() const; //Returns the value of IsConstant

    /*
    Property IsInvisible

    property IsInvisible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsInvisible() const; //Returns the value of IsInvisible
    inline void SetIsInvisible(bool value); //Sets the value of the IsInvisible property

    /*
    Property IsMirroredInX

    property IsMirroredInX
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInX() const; //Returns the value of IsMirroredInX
    inline void SetIsMirroredInX(bool value); //Sets the value of the IsMirroredInX property

    /*
    Property IsMirroredInY

    property IsMirroredInY
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsMirroredInY() const; //Returns the value of IsMirroredInY
    inline void SetIsMirroredInY(bool value); //Sets the value of the IsMirroredInY property

    /*
    Property IsPreset

    property IsPreset
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsPreset() const; //Returns the value of IsPreset

    /*
    Property IsVerifiable

    property IsVerifiable
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsVerifiable() const; //Returns the value of IsVerifiable

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Oblique

    property Oblique
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Oblique() const; //Returns the value of Oblique
    inline void SetOblique(double value); //Sets the value of the Oblique property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property Position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property Tag

    property Tag
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Tag() const; //Returns the value of Tag
    inline void SetTag(const QString& value); //Sets the value of the Tag property

    /*
    Property TextString

    property TextString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextString() const; //Returns the value of TextString
    inline void SetTextString(const QString& value); //Sets the value of the TextString property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property WidthFactor

    property WidthFactor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double WidthFactor() const; //Returns the value of WidthFactor
    inline void SetWidthFactor(double value); //Sets the value of the WidthFactor property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Property horizontalMode

    property HorizontalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McHorizontalAlignment horizontalMode() const; //Returns the value of horizontalMode
    inline void setHorizontalMode(MxDrawXLib::McHorizontalAlignment value); //Sets the value of the horizontalMode property

    /*
    Property verticalMode

    property VerticalMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McVerticalAlignment verticalMode() const; //Returns the value of verticalMode
    inline void setVerticalMode(MxDrawXLib::McVerticalAlignment value); //Sets the value of the verticalMode property

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method ToCurves

    method ToCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* ToCurves();

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawCircle : public QAxObject
{
public:
    MxDrawCircle(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{e6092599-7c15-4db3-9df8-07b65a1bc967}"));
    }

    MxDrawCircle(IMxDrawCircle *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Center

    property Center
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Center() const; //Returns the value of Center
    inline void SetCenter(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Center property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Radius

    property Radius
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Radius() const; //Returns the value of Radius
    inline void SetRadius(double value); //Sets the value of the Radius property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDimension : public QAxObject
{
public:
    MxDrawDimension(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{c9609a62-5c2a-49f8-8e55-0290078e998f}"));
    }

    MxDrawDimension(IMxDrawDimension *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDimAligned : public QAxObject
{
public:
    MxDrawDimAligned(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{9ed8c003-d65b-44f9-9035-95be35c2eb99}"));
    }

    MxDrawDimAligned(IMxDrawDimAligned *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimLinePoint

    property DimLinePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimLinePoint() const; //Returns the value of DimLinePoint
    inline void SetDimLinePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimLinePoint property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Oblique

    property Oblique
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Oblique() const; //Returns the value of Oblique
    inline void SetOblique(double value); //Sets the value of the Oblique property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property XLine1Point

    property XLine1Point
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine1Point() const; //Returns the value of XLine1Point
    inline void SetXLine1Point(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine1Point property

    /*
    Property XLine2Point

    property XLine2Point
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine2Point() const; //Returns the value of XLine2Point
    inline void SetXLine2Point(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine2Point property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDimAngular : public QAxObject
{
public:
    MxDrawDimAngular(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{9634ac06-557c-4d78-8654-f15e37d7dce4}"));
    }

    MxDrawDimAngular(IMxDrawDimAngular *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ArcPoint

    property ArcPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* ArcPoint() const; //Returns the value of ArcPoint
    inline void SetArcPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the ArcPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property ExtArcOn

    property ExtArcOn
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ExtArcOn() const; //Returns the value of ExtArcOn
    inline void SetExtArcOn(bool value); //Sets the value of the ExtArcOn property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property XLine1End

    property XLine1End
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine1End() const; //Returns the value of XLine1End
    inline void SetXLine1End(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine1End property

    /*
    Property XLine1Start

    property XLine1Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine1Start() const; //Returns the value of XLine1Start
    inline void SetXLine1Start(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine1Start property

    /*
    Property XLine2End

    property XLine2End
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine2End() const; //Returns the value of XLine2End
    inline void SetXLine2End(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine2End property

    /*
    Property XLine2Start

    property XLine2Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine2Start() const; //Returns the value of XLine2Start
    inline void SetXLine2Start(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine2Start property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDimDiametric : public QAxObject
{
public:
    MxDrawDimDiametric(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{1c88db13-f9ab-4c33-8011-ee573dca7d23}"));
    }

    MxDrawDimDiametric(IMxDrawDimDiametric *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ChordPoint

    property ChordPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* ChordPoint() const; //Returns the value of ChordPoint
    inline void SetChordPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the ChordPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property ExtArcEndAngle

    property ExtArcEndAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ExtArcEndAngle() const; //Returns the value of ExtArcEndAngle
    inline void SetExtArcEndAngle(double value); //Sets the value of the ExtArcEndAngle property

    /*
    Property ExtArcStartAngle

    property ExtArcStartAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ExtArcStartAngle() const; //Returns the value of ExtArcStartAngle
    inline void SetExtArcStartAngle(double value); //Sets the value of the ExtArcStartAngle property

    /*
    Property FarChordPoint

    property FarChordPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* FarChordPoint() const; //Returns the value of FarChordPoint
    inline void SetFarChordPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the FarChordPoint property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LeaderLength

    property LeaderLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LeaderLength() const; //Returns the value of LeaderLength
    inline void SetLeaderLength(double value); //Sets the value of the LeaderLength property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDimRotated : public QAxObject
{
public:
    MxDrawDimRotated(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{7db66488-abe1-4088-8a84-0df168962ccf}"));
    }

    MxDrawDimRotated(IMxDrawDimRotated *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimLinePoint

    property DimLinePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimLinePoint() const; //Returns the value of DimLinePoint
    inline void SetDimLinePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimLinePoint property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Oblique

    property Oblique
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Oblique() const; //Returns the value of Oblique
    inline void SetOblique(double value); //Sets the value of the Oblique property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property XLine1Point

    property XLine1Point
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine1Point() const; //Returns the value of XLine1Point
    inline void SetXLine1Point(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine1Point property

    /*
    Property XLine2Point

    property XLine2Point
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* XLine2Point() const; //Returns the value of XLine2Point
    inline void SetXLine2Point(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the XLine2Point property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDimOrdinate : public QAxObject
{
public:
    MxDrawDimOrdinate(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{cb1e0c20-aa9d-4aca-ba49-40e332954604}"));
    }

    MxDrawDimOrdinate(IMxDrawDimOrdinate *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DefiningPoint

    property DefiningPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DefiningPoint() const; //Returns the value of DefiningPoint
    inline void SetDefiningPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DefiningPoint property

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsUsingXAxis

    property IsUsingXAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsUsingXAxis() const; //Returns the value of IsUsingXAxis
    inline void SetIsUsingXAxis(bool value); //Sets the value of the IsUsingXAxis property

    /*
    Property IsUsingYAxis

    property IsUsingYAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsUsingYAxis() const; //Returns the value of IsUsingYAxis
    inline void SetIsUsingYAxis(bool value); //Sets the value of the IsUsingYAxis property

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LeaderEndPoint

    property LeaderEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* LeaderEndPoint() const; //Returns the value of LeaderEndPoint
    inline void SetLeaderEndPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the LeaderEndPoint property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property Origin

    property Origin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Origin() const; //Returns the value of Origin
    inline void SetOrigin(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Origin property

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDimRadial : public QAxObject
{
public:
    MxDrawDimRadial(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{7c45b686-09eb-4e30-8f30-8daa61be7272}"));
    }

    MxDrawDimRadial(IMxDrawDimRadial *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Center

    property Center
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Center() const; //Returns the value of Center
    inline void SetCenter(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Center property

    /*
    Property ChordPoint

    property ChordPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* ChordPoint() const; //Returns the value of ChordPoint
    inline void SetChordPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the ChordPoint property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DimBlockId

    property DimBlockId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DimBlockId() const; //Returns the value of DimBlockId
    inline void SetDimBlockId(qlonglong value); //Sets the value of the DimBlockId property

    /*
    Property DimBlockPosition

    property DimBlockPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DimBlockPosition() const; //Returns the value of DimBlockPosition
    inline void SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DimBlockPosition property

    /*
    Property DimBlockRotation

    property DimBlockRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockRotation() const; //Returns the value of DimBlockRotation
    inline void SetDimBlockRotation(double value); //Sets the value of the DimBlockRotation property

    /*
    Property DimBlockScale

    property DimBlockScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DimBlockScale() const; //Returns the value of DimBlockScale
    inline void SetDimBlockScale(double value); //Sets the value of the DimBlockScale property

    /*
    Property DimensionStyle

    property DimensionStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionStyle() const; //Returns the value of DimensionStyle
    inline void SetDimensionStyle(const QString& value); //Sets the value of the DimensionStyle property

    /*
    Property DimensionText

    property DimensionText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimensionText() const; //Returns the value of DimensionText
    inline void SetDimensionText(const QString& value); //Sets the value of the DimensionText property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    property Elevation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property ExtArcEndAngle

    property ExtArcEndAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ExtArcEndAngle() const; //Returns the value of ExtArcEndAngle
    inline void SetExtArcEndAngle(double value); //Sets the value of the ExtArcEndAngle property

    /*
    Property ExtArcStartAngle

    property ExtArcStartAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ExtArcStartAngle() const; //Returns the value of ExtArcStartAngle
    inline void SetExtArcStartAngle(double value); //Sets the value of the ExtArcStartAngle property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HorizontalRotation

    property HorizontalRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double HorizontalRotation() const; //Returns the value of HorizontalRotation
    inline void SetHorizontalRotation(double value); //Sets the value of the HorizontalRotation property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LeaderLength

    property LeaderLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LeaderLength() const; //Returns the value of LeaderLength
    inline void SetLeaderLength(double value); //Sets the value of the LeaderLength property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextAttachment

    property TextAttachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint TextAttachment() const; //Returns the value of TextAttachment
    inline void SetTextAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the TextAttachment property

    /*
    Property TextPosition

    property TextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* TextPosition() const; //Returns the value of TextPosition
    inline void SetTextPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the TextPosition property

    /*
    Property TextRotation

    property TextRotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextRotation() const; //Returns the value of TextRotation
    inline void SetTextRotation(double value); //Sets the value of the TextRotation property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UsingDefaultTextPosition

    property UsingDefaultTextPosition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UsingDefaultTextPosition() const; //Returns the value of UsingDefaultTextPosition
    inline void SetUsingDefaultTextPosition(bool value); //Sets the value of the UsingDefaultTextPosition property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method RecomputeDimBlock

    method RecomputeDimBlock
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RecomputeDimBlock(bool forceUpdate);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawEllipse : public QAxObject
{
public:
    MxDrawEllipse(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{8b8c24b1-492f-41de-997a-db9e60a5a98a}"));
    }

    MxDrawEllipse(IMxDrawEllipse *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Center

    property Center
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Center() const; //Returns the value of Center
    inline void SetCenter(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Center property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property EndAngle

    property EndAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double EndAngle() const; //Returns the value of EndAngle
    inline void SetEndAngle(double value); //Sets the value of the EndAngle property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property MajorAxis

    property MajorAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* MajorAxis() const; //Returns the value of MajorAxis
    inline void SetMajorAxis(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the MajorAxis property

    /*
    Property MinorAxis

    property MinorAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* MinorAxis() const; //Returns the value of MinorAxis

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property RadiusRatio

    property RadiusRatio
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double RadiusRatio() const; //Returns the value of RadiusRatio
    inline void SetRadiusRatio(double value); //Sets the value of the RadiusRatio property

    /*
    Property StartAngle

    property StartAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double StartAngle() const; //Returns the value of StartAngle
    inline void SetStartAngle(double value); //Sets the value of the StartAngle property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawMText : public QAxObject
{
public:
    MxDrawMText(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{849add1d-fba1-430b-a309-825f9000e86c}"));
    }

    MxDrawMText(IMxDrawMText *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Attachment

    property Attachment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McAttachmentPoint Attachment() const; //Returns the value of Attachment
    inline void SetAttachment(MxDrawXLib::McAttachmentPoint value); //Sets the value of the Attachment property

    /*
    Property Contents

    property Contents
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Contents() const; //Returns the value of Contents
    inline void SetContents(const QString& value); //Sets the value of the Contents property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Direction

    property Direction
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Direction() const; //Returns the value of Direction
    inline void SetDirection(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Direction property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property FlowDirection

    property FlowDirection
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McDrawingDirection FlowDirection() const; //Returns the value of FlowDirection
    inline void SetFlowDirection(MxDrawXLib::McDrawingDirection value); //Sets the value of the FlowDirection property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineSpacingFactor

    property LineSpacingFactor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LineSpacingFactor() const; //Returns the value of LineSpacingFactor
    inline void SetLineSpacingFactor(double value); //Sets the value of the LineSpacingFactor property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Location

    property Location
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Location() const; //Returns the value of Location
    inline void SetLocation(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Location property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property TextHeight

    property TextHeight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextHeight() const; //Returns the value of TextHeight
    inline void SetTextHeight(double value); //Sets the value of the TextHeight property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method ToCurves

    method ToCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* ToCurves();

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawPointEntity : public QAxObject
{
public:
    MxDrawPointEntity(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{227121bc-85a2-4cc9-8da4-22bbbf1c65c5}"));
    }

    MxDrawPointEntity(IMxDrawPointEntity *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property Position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawRay : public QAxObject
{
public:
    MxDrawRay(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{8620f265-9193-4ae0-b6c6-974d2a4fde71}"));
    }

    MxDrawRay(IMxDrawRay *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UnitDir

    property UnitDir
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* UnitDir() const; //Returns the value of UnitDir
    inline void SetUnitDir(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the UnitDir property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property basePoint

    property BasePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePoint() const; //Returns the value of basePoint
    inline void setBasePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePoint property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawSolid : public QAxObject
{
public:
    MxDrawSolid(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{f6b4a35a-331a-4716-8759-b0768a27f001}"));
    }

    MxDrawSolid(IMxDrawSolid *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetPointAt

    method GetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAt(int index);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetPointAt

    method SetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawSpline : public QAxObject
{
public:
    MxDrawSpline(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{94bbc0ea-0837-4b8c-8fe1-f60cc1f6a412}"));
    }

    MxDrawSpline(IMxDrawSpline *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetControlPoints

    method GetControlPoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetControlPoints();

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetFitData

    method GetFitData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetFitData(MxDrawXLib::IMxDrawPoints** pPoints, int& degree, double& fitTolerance, bool& tangentsExist, MxDrawXLib::IMxDrawVector3d** startTangent, MxDrawXLib::IMxDrawVector3d** endTangent);

    /*
    Method GetFitParam

    method GetFitParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetFitParam();

    /*
    Method GetFitPoints

    method GetFitPoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetFitPoints();

    /*
    Method GetKnots

    method GetKnots
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetKnots();

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetNurbsData

    method GetNurbsData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetNurbsData(int& degree, bool& rational, bool& closed, bool& periodic, MxDrawXLib::IMxDrawPoints** controlPoints, MxDrawXLib::IMxDrawResbuf** knots, MxDrawXLib::IMxDrawResbuf** weights, double& controlPtTol, double& knotTol);

    /*
    Method GetParam

    method GetParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetParam();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetWeights

    method GetWeights
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetWeights();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetFitData

    method SetFitData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetFitData(MxDrawXLib::IMxDrawPoints* points, int degree, double fitTolerance, MxDrawXLib::IMxDrawVector3d* startTangent, MxDrawXLib::IMxDrawVector3d* endTangent);

    /*
    Method SetNurbsData

    method SetNurbsData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetNurbsData(int degree, bool rational, bool closed, bool periodic, MxDrawXLib::IMxDrawPoints* controlPoints, MxDrawXLib::IMxDrawResbuf* knots, MxDrawXLib::IMxDrawResbuf* weights, double controlPtTol, double knotTol);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawTolerance : public QAxObject
{
public:
    MxDrawTolerance(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{83926f9b-f786-4206-919b-8126b6d1870a}"));
    }

    MxDrawTolerance(IMxDrawTolerance *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawTrace : public QAxObject
{
public:
    MxDrawTrace(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{e509e5ad-06ce-4c9c-9736-7f2bde8c6bdb}"));
    }

    MxDrawTrace(IMxDrawTrace *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetPointAt

    method GetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAt(int index);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetPointAt

    method SetPointAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawXline : public QAxObject
{
public:
    MxDrawXline(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{6c9cda73-ad53-4b8c-a681-2ead13c6f18a}"));
    }

    MxDrawXline(IMxDrawXline *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property UnitDir

    property UnitDir
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* UnitDir() const; //Returns the value of UnitDir
    inline void SetUnitDir(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the UnitDir property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property basePoint

    property BasePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePoint() const; //Returns the value of basePoint
    inline void setBasePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePoint property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetArea

    method GetArea
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetArea(double& pArea);

    /*
    Method GetArea2

    method GetArea2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetArea2();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetClosestPointTo

    method GetClosestPointTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve);

    /*
    Method GetClosestPointTo2

    method GetClosestPointTo2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend);

    /*
    Method GetDistAtParam

    method GetDistAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtParam(double dParam, double& pDis);

    /*
    Method GetDistAtParam2

    method GetDistAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtParam2(double dParam);

    /*
    Method GetDistAtPoint

    method GetDistAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis);

    /*
    Method GetDistAtPoint2

    method GetDistAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetEndParam

    method GetEndParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetEndParam();

    /*
    Method GetEndPoint

    method GetEndPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetEndPoint();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetFirstDeriv

    method GetFirstDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv);

    /*
    Method GetFirstDeriv2

    method GetFirstDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDeriv2(double dParam);

    /*
    Method GetFirstDerivEx

    method GetFirstDerivEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method GetLength

    method GetLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetLength(double& Length);

    /*
    Method GetLength2

    method GetLength2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetLength2();

    /*
    Method GetParamAtDist

    method GetParamAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtDist(double dDis, double& pParam);

    /*
    Method GetParamAtDist2

    method GetParamAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtDist2(double dDis);

    /*
    Method GetParamAtPoint

    method GetParamAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam);

    /*
    Method GetParamAtPoint2

    method GetParamAtPoint2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetPointAtDist

    method GetPointAtDist
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtDist2

    method GetPointAtDist2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtDist2(double dDis);

    /*
    Method GetPointAtParam

    method GetPointAtParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint);

    /*
    Method GetPointAtParam2

    method GetPointAtParam2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPointAtParam2(double dParam);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetSamplePoints

    method GetSamplePoints
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetSamplePoints(double dApproxEps);

    /*
    Method GetSecondDeriv

    method GetSecondDeriv
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv);

    /*
    Method GetSecondDeriv2

    method GetSecondDeriv2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method GetStartParam

    method GetStartParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetStartParam();

    /*
    Method GetStartPoint

    method GetStartPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetStartPoint();

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsClosed

    method IsClosed
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsClosed();

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method OffsetCurves

    method OffsetCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method OffsetCurves2

    method OffsetCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method SplitCurves

    method SplitCurves
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId);

    /*
    Method SplitCurves2

    method SplitCurves2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawBlockReference : public QAxObject
{
public:
    MxDrawBlockReference(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{601dadf1-9170-4f50-b91c-96e5abd56e87}"));
    }

    MxDrawBlockReference(IMxDrawBlockReference *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AttributeCount

    property AttributeCount
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int AttributeCount() const; //Returns the value of AttributeCount

    /*
    Property BlockTableRecord

    property BlockTableRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* BlockTableRecord() const; //Returns the value of BlockTableRecord
    inline void SetBlockTableRecord(MxDrawXLib::IMxDrawBlockTableRecord* value); //Sets the value of the BlockTableRecord property

    /*
    Property BlockTableRecordId

    property BlockTableRecordId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong BlockTableRecordId() const; //Returns the value of BlockTableRecordId
    inline void SetBlockTableRecordId(qlonglong value); //Sets the value of the BlockTableRecordId property

    /*
    Property BlockTransform

    property BlockTransform
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMatrix3d* BlockTransform() const; //Returns the value of BlockTransform
    inline void SetBlockTransform(MxDrawXLib::IMxDrawMatrix3d* value); //Sets the value of the BlockTransform property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property Position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property Rotation

    property Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property ScaleFactors

    property ScaleFactors
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawScale3d* ScaleFactors() const; //Returns the value of ScaleFactors
    inline void SetScaleFactors(MxDrawXLib::IMxDrawScale3d* value); //Sets the value of the ScaleFactors property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AppendAttribute

    method AppendAttribute
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawAttribute* AppendAttribute();

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method AttributeItem

    method AttributeItem
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawAttribute* AttributeItem(int lItem);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method Explode

    method Explode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* Explode();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBlockName

    method GetBlockName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetBlockName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawHatch : public QAxObject
{
public:
    MxDrawHatch(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{0f414caf-c7dc-4c6e-8c36-50ae84c6bd34}"));
    }

    MxDrawHatch(IMxDrawHatch *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Elevation

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Elevation() const; //Returns the value of Elevation
    inline void SetElevation(double value); //Sets the value of the Elevation property

    /*
    Property GradientAngle

    property GradientAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GradientAngle() const; //Returns the value of GradientAngle
    inline void SetGradientAngle(double value); //Sets the value of the GradientAngle property

    /*
    Property GradientName

    property GradientName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GradientName() const; //Returns the value of GradientName
    inline void SetGradientName(const QString& value); //Sets the value of the GradientName property

    /*
    Property GradientOneColorMode

    property GradientOneColorMode
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GradientOneColorMode() const; //Returns the value of GradientOneColorMode
    inline void SetGradientOneColorMode(bool value); //Sets the value of the GradientOneColorMode property

    /*
    Property GradientType

    property GradientType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::GradientPatternType GradientType() const; //Returns the value of GradientType
    inline void SetGradientType(MxDrawXLib::GradientPatternType value); //Sets the value of the GradientType property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property HatchObjectType

    property HatchObjectType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::HatchObjectType HatchObjectType() const; //Returns the value of HatchObjectType
    inline void SetHatchObjectType(MxDrawXLib::HatchObjectType value); //Sets the value of the HatchObjectType property

    /*
    Property HatchStyle

    property HatchStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::HatchStyle HatchStyle() const; //Returns the value of HatchStyle
    inline void SetHatchStyle(MxDrawXLib::HatchStyle value); //Sets the value of the HatchStyle property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property NumLoops

    property NumLoops
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int NumLoops() const; //Returns the value of NumLoops

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property PatternAngle

    property PatternAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double PatternAngle() const; //Returns the value of PatternAngle
    inline void SetPatternAngle(double value); //Sets the value of the PatternAngle property

    /*
    Property PatternDouble

    property PatternDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PatternDouble() const; //Returns the value of PatternDouble
    inline void SetPatternDouble(bool value); //Sets the value of the PatternDouble property

    /*
    Property PatternName

    property PatternName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString PatternName() const; //Returns the value of PatternName
    inline void SetPatternName(const QString& value); //Sets the value of the PatternName property

    /*
    Property PatternScale

    property PatternScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double PatternScale() const; //Returns the value of PatternScale
    inline void SetPatternScale(double value); //Sets the value of the PatternScale property

    /*
    Property PatternSpace

    property PatternSpace
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double PatternSpace() const; //Returns the value of PatternSpace
    inline void SetPatternSpace(double value); //Sets the value of the PatternSpace property

    /*
    Property PatternType

    property PatternType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::HatchPatternType PatternType() const; //Returns the value of PatternType
    inline void SetPatternType(MxDrawXLib::HatchPatternType value); //Sets the value of the PatternType property

    /*
    Property ShadeTintValue

    property ShadeTintValue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ShadeTintValue() const; //Returns the value of ShadeTintValue
    inline void SetShadeTintValue(double value); //Sets the value of the ShadeTintValue property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AddPatternDefinition

    method AddPatternDefinition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AddPatternDefinition(double Angle, double baseX, double baseY, double offsetX, double offsetY, MxDrawXLib::IMxDrawResbuf* dashes);

    /*
    Method AddPatternDefinitionEx

    method AddPatternDefinitionEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AddPatternDefinitionEx(const QString& pszDefinitionData, double dScale);

    /*
    Method AppendLoop

    method AppendLoop
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AppendLoop(int loopType, MxDrawXLib::IMxDrawResbuf* pData);

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method ClearPatternDefinition

    method ClearPatternDefinition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearPatternDefinition();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method EvaluateHatch

    method EvaluateHatch
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EvaluateHatch(bool bUnderestimateNumLines);

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetLoopAt

    method GetLoopAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetLoopAt(int loopIndex);

    /*
    Method GetPatternDefinitionAt

    method GetPatternDefinitionAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetPatternDefinitionAt(int index, double& Angle, double& baseX, double& baseY, double& offsetX, double& offsetY);

    /*
    Method GetPolylines

    method GetPolylines
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetPolylines();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsGradient

    method IsGradient
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsGradient();

    /*
    Method IsHatch

    method IsHatch
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsHatch();

    /*
    Method IsSolid

    method IsSolid
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsSolid();

    /*
    Method LoadPatternDefinition

    method LoadPatternDefinition
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool LoadPatternDefinition(const QString& pszFileName, const QString& pszName, double dPatternScale, double dPatternAngel);

    /*
    Method LoopTypeAt

    method LoopTypeAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int LoopTypeAt(int loopIndex);

    /*
    Method LoopTypeIsPolyline

    method LoopTypeIsPolyline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool LoopTypeIsPolyline(int loopIndex);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method NumPatternDefinitions

    method NumPatternDefinitions
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int NumPatternDefinitions();

    /*
    Method RemoveAllLoop

    method RemoveAllLoop
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RemoveAllLoop();

    /*
    Method RemoveLoopAt

    method RemoveLoopAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool RemoveLoopAt(int loopIndex);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method ScalePattern

    method ScalePattern
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ScalePattern(double dScale);

    /*
    Method SetLoopAt

    method SetLoopAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetLoopAt(int loopIndex, int loopType, MxDrawXLib::IMxDrawResbuf* pData);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

    /*
    Method getGradientColors

    method getGradientColors
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getGradientColors(MxDrawXLib::IMxDrawResbuf** mxColors);

    /*
    Method setGradientColors

    method setGradientColors
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool setGradientColors(MxDrawXLib::IMxDrawResbuf* mxColors, MxDrawXLib::IMxDrawResbuf* mxValues);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawRasterImage : public QAxObject
{
public:
    MxDrawRasterImage(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{43a79597-b6a7-40eb-98e9-ecf94df4082c}"));
    }

    MxDrawRasterImage(IMxDrawRasterImage *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property ImageDefId

    property ImageDefId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ImageDefId() const; //Returns the value of ImageDefId
    inline void SetImageDefId(qlonglong value); //Sets the value of the ImageDefId property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetOrientation

    method GetOrientation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetOrientation(MxDrawXLib::IMxDrawPoint** Origin, MxDrawXLib::IMxDrawVector3d** uCorner, MxDrawXLib::IMxDrawVector3d** vOnPlane);

    /*
    Method GetOrientation2

    method GetOrientation2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetOrientation2();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetOrientation

    method SetOrientation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetOrientation(MxDrawXLib::IMxDrawPoint* Origin, MxDrawXLib::IMxDrawVector3d* uCorner, MxDrawXLib::IMxDrawVector3d* vOnPlane);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawLayout : public QAxObject
{
public:
    MxDrawLayout(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{b83b045c-0be8-45fe-8620-4f50014ccbb8}"));
    }

    MxDrawLayout(IMxDrawLayout *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property LayoutName

    property LayoutName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LayoutName() const; //Returns the value of LayoutName
    inline void SetLayoutName(const QString& value); //Sets the value of the LayoutName property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawSymbolTable : public QAxObject
{
public:
    MxDrawSymbolTable(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{8040ff05-eb74-4082-8c65-98a3f7260126}"));
    }

    MxDrawSymbolTable(IMxDrawSymbolTable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawBlockTable : public QAxObject
{
public:
    MxDrawBlockTable(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{fb85cf74-7b9b-46dc-8d9b-2d057f78e9e4}"));
    }

    MxDrawBlockTable(IMxDrawBlockTable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* Add(const QString& pszName);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method Has

    method Has
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Has(const QString& pName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawLayerTable : public QAxObject
{
public:
    MxDrawLayerTable(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{1fe07f0a-22e5-4054-b2f2-180558418624}"));
    }

    MxDrawLayerTable(IMxDrawLayerTable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTableRecord* Add(const QString& pszName);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTableRecord* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTableRecord* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method Has

    method Has
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Has(const QString& pName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTableIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawLinetypeTable : public QAxObject
{
public:
    MxDrawLinetypeTable(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{57e22cfc-ce4d-49f9-a416-702583cf36c1}"));
    }

    MxDrawLinetypeTable(IMxDrawLinetypeTable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTableRecord* Add(const QString& pszName);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTableRecord* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTableRecord* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method Has

    method Has
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Has(const QString& pName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTableIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawTextStyleTable : public QAxObject
{
public:
    MxDrawTextStyleTable(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{8e610aa9-5403-436a-bb85-07af9818ea1a}"));
    }

    MxDrawTextStyleTable(IMxDrawTextStyleTable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTableRecord* Add(const QString& pszName);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTableRecord* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTableRecord* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method Has

    method Has
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Has(const QString& pName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTableIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawIdMapping : public QAxObject
{
public:
    MxDrawIdMapping(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{5125b2a8-70d3-4ecb-9029-34d63c7fcdb9}"));
    }

    MxDrawIdMapping(IMxDrawIdMapping *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    property Count
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Find

    method Find
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong Find(qlonglong lKeyId);

    /*
    Method Item

    method Item
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong Item(int index, qlonglong& lId1);

    /*
    Method ItemKey

    method ItemKey
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ItemKey(int index);

    /*
    Method ItemValue

    method ItemValue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ItemValue(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawUcs : public QAxObject
{
public:
    MxDrawUcs(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{b02938a0-4b3f-4149-b02a-f06326c42c10}"));
    }

    MxDrawUcs(IMxDrawUcs *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawTextStyleTableRecord : public QAxObject
{
public:
    MxDrawTextStyleTableRecord(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{7bd1bd7d-d887-4f62-b428-2bb71c513bd8}"));
    }

    MxDrawTextStyleTableRecord(IMxDrawTextStyleTableRecord *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property bigFontFileName

    property bigFontFileName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString bigFontFileName() const; //Returns the value of bigFontFileName
    inline void setBigFontFileName(const QString& value); //Sets the value of the bigFontFileName property

    /*
    Property fileName

    property fileName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString fileName() const; //Returns the value of fileName
    inline void setFileName(const QString& value); //Sets the value of the fileName property

    /*
    Property flagBits

    property flagBits
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int flagBits() const; //Returns the value of flagBits
    inline void setFlagBits(int value); //Sets the value of the flagBits property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Property isShapeFile

    property isShapeFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isShapeFile() const; //Returns the value of isShapeFile
    inline void setIsShapeFile(bool value); //Sets the value of the isShapeFile property

    /*
    Property isVertical

    property isVertical
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isVertical() const; //Returns the value of isVertical
    inline void setIsVertical(bool value); //Sets the value of the isVertical property

    /*
    Property obliquingAngle

    property obliquingAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double obliquingAngle() const; //Returns the value of obliquingAngle
    inline void setObliquingAngle(double value); //Sets the value of the obliquingAngle property

    /*
    Property priorSize

    property priorSize
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double priorSize() const; //Returns the value of priorSize
    inline void setPriorSize(double value); //Sets the value of the priorSize property

    /*
    Property textSize

    property textSize
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double textSize() const; //Returns the value of textSize
    inline void setTextSize(double value); //Sets the value of the textSize property

    /*
    Property xScale

    property xScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double xScale() const; //Returns the value of xScale
    inline void setXScale(double value); //Sets the value of the xScale property

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method Font

    method Font
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Font(QString& pTypeface, bool& bold, bool& italic, int& charset, int& pitchAndFamily);

    /*
    Method Font2

    method Font2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* Font2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetFont

    method SetFont
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetFont(const QString& pTypeface, bool bold, bool italic, int charset, int pitchAndFamily);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawLayerTableRecord : public QAxObject
{
public:
    MxDrawLayerTableRecord(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{c48bc1a3-15d4-46f7-a14f-06d37db1f928}"));
    }

    MxDrawLayerTableRecord(IMxDrawLayerTableRecord *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Color

    property Color
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* Color() const; //Returns the value of Color
    inline void SetColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the Color property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsFrozen

    property IsFrozen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsFrozen() const; //Returns the value of IsFrozen
    inline void SetIsFrozen(bool value); //Sets the value of the IsFrozen property

    /*
    Property IsLocked

    property IsLocked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsLocked() const; //Returns the value of IsLocked
    inline void SetIsLocked(bool value); //Sets the value of the IsLocked property

    /*
    Property IsOff

    property IsOff
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsOff() const; //Returns the value of IsOff
    inline void SetIsOff(bool value); //Sets the value of the IsOff property

    /*
    Property LinetypeObjectId

    property LinetypeObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong LinetypeObjectId() const; //Returns the value of LinetypeObjectId
    inline void SetLinetypeObjectId(qlonglong value); //Sets the value of the LinetypeObjectId property

    /*
    Property Lineweight

    property LineWeight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawLinetypeTableRecord : public QAxObject
{
public:
    MxDrawLinetypeTableRecord(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{c5c969a3-f6bc-4965-9fe2-c4503a1a1bad}"));
    }

    MxDrawLinetypeTableRecord(IMxDrawLinetypeTableRecord *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Comments

    property Comments
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Comments() const; //Returns the value of Comments
    inline void SetComments(const QString& value); //Sets the value of the Comments property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsScaledToFit

    property IsScaledToFit
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsScaledToFit() const; //Returns the value of IsScaledToFit
    inline void SetIsScaledToFit(bool value); //Sets the value of the IsScaledToFit property

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NumDashes

    property NumDashes
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int NumDashes() const; //Returns the value of NumDashes
    inline void SetNumDashes(int value); //Sets the value of the NumDashes property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property PatternLength

    property PatternLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double PatternLength() const; //Returns the value of PatternLength
    inline void SetPatternLength(double value); //Sets the value of the PatternLength property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method DashLengthAt

    method DashLengthAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DashLengthAt(int index);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetDashLengthAt

    method SetDashLengthAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDashLengthAt(int index, double dLen);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetShapeIsUcsOrientedAt

    method SetShapeIsUcsOrientedAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetShapeIsUcsOrientedAt(int index, bool isUcsOriented);

    /*
    Method SetShapeNumberAt

    method SetShapeNumberAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetShapeNumberAt(int index, int lNumber);

    /*
    Method SetShapeOffsetAt

    method SetShapeOffsetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetShapeOffsetAt(int index, MxDrawXLib::IMxDrawVector3d* offset);

    /*
    Method SetShapeRotationAt

    method SetShapeRotationAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetShapeRotationAt(int index, double dRotation);

    /*
    Method SetTextAt

    method SetTextAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTextAt(int index, const QString& pszText);

    /*
    Method ShapeIsUcsOrientedAt

    method ShapeIsUcsOrientedAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ShapeIsUcsOrientedAt(int index);

    /*
    Method ShapeNumberAt

    method ShapeNumberAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int ShapeNumberAt(int index);

    /*
    Method ShapeOffsetAt

    method ShapeOffsetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* ShapeOffsetAt(int index);

    /*
    Method ShapeRotationAt

    method ShapeRotationAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ShapeRotationAt(int index);

    /*
    Method ShapeStyleAt

    method ShapeStyleAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ShapeStyleAt(int index);

    /*
    Method TextAt

    method TextAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextAt(int index);

    /*
    Method setShapeStyleAt

    method setShapeStyleAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setShapeStyleAt(int index, qlonglong lId);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawUtility : public QAxObject
{
public:
    MxDrawUtility(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{5b999de6-e913-4d25-99e2-27b7f2f5d603}"));
    }

    MxDrawUtility(IMxDrawUtility *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method GetAngle

    method GetAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetAngle(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt);

    /*
    Method GetCorner

    method GetCorner
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetCorner(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt);

    /*
    Method GetDimAngle

    method GetDimAngle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimAngle(double dAng);

    /*
    Method GetDistance

    method GetDistance
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDistance(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt);

    /*
    Method GetEntity

    method GetEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* GetEntity(MxDrawXLib::IMxDrawPoint** pPickPoint, const QString& Prompt);

    /*
    Method GetImageSize

    method GetImageSize
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetImageSize(const QString& sImageFile);

    /*
    Method GetInteger

    method GetInteger
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetInteger(const QString& Prompt);

    /*
    Method GetKeyword

    method GetKeyword
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetKeyword(const QString& Prompt, const QString& keyWordList);

    /*
    Method GetPoint

    method GetPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPoint(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt);

    /*
    Method GetReal

    method GetReal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetReal(const QString& Prompt);

    /*
    Method GetStatus

    method GetStatus
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus GetStatus();

    /*
    Method GetString

    method GetString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetString(const QString& pormpt, const QString& defval);

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method InitializeUserInput

    method InitializeUserInput
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void InitializeUserInput(int bits, const QString& keyWordList);

    /*
    Method PointInPolyline

    method PointInPolyline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PointInPolyline(MxDrawXLib::IMxDrawPoints* pPointArray, double dX, double dY);

    /*
    Method Prompt

    method Prompt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Prompt(const QString& message);

    /*
    Method TableSearch

    method TableSearch
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* TableSearch(const QString& pszSpaceName, const QString& pszTableHead);

    /*
    Method UcsToWcs

    method UcsToWcs
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* UcsToWcs(MxDrawXLib::IMxDrawPoint* pIn);

    /*
    Method WcsToUcs

    method WcsToUcs
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* WcsToUcs(MxDrawXLib::IMxDrawPoint* pIn);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawSelectionSet : public QAxObject
{
public:
    MxDrawSelectionSet(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{40a24b41-473d-4022-9000-0a600440a63d}"));
    }

    MxDrawSelectionSet(IMxDrawSelectionSet *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    property Count
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method AllSelect

    method AllSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AllSelect();

    /*
    Method AllSelect

    method AllSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AllSelect(MxDrawXLib::IMxDrawResbuf* filterData);

    /*
    Method CurrentSelect

    method CurrentSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void CurrentSelect();

    /*
    Method CurrentSelect

    method CurrentSelect
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void CurrentSelect(MxDrawXLib::IMxDrawResbuf* pFilter);

    /*
    Method Item

    method Item
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* Item(int index);

    /*
    Method Select

    method Select
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Select(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Select

    method Select
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Select(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2, MxDrawXLib::IMxDrawResbuf* filterData);

    /*
    Method Select2

    method Select2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2);

    /*
    Method Select2

    method Select2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2, const QVariant& filterType);

    /*
    Method Select2

    method Select2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2, const QVariant& filterType, const QVariant& filterData);

    /*
    Method SelectAtPoint

    method SelectAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SelectAtPoint(MxDrawXLib::IMxDrawPoint* point);

    /*
    Method SelectAtPoint

    method SelectAtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SelectAtPoint(MxDrawXLib::IMxDrawPoint* point, MxDrawXLib::IMxDrawResbuf* filterData);

    /*
    Method SelectByPolygon

    method SelectByPolygon
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SelectByPolygon(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoints* points);

    /*
    Method SelectByPolygon

    method SelectByPolygon
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SelectByPolygon(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* filterData);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawXRecord : public QAxObject
{
public:
    MxDrawXRecord(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{5e83aac8-7f51-4429-a59b-c0a792f2f87d}"));
    }

    MxDrawXRecord(IMxDrawXRecord *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsXlateReferences

    property IsXlateReferences
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsXlateReferences() const; //Returns the value of IsXlateReferences
    inline void SetIsXlateReferences(bool value); //Sets the value of the IsXlateReferences property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXRecordData

    method GetXRecordData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXRecordData();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXRecordData

    method SetXRecordData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXRecordData(MxDrawXLib::IMxDrawResbuf* pXData);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawRasterImageDef : public QAxObject
{
public:
    MxDrawRasterImageDef(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{467f37f8-6829-4f0c-b655-57992ff83408}"));
    }

    MxDrawRasterImageDef(IMxDrawRasterImageDef *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property SourceFileName

    property SourceFileName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString SourceFileName() const; //Returns the value of SourceFileName
    inline void SetSourceFileName(const QString& value); //Sets the value of the SourceFileName property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawVector3d : public QAxObject
{
public:
    MxDrawVector3d(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{9d4121e2-4cb7-405b-a45b-7d8279b6f7da}"));
    }

    MxDrawVector3d(IMxDrawVector3d *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property x

    property x
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double x() const; //Returns the value of x
    inline void setX(double value); //Sets the value of the x property

    /*
    Property y

    property y
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double y() const; //Returns the value of y
    inline void setY(double value); //Sets the value of the y property

    /*
    Property z

    property z
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double z() const; //Returns the value of z
    inline void setZ(double value); //Sets the value of the z property

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Add(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method Angle

    method Angle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Angle();

    /*
    Method AngleTo

    method AngleTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double AngleTo(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method AngleTo

    method AngleTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double AngleTo(MxDrawXLib::IMxDrawVector3d* pVector, MxDrawXLib::IMxDrawVector3d* pRefVec);

    /*
    Method AngleToXyPlan

    method AngleToXyPlan
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double AngleToXyPlan(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method CrossProduct

    method CrossProduct
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* CrossProduct(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method DotProduct

    method DotProduct
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double DotProduct(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method IsEqualTo

    method IsEqualTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsEqualTo(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method IsZeroLength

    method IsZeroLength
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsZeroLength();

    /*
    Method Length

    method Length
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Length();

    /*
    Method MakeXAxis

    method MakeXAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MakeXAxis();

    /*
    Method MakeYAxis

    method MakeYAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MakeYAxis();

    /*
    Method MakeZAxis

    method MakeZAxis
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MakeZAxis();

    /*
    Method Mult

    method Mult
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mult(double dScl);

    /*
    Method Negate

    method Negate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Negate();

    /*
    Method Normalize

    method Normalize
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Normalize();

    /*
    Method RotateBy

    method RotateBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RotateBy(double dAng);

    /*
    Method RotateBy

    method RotateBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RotateBy(double dAng, MxDrawXLib::IMxDrawVector3d* pAxis);

    /*
    Method RotateByXyPlan

    method RotateByXyPlan
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RotateByXyPlan(double dAng);

    /*
    Method Sub

    method Sub
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Sub(MxDrawXLib::IMxDrawVector3d* pVector);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* pMat);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawScale3d : public QAxObject
{
public:
    MxDrawScale3d(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{623001b2-9a8b-41a8-9f4b-41b70df5ef83}"));
    }

    MxDrawScale3d(IMxDrawScale3d *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property sx

    property sx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double sx() const; //Returns the value of sx
    inline void setSx(double value); //Sets the value of the sx property

    /*
    Property sy

    property sy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double sy() const; //Returns the value of sy
    inline void setSy(double value); //Sets the value of the sy property

    /*
    Property sz

    property sz
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double sz() const; //Returns the value of sz
    inline void setSz(double value); //Sets the value of the sz property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawBlockTableRecordIterator : public QAxObject
{
public:
    MxDrawBlockTableRecordIterator(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{7b507b2d-d456-4f18-8834-6ebbc2f72fd6}"));
    }

    MxDrawBlockTableRecordIterator(IMxDrawBlockTableRecordIterator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetEntity

    method GetEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* GetEntity();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawBlockTableIterator : public QAxObject
{
public:
    MxDrawBlockTableIterator(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{53d5668f-8d5e-4d6c-bddd-60e1b0eeb543}"));
    }

    MxDrawBlockTableIterator(IMxDrawBlockTableIterator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetRecord

    method GetRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockTableRecord* GetRecord();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawLayerTableIterator : public QAxObject
{
public:
    MxDrawLayerTableIterator(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{a48e7ecf-77d6-4402-a1f9-bd9e8a75881b}"));
    }

    MxDrawLayerTableIterator(IMxDrawLayerTableIterator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetRecord

    method GetRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLayerTableRecord* GetRecord();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawLinetypeTableIterator : public QAxObject
{
public:
    MxDrawLinetypeTableIterator(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{bac80cff-16f7-4803-8eb6-6f51d278b7d3}"));
    }

    MxDrawLinetypeTableIterator(IMxDrawLinetypeTableIterator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetRecord

    method GetRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLinetypeTableRecord* GetRecord();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawTextStyleTableIterator : public QAxObject
{
public:
    MxDrawTextStyleTableIterator(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{813b2a7b-5601-42e1-a78e-516008eca3b6}"));
    }

    MxDrawTextStyleTableIterator(IMxDrawTextStyleTableIterator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetRecord

    method GetRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawTextStyleTableRecord* GetRecord();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawResbuf : public QAxObject
{
public:
    MxDrawResbuf(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{1f9ac4cf-183e-4f49-a677-f9b201808635}"));
    }

    MxDrawResbuf(IMxDrawResbuf *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    property Count
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method AddAppName

    method AddAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddAppName(const QString& pszAppName);

    /*
    Method AddDouble

    method AddDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddDouble(double dVal);

    /*
    Method AddDoubleEx

    method AddDoubleEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddDoubleEx(double dVal);

    /*
    Method AddDoubleEx

    method AddDoubleEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddDoubleEx(double dVal, int lDataType);

    /*
    Method AddLong

    method AddLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddLong(int lVal);

    /*
    Method AddLongEx

    method AddLongEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddLongEx(int lVal);

    /*
    Method AddLongEx

    method AddLongEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddLongEx(int lVal, int lDataType);

    /*
    Method AddObjectId

    method AddObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddObjectId(qlonglong lVal);

    /*
    Method AddObjectIdEx

    method AddObjectIdEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddObjectIdEx(qlonglong lVal);

    /*
    Method AddObjectIdEx

    method AddObjectIdEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddObjectIdEx(qlonglong lVal, int lDataType);

    /*
    Method AddPoint

    method AddPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddPoint(MxDrawXLib::IMxDrawPoint* pVal);

    /*
    Method AddPointEx

    method AddPointEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddPointEx(MxDrawXLib::IMxDrawPoint* pVal);

    /*
    Method AddPointEx

    method AddPointEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddPointEx(MxDrawXLib::IMxDrawPoint* pVal, int lDataType);

    /*
    Method AddString

    method AddString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddString(const QString& pszVal);

    /*
    Method AddStringEx

    method AddStringEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddStringEx(const QString& pszVal);

    /*
    Method AddStringEx

    method AddStringEx
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AddStringEx(const QString& pszVal, int lDataType);

    /*
    Method AtDouble

    method AtDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double AtDouble(int lItem);

    /*
    Method AtLong

    method AtLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int AtLong(int lItem);

    /*
    Method AtObject

    method AtObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* AtObject(int lItem);

    /*
    Method AtObjectId

    method AtObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong AtObjectId(int lItem);

    /*
    Method AtPoint

    method AtPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* AtPoint(int lItem);

    /*
    Method AtString

    method AtString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString AtString(int lItem);

    /*
    Method ItemDataType

    method ItemDataType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int ItemDataType(int lItem);

    /*
    Method PrintData

    method PrintData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PrintData();

    /*
    Method Remove

    method Remove
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Remove(int lItem);

    /*
    Method RemoveAll

    method RemoveAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void RemoveAll();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDictionaryIterator : public QAxObject
{
public:
    MxDrawDictionaryIterator(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{0f3fc34e-bc89-4fd1-8084-3801730156f0}"));
    }

    MxDrawDictionaryIterator(IMxDrawDictionaryIterator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetObject

    method GetObject
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* GetObject();

    /*
    Method Name

    method Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawMatrix3d : public QAxObject
{
public:
    MxDrawMatrix3d(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{6a6f36c6-cd11-44be-b4a7-55fd880acb1f}"));
    }

    MxDrawMatrix3d(IMxDrawMatrix3d *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Det

    method Det
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Det();

    /*
    Method Get

    method Get
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Get(int iRow, int iCol);

    /*
    Method GetCoordSystem

    method GetCoordSystem
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetCoordSystem(MxDrawXLib::IMxDrawPoint** ppOrigin, MxDrawXLib::IMxDrawVector3d** ppXAxis, MxDrawXLib::IMxDrawVector3d** ppYAxis, MxDrawXLib::IMxDrawVector3d** ppZAxis);

    /*
    Method GetCoordSystem2

    method GetCoordSystem2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetCoordSystem2();

    /*
    Method Invert

    method Invert
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Invert();

    /*
    Method IsEqualTo

    method IsEqualTo
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsEqualTo(MxDrawXLib::IMxDrawMatrix3d* pMat);

    /*
    Method IsScaledOrtho

    method IsScaledOrtho
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsScaledOrtho();

    /*
    Method IsSingular

    method IsSingular
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsSingular(double dTol);

    /*
    Method IsUniScaledOrtho

    method IsUniScaledOrtho
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsUniScaledOrtho();

    /*
    Method Mirroring

    method Mirroring
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirroring(MxDrawXLib::IMxDrawPoint* pPt1, MxDrawXLib::IMxDrawPoint* pPt2);

    /*
    Method PostMultBy

    method PostMultBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PostMultBy(MxDrawXLib::IMxDrawMatrix3d* pRightSide);

    /*
    Method PreMultBy

    method PreMultBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PreMultBy(MxDrawXLib::IMxDrawMatrix3d* pLeftSide);

    /*
    Method Rotation

    method Rotation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotation(double dAng, MxDrawXLib::IMxDrawVector3d* pAxis, MxDrawXLib::IMxDrawPoint* pCenter);

    /*
    Method Scaling

    method Scaling
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Scaling(double dScaleAll, MxDrawXLib::IMxDrawPoint* pCenter);

    /*
    Method Set

    method Set
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Set(int iRow, int iCol, double dVal);

    /*
    Method SetCoordSystem

    method SetCoordSystem
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetCoordSystem(MxDrawXLib::IMxDrawPoint* pOrigin, MxDrawXLib::IMxDrawVector3d* pXAxis, MxDrawXLib::IMxDrawVector3d* pYAxis, MxDrawXLib::IMxDrawVector3d* pZAxis);

    /*
    Method SetToIdentity

    method SetToIdentity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetToIdentity();

    /*
    Method Translation

    method Translation
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Translation(MxDrawXLib::IMxDrawVector3d* pVector3d);

    /*
    Method TransposeIt

    method TransposeIt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransposeIt();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDimStyleTable : public QAxObject
{
public:
    MxDrawDimStyleTable(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{ed5230a0-f7fc-4a53-bcb6-da6401b01b21}"));
    }

    MxDrawDimStyleTable(IMxDrawDimStyleTable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Add

    method Add
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTableRecord* Add(const QString& pszName);

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTableRecord* GetAt(const QString& pName);

    /*
    Method GetAt

    method GetAt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTableRecord* GetAt(const QString& pName, bool isGetErased);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method Has

    method Has
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Has(const QString& pName);

    /*
    Method NewIterator

    method NewIterator
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTableIterator* NewIterator();

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDimStyleTableRecord : public QAxObject
{
public:
    MxDrawDimStyleTableRecord(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{28b65aff-e0a7-4b9a-9aaa-d246605523de}"));
    }

    MxDrawDimStyleTableRecord(IMxDrawDimStyleTableRecord *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Name

    property Name
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetDimVarDouble

    method GetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDimVarDouble(int iType);

    /*
    Method GetDimVarInt

    method GetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetDimVarInt(int iType);

    /*
    Method GetDimVarObjectId

    method GetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetDimVarObjectId(int iType);

    /*
    Method GetDimVarString

    method GetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetDimVarString(int iType);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method SetDimVarDouble

    method SetDimVarDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarDouble(int iType, double dValue);

    /*
    Method SetDimVarInt

    method SetDimVarInt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarInt(int iType, int iValue);

    /*
    Method SetDimVarObjectId

    method SetDimVarObjectId
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarObjectId(int iType, qlonglong lId);

    /*
    Method SetDimVarString

    method SetDimVarString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDimVarString(int iType, const QString& value);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawDimStyleTableIterator : public QAxObject
{
public:
    MxDrawDimStyleTableIterator(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{1f530470-a900-4580-8cc5-9cd9ff4536ae}"));
    }

    MxDrawDimStyleTableIterator(IMxDrawDimStyleTableIterator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Done

    method Done
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Done();

    /*
    Method GetRecord

    method GetRecord
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimStyleTableRecord* GetRecord();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start();

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning);

    /*
    Method Start

    method Start
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Start(bool atBeginning, bool skipDeleted);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step();

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward);

    /*
    Method Step

    method Step
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Step(bool forward, bool skipDeleted);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawEntityImp : public QAxObject
{
public:
    MxDrawEntityImp(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{dc4ec2dd-1850-482f-b1a5-bc49627b061c}"));
    }

    MxDrawEntityImp(IMxDrawEntityImp *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawBinStream : public QAxObject
{
public:
    MxDrawBinStream(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{36e877ce-bdbc-4c47-a476-1b7ffe128a35}"));
    }

    MxDrawBinStream(IMxDrawBinStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ExParam

    property ExParam
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ExParam() const; //Returns the value of ExParam
    inline void SetExParam(const QString& value); //Sets the value of the ExParam property

    /*
    Method FreeMemory

    method FreeMemory
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void FreeMemory();

    /*
    Method GetByte

    method GetByte
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline uint GetByte(int lIndex);

    /*
    Method GetCount

    method GetCount
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetCount();

    /*
    Method MallocMemory

    method MallocMemory
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MallocMemory(int lLen);

    /*
    Method SetByte

    method SetByte
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetByte(int lIndex, uint value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawService : public QAxObject
{
public:
    MxDrawService(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{e35690df-e2b9-43e2-9520-dc98244b240e}"));
    }

    MxDrawService(IMxDrawService *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method DrawImage

    method DrawImage
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong DrawImage(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFilePath);

    /*
    Method GetCurrentLayout

    method GetCurrentLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetCurrentLayout();

    /*
    Method GetDatabase

    method GetDatabase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* GetDatabase();

    /*
    Method MakeCurrent

    method MakeCurrent
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void MakeCurrent();

    /*
    Method Open

    method Open
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Open(const QString& pszFileName);

    /*
    Method SaveDwgFile

    method SaveDwgFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SaveDwgFile(const QString& pFileName);

    /*
    Method SetCurrentLayout

    method SetCurrentLayout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetCurrentLayout(const QString& pszLayoutName);

    /*
    Method SetViewColor

    method SetViewColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetViewColor(uint red, uint green, uint blue);

    /*
    Method WriteJpg

    method WriteJpg
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool WriteJpg(const QString& pszFileName, int lWidth, int lHeight);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawUiPrString : public QAxObject
{
public:
    MxDrawUiPrString(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{95c44c28-22e0-4823-8c98-c3c0da41da3b}"));
    }

    MxDrawUiPrString(IMxDrawUiPrString *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property defValue

    property defValue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString defValue() const; //Returns the value of defValue
    inline void setDefValue(const QString& value); //Sets the value of the defValue property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawUiPrPoint : public QAxObject
{
public:
    MxDrawUiPrPoint(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{cf44ec9f-20c3-447e-bd13-c8bdfceaf7bf}"));
    }

    MxDrawUiPrPoint(IMxDrawUiPrPoint *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property basePoint

    property basePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePoint() const; //Returns the value of basePoint
    inline void setBasePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePoint property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method setUseBasePt

    method setUseBasePt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setUseBasePt(bool isUse);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawCustomEntity : public QAxObject
{
public:
    MxDrawCustomEntity(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{9eace13d-f9e3-47dc-bea6-aa50309c59d6}"));
    }

    MxDrawCustomEntity(IMxDrawCustomEntity *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property DragPoint

    property DragPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* DragPoint() const; //Returns the value of DragPoint
    inline void SetDragPoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the DragPoint property

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property Guid

    property Guid
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Guid() const; //Returns the value of Guid
    inline void SetGuid(const QString& value); //Sets the value of the Guid property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method BeginSetValue

    method BeginSetValue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void BeginSetValue();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Draw

    method Draw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* Draw();

    /*
    Method EntSetValue

    method EntSetValue
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void EntSetValue();

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetDouble

    method GetDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetDouble(const QString& pszName);

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetLong

    method GetLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetLong(const QString& pszName);

    /*
    Method GetLongPtr

    method GetLongPtr
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong GetLongPtr(const QString& pszName);

    /*
    Method GetPoint

    method GetPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPoint(const QString& pszName);

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetString

    method GetString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetString(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method IsHave

    methodIsHave
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsHave(const QString& pszName);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetDouble

    method SetDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetDouble(const QString& pszName, double dV);

    /*
    Method SetLong

    method SetLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetLong(const QString& pszName, int lV);

    /*
    Method SetLongPtr

    method SetLongPtr
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetLongPtr(const QString& pszName, qlonglong lV);

    /*
    Method SetPoint

    method SetPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetPoint(const QString& pszName, MxDrawXLib::IMxDrawPoint* pPoint);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetString

    method SetString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetString(const QString& pszName, const QString& pszV);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawWorldDraw : public QAxObject
{
public:
    MxDrawWorldDraw(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{df5ce37c-1eba-4036-9683-fb7aca363089}"));
    }

    MxDrawWorldDraw(IMxDrawWorldDraw *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Color

    property  Color
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Color() const; //Returns the value of Color
    inline void SetColor(int value); //Sets the value of the Color property

    /*
    Property DimStyle

    property DimStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DimStyle() const; //Returns the value of DimStyle
    inline void SetDimStyle(const QString& value); //Sets the value of the DimStyle property

    /*
    Property Draworder

    property  Draworder
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Draworder() const; //Returns the value of Draworder
    inline void SetDraworder(int value); //Sets the value of the Draworder property

    /*
    Property Layer

    property  Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property  LineType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LineWidth

    property  LineWidth
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LineWidth() const; //Returns the value of LineWidth
    inline void SetLineWidth(double value); //Sets the value of the LineWidth property

    /*
    Property LinetypeScale

    property  LineTypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property TextStyle

    property  TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Method DrawArc

    method DrawArc
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawArc(double dCenX, double dCenY, double dRadius, double dStartAng, double dEndAng);

    /*
    Method DrawArc2

    method DrawArc2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawArc2(double dStartPointX, double dStartPointY, double dX, double dY, double dEndPointX, double dEndPointY);

    /*
    Method DrawArc3

    method DrawArc3
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge);

    /*
    Method DrawBlockReference

    method DrawBlockReference
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawBlockReference(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale, double dAng);

    /*
    Method DrawCircle

    method DrawCircle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawCircle(double dCenX, double dCenY, double dRadius);

    /*
    Method DrawEllipse

    method DrawEllipse
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio);

    /*
    Method DrawEllipseArc

    method DrawEllipseArc
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng);

    /*
    Method DrawEntity

    method DrawEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawEntity(MxDrawXLib::IMxDrawEntity* pEntity);

    /*
    Method DrawImage

    method DrawImage
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawImage(double dOriginX, double dOriginY, double dScale, double dAng, const QString& pszImageFileName);

    /*
    Method DrawLine

    method DrawLine
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void DrawLine(double dX1, double dY1, double dX2, double dY2);

    /*
    Method DrawLines

    method DrawLines
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawLines(MxDrawXLib::IMxDrawPoints* points);

    /*
    Method DrawMText

    method DrawMText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawMText(double dInsertionPointX, double dInsertionPointY, double dHeight, const QString& pszText);

    /*
    Method DrawPoint

    method DrawPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawPoint(double dX, double dY);

    /*
    Method DrawPolyline

    method DrawPolyline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawPolyline(MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* sWdiths, MxDrawXLib::IMxDrawResbuf* eWidths, MxDrawXLib::IMxDrawResbuf* bulges);

    /*
    Method DrawPolyline2

    method DrawPolyline2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawPolyline2(MxDrawXLib::IMxDrawPoints* points, double dWidth);

    /*
    Method DrawRay

    method DrawRay
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawRay(double dX1, double dY1, double dX2, double dY2);

    /*
    Method DrawSolid

    method DrawSolid
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4);

    /*
    Method DrawSpline

    method DrawSpline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawSpline(MxDrawXLib::IMxDrawPoints* points, double dStartTangentX, double dStartTangentY, double dEndTangentX, double dEndTangentY);

    /*
    Method DrawText

    method DrawText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight);

    /*
    Method DrawText

    method DrawText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation);

    /*
    Method DrawText

    method DrawText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode);

    /*
    Method DrawText

    method DrawText
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode, MxDrawXLib::McVerticalAlignment verticalMode);

    /*
    Method DrawWipeout

    method DrawWipeout
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawWipeout(MxDrawXLib::IMxDrawPoints* points);

    /*
    Method DrawXline

    method DrawXline
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DrawXline(double dX1, double dY1, double dX2, double dY2);

    /*
    Method SetColorIndex

    method SetColorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetColorIndex(int lIndex);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawPrint : public QAxObject
{
public:
    MxDrawPrint(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{6f5056d0-c6cd-436c-b1e0-44bcf8659a85}"));
    }

    MxDrawPrint(IMxDrawPrint *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CorrectPrintPageMargin

    property CorrectPrintPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool CorrectPrintPageMargin() const; //Returns the value of CorrectPrintPageMargin
    inline void SetCorrectPrintPageMargin(bool value); //Sets the value of the CorrectPrintPageMargin property

    /*
    Property DocName

    property DocName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString DocName() const; //Returns the value of DocName
    inline void SetDocName(const QString& value); //Sets the value of the DocName property

    /*
    Property Flag

    property Flag
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int Flag() const; //Returns the value of Flag
    inline void SetFlag(int value); //Sets the value of the Flag property

    /*
    Property LayoutName

    property LayoutName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LayoutName() const; //Returns the value of LayoutName
    inline void SetLayoutName(const QString& value); //Sets the value of the LayoutName property

    /*
    Property PaperName

    property PaperName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString PaperName() const; //Returns the value of PaperName
    inline void SetPaperName(const QString& value); //Sets the value of the PaperName property

    /*
    Property PrintConfig

    property PrintConfig
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString PrintConfig() const; //Returns the value of PrintConfig
    inline void SetPrintConfig(const QString& value); //Sets the value of the PrintConfig property

    /*
    Property PrintDirection

    property PrintDirection
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int PrintDirection() const; //Returns the value of PrintDirection
    inline void SetPrintDirection(int value); //Sets the value of the PrintDirection property

    /*
    Property PrintLineWidth

    property PrintLineWidth
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PrintLineWidth() const; //Returns the value of PrintLineWidth
    inline void SetPrintLineWidth(bool value); //Sets the value of the PrintLineWidth property

    /*
    Property PrintName

    property PrintName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString PrintName() const; //Returns the value of PrintName
    inline void SetPrintName(const QString& value); //Sets the value of the PrintName property

    /*
    Property dBottomPageMargin

    property dBottomPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double dBottomPageMargin() const; //Returns the value of dBottomPageMargin
    inline void setDBottomPageMargin(double value); //Sets the value of the dBottomPageMargin property

    /*
    Property dLeftPageMargin

    property dLeftPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double dLeftPageMargin() const; //Returns the value of dLeftPageMargin
    inline void setDLeftPageMargin(double value); //Sets the value of the dLeftPageMargin property

    /*
    Property dRightPageMargin

    property dRightPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double dRightPageMargin() const; //Returns the value of dRightPageMargin
    inline void setDRightPageMargin(double value); //Sets the value of the dRightPageMargin property

    /*
    Property dTopPageMargin

    property dTopPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double dTopPageMargin() const; //Returns the value of dTopPageMargin
    inline void setDTopPageMargin(double value); //Sets the value of the dTopPageMargin property

    /*
    Method AddPageComment

    method AddPageComment
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool AddPageComment(const QString& sText, const QString& sFont, double iFontSize, int pos);

    /*
    Method BatchPrintDialog

    method BatchPrintDialog
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool BatchPrintDialog(MxDrawXLib::IMxDrawResbuf* pParam);

    /*
    Method BeginNestedPrint

    method BeginNestedPrint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool BeginNestedPrint();

    /*
    Method EndNestedPrint

    method EndNestedPrint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool EndNestedPrint();

    /*
    Method Print

    method Print
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Print(double dX1, double dY1, double dX2, double dY2);

    /*
    Method Print2

    method Print2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Print2(double dCenX, double dCenY, double dScale);

    /*
    Method PrintAll

    method PrintAll
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PrintAll();

    /*
    Method PrintDialog

    method PrintDialog
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void PrintDialog();

    /*
    Method PrintHtml

    method PrintHtml
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PrintHtml(bool isShowPrintDialog);

    /*
    Method PrintScreen

    method PrintScreen
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool PrintScreen();

    /*
    Method SetData

    method SetData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetData(MxDrawXLib::IMxDrawResbuf* pData);

    /*
    Method UseDefaultPageMargin

    method UseDefaultPageMargin
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool UseDefaultPageMargin(bool isUse);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawImageMark : public QAxObject
{
public:
    MxDrawImageMark(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{804ec926-0fae-4dbd-a937-6825b3014414}"));
    }

    MxDrawImageMark(IMxDrawImageMark *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Angle

    property Angle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Angle() const; //Returns the value of Angle
    inline void SetAngle(double value); //Sets the value of the Angle property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Height

    property Height
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property ImageFile

    property ImageFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ImageFile() const; //Returns the value of ImageFile
    inline void SetImageFile(const QString& value); //Sets the value of the ImageFile property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property IsCDCDraw

    property IsCDCDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsCDCDraw() const; //Returns the value of IsCDCDraw
    inline void SetIsCDCDraw(bool value); //Sets the value of the IsCDCDraw property

    /*
    Property IsDrawFlag

    property IsDrawFlag
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool IsDrawFlag() const; //Returns the value of IsDrawFlag
    inline void SetIsDrawFlag(bool value); //Sets the value of the IsDrawFlag property

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    property position
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property Scale

    property Scale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Scale() const; //Returns the value of Scale
    inline void SetScale(double value); //Sets the value of the Scale property

    /*
    Property Text

    property Text
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextHeight

    property TextHeight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextHeight() const; //Returns the value of TextHeight
    inline void SetTextHeight(double value); //Sets the value of the TextHeight property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property TwinkeImageFile

    property TwinkeImageFile
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TwinkeImageFile() const; //Returns the value of TwinkeImageFile
    inline void SetTwinkeImageFile(const QString& value); //Sets the value of the TwinkeImageFile property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property Width

    property Width
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Width() const; //Returns the value of Width
    inline void SetWidth(double value); //Sets the value of the Width property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method ClearImageData

    method ClearImageData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearImageData();

    /*
    Method ClearTwinkeImageData

    method ClearTwinkeImageData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ClearTwinkeImageData();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method ReadImageData

    method ReadImageData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ReadImageData(const QString& pszFile);

    /*
    Method ReadTwinkeImageData

    method ReadTwinkeImageData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool ReadTwinkeImageData(const QString& pszFiles);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawUiPrBase : public QAxObject
{
public:
    MxDrawUiPrBase(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{02b9356b-d713-452c-b8b3-b13c20ae13f9}"));
    }

    MxDrawUiPrBase(IMxDrawUiPrBase *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawUiPrAngle : public QAxObject
{
public:
    MxDrawUiPrAngle(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{d8092ab4-a515-4ac6-ae0d-3776857d9097}"));
    }

    MxDrawUiPrAngle(IMxDrawUiPrAngle *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property angleType

    property angleType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrMcUiPrAngleType angleType() const; //Returns the value of angleType
    inline void setAngleType(MxDrawXLib::McUiPrMcUiPrAngleType value); //Sets the value of the angleType property

    /*
    Property basePoint

    property basePoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePoint() const; //Returns the value of basePoint
    inline void setBasePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePoint property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Property precision

    property precision
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int precision() const; //Returns the value of precision
    inline void setPrecision(int value); //Sets the value of the precision property

    /*
    Property unit

    property unit
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int unit() const; //Returns the value of unit
    inline void setUnit(int value); //Sets the value of the unit property

    /*
    Property useBasePt

    property useBasePt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool useBasePt() const; //Returns the value of useBasePt
    inline void setUseBasePt(bool value); //Sets the value of the useBasePt property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setDefault

    method setDefault
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setDefault(double def, const QString& pszDefAngPrompt);

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawUiPrDist : public QAxObject
{
public:
    MxDrawUiPrDist(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{cc86b28f-0edc-42ff-a1eb-b5194a68e4f9}"));
    }

    MxDrawUiPrDist(IMxDrawUiPrDist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property basePt

    property basePt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePt() const; //Returns the value of basePt
    inline void setBasePt(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePt property

    /*
    Property distType

    property distType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrMcUiPrDoubleType distType() const; //Returns the value of distType
    inline void setDistType(MxDrawXLib::McUiPrMcUiPrDoubleType value); //Sets the value of the distType property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Property precision

    property precision
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int precision() const; //Returns the value of precision
    inline void setPrecision(int value); //Sets the value of the precision property

    /*
    Property useBasePt

    property useBasePt
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool useBasePt() const; //Returns the value of useBasePt
    inline void setUseBasePt(bool value); //Sets the value of the useBasePt property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setDefault

    method setDefault
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setDefault(double def);

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method setRange

    method setRange
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setRange(double dMin, double dMax);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawUiPrDouble : public QAxObject
{
public:
    MxDrawUiPrDouble(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{c7c985fe-6cd3-40f4-a943-e704c82d7c95}"));
    }

    MxDrawUiPrDouble(IMxDrawUiPrDouble *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property doubleType

    property doubleType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrMcUiPrDoubleType doubleType() const; //Returns the value of doubleType
    inline void setDoubleType(MxDrawXLib::McUiPrMcUiPrDoubleType value); //Sets the value of the doubleType property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Property precision

    property precision
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int precision() const; //Returns the value of precision
    inline void setPrecision(int value); //Sets the value of the precision property

    /*
    Property unit

    property unit
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int unit() const; //Returns the value of unit
    inline void setUnit(int value); //Sets the value of the unit property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setDefault

    method setDefault
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setDefault(double def);

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method setRange

    method setRange
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setRange(double dMin, double dMax);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawUiPrEntity : public QAxObject
{
public:
    MxDrawUiPrEntity(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{dab7f310-1519-4131-80ac-918b4564a213}"));
    }

    MxDrawUiPrEntity(IMxDrawUiPrEntity *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property filterLockedLayers

    property filterLockedLayers
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool filterLockedLayers() const; //Returns the value of filterLockedLayers
    inline void setFilterLockedLayers(bool value); //Sets the value of the filterLockedLayers property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method Entity

    method Entity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEntity* Entity();

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method pickPoint

    method pickPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* pickPoint();

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method setFilter

    method setFilter
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setFilter(MxDrawXLib::IMxDrawResbuf* pFilter);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawUiPrInt : public QAxObject
{
public:
    MxDrawUiPrInt(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{613c63c3-5614-443e-a420-6df8009025a9}"));
    }

    MxDrawUiPrInt(IMxDrawUiPrInt *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property intType

    property intType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrMcUiPrDoubleType intType() const; //Returns the value of intType
    inline void setIntType(MxDrawXLib::McUiPrMcUiPrDoubleType value); //Sets the value of the intType property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setDefault

    method setDefault
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setDefault(int def);

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method setRange

    method setRange
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setRange(int lMin, int lMax);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawUiPrKeyWord : public QAxObject
{
public:
    MxDrawUiPrKeyWord(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{7829d46c-7a7f-4bbb-9f14-84a3d6ce4abf}"));
    }

    MxDrawUiPrKeyWord(IMxDrawUiPrKeyWord *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DynamicInputType

    property  DynamicInputType
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McUiPrDynamicInputType DynamicInputType() const; //Returns the value of DynamicInputType
    inline void SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value); //Sets the value of the DynamicInputType property

    /*
    Property isAllowNone

    property isAllowNone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isAllowNone() const; //Returns the value of isAllowNone
    inline void setIsAllowNone(bool value); //Sets the value of the isAllowNone property

    /*
    Property keyWords

    property  keyWords
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWords() const; //Returns the value of keyWords
    inline void setKeyWords(const QString& value); //Sets the value of the keyWords property

    /*
    Property message

    property  message
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString message() const; //Returns the value of message
    inline void setMessage(const QString& value); //Sets the value of the message property

    /*
    Method InitUserDraw

    method InitUserDraw
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* InitUserDraw(const QString& sGuid);

    /*
    Method getExData

    method getExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* getExData();

    /*
    Method go

    method go
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline McUiPrStatus go();

    /*
    Method isKeyWordPicked

    method isKeyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool isKeyWordPicked(const QString& matchKeyWord);

    /*
    Method keyWordPicked

    method keyWordPicked
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString keyWordPicked();

    /*
    Method setDefault

    method setDefault
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setDefault(const QString& def, const QString& pszDefKeyPrompt);

    /*
    Method setExData

    method setExData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void setExData(MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method value

    method value
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString value();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawCompare : public QAxObject
{
public:
    MxDrawCompare(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{4029716f-5f16-455c-b6ef-014289f4eaa1}"));
    }

    MxDrawCompare(IMxDrawCompare *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Bound

    property Bound
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* Bound() const; //Returns the value of Bound
    inline void SetBound(MxDrawXLib::IMxDrawPoints* value); //Sets the value of the Bound property

    /*
    Method Do

    method Do
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Do(MxDrawXLib::IMxDrawDatabase* pSrc, MxDrawXLib::IMxDrawDatabase* pNew);

    /*
    Method Do

    method Do
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Do(MxDrawXLib::IMxDrawDatabase* pSrc, MxDrawXLib::IMxDrawDatabase* pNew, MxDrawXLib::IMxDrawResbuf* filterData);

    /*
    Method DrawFlag

    method DrawFlag
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void DrawFlag(double dScale, bool isNew);

    /*
    Method GetCurveIdsOfTheDifferent

    method GetCurveIdsOfTheDifferent
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetCurveIdsOfTheDifferent();

    /*
    Method GetIsErase

    method GetIsErase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetIsErase(qlonglong lId);

    /*
    Method GetPos

    method GetPos
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* GetPos(qlonglong lId);

    /*
    Method SetTheOffsetMatrix

    method SetTheOffsetMatrix
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTheOffsetMatrix(MxDrawXLib::IMxDrawMatrix3d* pMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawModifyTheColor : public QAxObject
{
public:
    MxDrawModifyTheColor(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{971de7aa-930e-4fa2-84f2-9230d30c16ce}"));
    }

    MxDrawModifyTheColor(IMxDrawModifyTheColor *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Do

    method Do
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Do(MxDrawXLib::IMxDrawDatabase* pDatabase, int lRGB);

    /*
    Method DoEntity

    method DoEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void DoEntity(MxDrawXLib::IMxDrawResbuf* pEntitys, int lRGB);

    /*
    Method Restore

    method Restore
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Restore();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawComment : public QAxObject
{
public:
    MxDrawComment(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{d58231aa-c556-460a-9b0b-76914e66a9ef}"));
    }

    MxDrawComment(IMxDrawComment *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ArrowType

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int ArrowType() const; //Returns the value of ArrowType
    inline void SetArrowType(int value); //Sets the value of the ArrowType property

    /*
    Property Bounding

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* Bounding() const; //Returns the value of Bounding
    inline void SetBounding(MxDrawXLib::IMxDrawPoints* value); //Sets the value of the Bounding property

    /*
    Property BoundingBoxType

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int BoundingBoxType() const; //Returns the value of BoundingBoxType
    inline void SetBoundingBoxType(int value); //Sets the value of the BoundingBoxType property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property EdgeNumber

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int EdgeNumber() const; //Returns the value of EdgeNumber
    inline void SetEdgeNumber(int value); //Sets the value of the EdgeNumber property

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Position

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Position() const; //Returns the value of Position
    inline void SetPosition(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Position property

    /*
    Property ShapRadius

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double ShapRadius() const; //Returns the value of ShapRadius
    inline void SetShapRadius(double value); //Sets the value of the ShapRadius property

    /*
    Property Text

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextHeight

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double TextHeight() const; //Returns the value of TextHeight
    inline void SetTextHeight(double value); //Sets the value of the TextHeight property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property basePoint

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* basePoint() const; //Returns the value of basePoint
    inline void setBasePoint(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the basePoint property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawChange : public QAxObject
{
public:
    MxDrawChange(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{01ad781b-450a-46d7-8193-7ef6e1233dd2}"));
    }

    MxDrawChange(IMxDrawChange *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method ToArc

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawArc* ToArc(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToAttribute

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawAttribute* ToAttribute(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToBlockReference

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawBlockReference* ToBlockReference(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToCircle

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCircle* ToCircle(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToCustomEntity

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawCustomEntity* ToCustomEntity(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimAligned

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimAligned* ToDimAligned(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimAngular

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimAngular* ToDimAngular(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimDiametric

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimDiametric* ToDimDiametric(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimRadial

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimRadial* ToDimRadial(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimRotated

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimRotated* ToDimRotated(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToDimension

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDimension* ToDimension(MxDrawXLib::IMxDrawEntity* ppIn);

    /*
    Method ToEllipse

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawEllipse* ToEllipse(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToHatch

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawHatch* ToHatch(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToImageMark

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawImageMark* ToImageMark(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToLine

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawLine* ToLine(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToMText

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMText* ToMText(MxDrawXLib::IMxDrawEntity* pEntity);

    /*
    Method ToMxDrawComment

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawComment* ToMxDrawComment(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToPolyline

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPolyline* ToPolyline(MxDrawXLib::IMxDrawEntity* pEnt);

    /*
    Method ToRasterImage

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawRasterImage* ToRasterImage(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToRay

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawRay* ToRay(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToSolid

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawSolid* ToSolid(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToSpline

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawSpline* ToSpline(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method ToText

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawText* ToText(MxDrawXLib::IMxDrawEntity* pEntity);

    /*
    Method ToXline

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawXline* ToXline(MxDrawXLib::IMxDrawEntity* pIn);

    /*
    Method toPoint

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* toPoint(MxDrawXLib::IMxDrawEntity* pIn);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawQrCode : public QAxObject
{
public:
    MxDrawQrCode(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{b1932686-163e-4732-b54c-c4bdbaa67445}"));
    }

    MxDrawQrCode(IMxDrawQrCode *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Center

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoint* Center() const; //Returns the value of Center
    inline void SetCenter(MxDrawXLib::IMxDrawPoint* value); //Sets the value of the Center property

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property Rotation

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Rotation() const; //Returns the value of Rotation
    inline void SetRotation(double value); //Sets the value of the Rotation property

    /*
    Property Scale

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double Scale() const; //Returns the value of Scale
    inline void SetScale(double value); //Sets the value of the Scale property

    /*
    Property Text

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawAnimation : public QAxObject
{
public:
    MxDrawAnimation(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{e2dd26bc-d337-40f1-a659-bee3c436d782}"));
    }

    MxDrawAnimation(IMxDrawAnimation *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Draw

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Draw(qlonglong lId);

    /*
    Method Draw2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Draw2(const QString& pszHandle);

    /*
    Method EndDraw

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void EndDraw();

    /*
    Method GetAnimationEntity

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* GetAnimationEntity(qlonglong lId);

    /*
    Method GetAnimationEntity2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* GetAnimationEntity2(const QString& pszHandle);

    /*
    Method InitAnimationEntity

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void InitAnimationEntity(MxDrawXLib::IMxDrawEntity* pEnt);

    /*
    Method InitAnimationEntity2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void InitAnimationEntity2(const QString& pszHandle);

    /*
    Method Remove

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Remove(qlonglong lId);

    /*
    Method Remove2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Remove2(const QString& pszHandle);

    /*
    Method SetTwinkeColor

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTwinkeColor(MxDrawXLib::IMxDrawResbuf* colors);

    /*
    Method SetTwinkeTime

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetTwinkeTime(int lTimer);

    /*
    Method StartDraw

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void StartDraw();

    /*
    Method Stop

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Stop(qlonglong lId, bool isStop);

    /*
    Method Stop2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Stop2(const QString& pszHandle, bool isStop);

    /*
    Method StopAllTwinke

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void StopAllTwinke();

    /*
    Method StopTwinke

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool StopTwinke(qlonglong lId);

    /*
    Method StopTwinke2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool StopTwinke2(const QString& pszHandle);

    /*
    Method Twinke

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Twinke(qlonglong lId);

    /*
    Method Twinke2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Twinke2(const QString& pszHandle);

    /*
    Method TwinkeEx

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool TwinkeEx(qlonglong lId, int lCount);

    /*
    Method TwinkeEx2

    For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool TwinkeEx2(const QString& pszHandle, int lCount);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class MXDRAWXLIB_EXPORT MxDrawProxyEntity : public QAxObject
{
public:
    MxDrawProxyEntity(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{c7251d18-b58b-4f2a-b935-07a92d947567}"));
    }

    MxDrawProxyEntity(IMxDrawProxyEntity *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Database

    property Database
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDatabase* Database() const; //Returns the value of Database

    /*
    Property Dxf0

    property Dxf0
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Dxf0() const; //Returns the value of Dxf0

    /*
    Property HasExtensionDictionary

    property HasExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool HasExtensionDictionary() const; //Returns the value of HasExtensionDictionary

    /*
    Property Hyperlinks

    property Hyperlinks
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Hyperlinks() const; //Returns the value of Hyperlinks
    inline void SetHyperlinks(const QString& value); //Sets the value of the Hyperlinks property

    /*
    Property InteriorPoint

    property InteriorPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorPoint() const; //Returns the value of InteriorPoint

    /*
    Property InteriorTmpPoint

    property InteriorTmpPoint
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong InteriorTmpPoint() const; //Returns the value of InteriorTmpPoint

    /*
    Property Layer

    property Layer
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString Layer() const; //Returns the value of Layer
    inline void SetLayer(const QString& value); //Sets the value of the Layer property

    /*
    Property LineType

    property Linetype
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString LineType() const; //Returns the value of LineType
    inline void SetLineType(const QString& value); //Sets the value of the LineType property

    /*
    Property LinetypeScale

    property LinetypeScale
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double LinetypeScale() const; //Returns the value of LinetypeScale
    inline void SetLinetypeScale(double value); //Sets the value of the LinetypeScale property

    /*
    Property Lineweight

    property Lineweight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McLineWeight Lineweight() const; //Returns the value of Lineweight
    inline void SetLineweight(MxDrawXLib::McLineWeight value); //Sets the value of the Lineweight property

    /*
    Property Normal

    property Normal
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawVector3d* Normal() const; //Returns the value of Normal
    inline void SetNormal(MxDrawXLib::IMxDrawVector3d* value); //Sets the value of the Normal property

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property OwnerID

    property OwnerID
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline qlonglong OwnerID() const; //Returns the value of OwnerID

    /*
    Property TextStyle

    property TextStyle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString TextStyle() const; //Returns the value of TextStyle
    inline void SetTextStyle(const QString& value); //Sets the value of the TextStyle property

    /*
    Property TrueColor

    property TrueColor
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcCmColor* TrueColor() const; //Returns the value of TrueColor
    inline void SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value); //Sets the value of the TrueColor property

    /*
    Property Visible

    property Visible
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property colorIndex

    property colorIndex
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::McColor colorIndex() const; //Returns the value of colorIndex
    inline void setColorIndex(MxDrawXLib::McColor value); //Sets the value of the colorIndex property

    /*
    Property handle

    property Handle
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString handle() const; //Returns the value of handle

    /*
    Property originalClassName

    property originalClassName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString originalClassName() const; //Returns the value of originalClassName

    /*
    Method AssertWriteEnabled

    method AssertWriteEnabled
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void AssertWriteEnabled();

    /*
    Method Clone

    method Clone
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawMcDbObject* Clone();

    /*
    Method Close

    method Close
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Close();

    /*
    Method Copy

    method Copy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline IDispatch* Copy();

    /*
    Method DeleteXData

    method DeleteXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool DeleteXData(const QString& sAppName);

    /*
    Method Erase

    method Erase
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Erase();

    /*
    Method GetAllAppName

    method GetAllAppName
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetAllAppName();

    /*
    Method GetBoundingBox

    method GetBoundingBox
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint);

    /*
    Method GetBoundingBox2

    method GetBoundingBox2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* GetBoundingBox2();

    /*
    Method GetExtensionDictionary

    method GetExtensionDictionary
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawDictionary* GetExtensionDictionary();

    /*
    Method GetProp

    method GetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetProp(const QString& pszName);

    /*
    Method GetXData

    method GetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawResbuf* GetXData(const QString& pAppName);

    /*
    Method GetxDataDouble

    method GetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataDouble(const QString& sAppName, int lItem, double& pRet);

    /*
    Method GetxDataDouble2

    method GetxDataDouble2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline double GetxDataDouble2(const QString& sAppName, int lItem);

    /*
    Method GetxDataLong

    method GetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataLong(const QString& sAppName, int lItem, int& pRet);

    /*
    Method GetxDataLong2

    method GetxDataLong2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline int GetxDataLong2(const QString& sAppName, int lItem);

    /*
    Method GetxDataString

    method GetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool GetxDataString(const QString& sAppName, int lItem, QString& pRet);

    /*
    Method GetxDataString2

    method GetxDataString2
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline QString GetxDataString2(const QString& sAppName, int lItem);

    /*
    Method Highlight

    method Highlight
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Highlight(bool isHighlight);

    /*
    Method IntersectWith

    method IntersectWith
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline MxDrawXLib::IMxDrawPoints* IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption);

    /*
    Method Mirror

    method Mirror
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2);

    /*
    Method Move

    method Move
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint);

    /*
    Method Rotate

    method Rotate
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle);

    /*
    Method ScaleEntity

    method ScaleEntity
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor);

    /*
    Method SetProp

    method SetProp
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal);

    /*
    Method SetXData

    method SetXData
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void SetXData(MxDrawXLib::IMxDrawResbuf* pXData);

    /*
    Method SetxDataDouble

    method SetxDataDouble
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataDouble(const QString& sAppName, int lItem, double val);

    /*
    Method SetxDataLong

    method SetxDataLong
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataLong(const QString& sAppName, int lItem, int val);

    /*
    Method SetxDataString

    method SetxDataString
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline bool SetxDataString(const QString& sAppName, int lItem, const QString& val);

    /*
    Method TransformBy

    method TransformBy
For more information, see help context 0 in D:\Mxkd\MxDrawx86\MxDrawX.hlp.
    */
    inline void TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_MXDRAWXLIB_NOINLINES
inline bool _DMxDrawX::AutoActive() const
{
    QVariant qax_result = property("AutoActive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetAutoActive(bool value){ setProperty("AutoActive", QVariant(value)); }

inline bool _DMxDrawX::AutoZoomAll() const
{
    QVariant qax_result = property("AutoZoomAll");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetAutoZoomAll(bool value){ setProperty("AutoZoomAll", QVariant(value)); }

inline bool _DMxDrawX::BrowseMode() const
{
    QVariant qax_result = property("BrowseMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetBrowseMode(bool value){ setProperty("BrowseMode", QVariant(value)); }

inline int _DMxDrawX::CommandMessgaeModify() const
{
    QVariant qax_result = property("CommandMessgaeModify");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DMxDrawX::SetCommandMessgaeModify(int value){ setProperty("CommandMessgaeModify", QVariant(value)); }

inline double _DMxDrawX::CursorLong() const
{
    QVariant qax_result = property("CursorLong");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void _DMxDrawX::SetCursorLong(double value){ setProperty("CursorLong", QVariant(value)); }

inline double _DMxDrawX::CursorWidth() const
{
    QVariant qax_result = property("CursorWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void _DMxDrawX::SetCursorWidth(double value){ setProperty("CursorWidth", QVariant(value)); }

inline QString _DMxDrawX::DimStyle() const
{
    QVariant qax_result = property("DimStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetDimStyle(const QString& value){ setProperty("DimStyle", QVariant(value)); }

inline uint _DMxDrawX::DrawCADColor() const
{
    QVariant qax_result = property("DrawCADColor");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void _DMxDrawX::SetDrawCADColor(uint value){ setProperty("DrawCADColor", QVariant(value)); }

inline int _DMxDrawX::DrawCADColorIndex() const
{
    QVariant qax_result = property("DrawCADColorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DMxDrawX::SetDrawCADColorIndex(int value){ setProperty("DrawCADColorIndex", QVariant(value)); }

inline QColor _DMxDrawX::DrawColor() const
{
    QVariant qax_result = property("DrawColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void _DMxDrawX::SetDrawColor(const QColor& value){ setProperty("DrawColor", QVariant(value)); }

inline QString _DMxDrawX::DwgFilePath() const
{
    QVariant qax_result = property("DwgFilePath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetDwgFilePath(const QString& value){ setProperty("DwgFilePath", QVariant(value)); }

inline bool _DMxDrawX::DynToolTip() const
{
    QVariant qax_result = property("DynToolTip");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetDynToolTip(bool value){ setProperty("DynToolTip", QVariant(value)); }

inline int _DMxDrawX::DynToolTipTime() const
{
    QVariant qax_result = property("DynToolTipTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DMxDrawX::SetDynToolTipTime(int value){ setProperty("DynToolTipTime", QVariant(value)); }

inline bool _DMxDrawX::EditGripPoint() const
{
    QVariant qax_result = property("EditGripPoint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetEditGripPoint(bool value){ setProperty("EditGripPoint", QVariant(value)); }

inline bool _DMxDrawX::EnableClipboard() const
{
    QVariant qax_result = property("EnableClipboard");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetEnableClipboard(bool value){ setProperty("EnableClipboard", QVariant(value)); }

inline bool _DMxDrawX::EnableDeleteKey() const
{
    QVariant qax_result = property("EnableDeleteKey");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetEnableDeleteKey(bool value){ setProperty("EnableDeleteKey", QVariant(value)); }

inline bool _DMxDrawX::EnableDrawOrder() const
{
    QVariant qax_result = property("EnableDrawOrder");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetEnableDrawOrder(bool value){ setProperty("EnableDrawOrder", QVariant(value)); }

inline bool _DMxDrawX::EnableIntelliSelect() const
{
    QVariant qax_result = property("EnableIntelliSelect");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetEnableIntelliSelect(bool value){ setProperty("EnableIntelliSelect", QVariant(value)); }

inline bool _DMxDrawX::EnableMouseMoveView() const
{
    QVariant qax_result = property("EnableMouseMoveView");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetEnableMouseMoveView(bool value){ setProperty("EnableMouseMoveView", QVariant(value)); }

inline bool _DMxDrawX::EnableOleShow() const
{
    QVariant qax_result = property("EnableOleShow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetEnableOleShow(bool value){ setProperty("EnableOleShow", QVariant(value)); }

inline int _DMxDrawX::EnableOpenCmd() const
{
    QVariant qax_result = property("EnableOpenCmd");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DMxDrawX::SetEnableOpenCmd(int value){ setProperty("EnableOpenCmd", QVariant(value)); }

inline int _DMxDrawX::EnablePrintCmd() const
{
    QVariant qax_result = property("EnablePrintCmd");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DMxDrawX::SetEnablePrintCmd(int value){ setProperty("EnablePrintCmd", QVariant(value)); }

inline bool _DMxDrawX::EnableUndo() const
{
    QVariant qax_result = property("EnableUndo");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetEnableUndo(bool value){ setProperty("EnableUndo", QVariant(value)); }

inline bool _DMxDrawX::HightQualityDraw() const
{
    QVariant qax_result = property("HightQualityDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetHightQualityDraw(bool value){ setProperty("HightQualityDraw", QVariant(value)); }

inline IDispatch* _DMxDrawX::ImpDynWorldDrawFun() const
{
    QVariant qax_result = property("ImpDynWorldDrawFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImpDynWorldDrawFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpDynWorldDrawFun", QVariant(typeId, &value));
}

inline IDispatch* _DMxDrawX::ImpExplodeFun() const
{
    QVariant qax_result = property("ImpExplodeFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImpExplodeFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpExplodeFun", QVariant(typeId, &value));
}

inline IDispatch* _DMxDrawX::ImpGetGeomExtentsFun() const
{
    QVariant qax_result = property("ImpGetGeomExtentsFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImpGetGeomExtentsFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpGetGeomExtentsFun", QVariant(typeId, &value));
}

inline IDispatch* _DMxDrawX::ImpGetGripPointsFun() const
{
    QVariant qax_result = property("ImpGetGripPointsFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImpGetGripPointsFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpGetGripPointsFun", QVariant(typeId, &value));
}

inline IDispatch* _DMxDrawX::ImpGetOsnapPointsFun() const
{
    QVariant qax_result = property("ImpGetOsnapPointsFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImpGetOsnapPointsFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpGetOsnapPointsFun", QVariant(typeId, &value));
}

inline IDispatch* _DMxDrawX::ImpHyperlinkClickFun() const
{
    QVariant qax_result = property("ImpHyperlinkClickFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImpHyperlinkClickFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpHyperlinkClickFun", QVariant(typeId, &value));
}

inline IDispatch* _DMxDrawX::ImpInputPointToolTipFun() const
{
    QVariant qax_result = property("ImpInputPointToolTipFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImpInputPointToolTipFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpInputPointToolTipFun", QVariant(typeId, &value));
}

inline IDispatch* _DMxDrawX::ImpMoveGripPointsAtFun() const
{
    QVariant qax_result = property("ImpMoveGripPointsAtFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImpMoveGripPointsAtFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpMoveGripPointsAtFun", QVariant(typeId, &value));
}

inline IDispatch* _DMxDrawX::ImpTransformByFun() const
{
    QVariant qax_result = property("ImpTransformByFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImpTransformByFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpTransformByFun", QVariant(typeId, &value));
}

inline IDispatch* _DMxDrawX::ImplementCommandEventFun() const
{
    QVariant qax_result = property("ImplementCommandEventFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImplementCommandEventFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImplementCommandEventFun", QVariant(typeId, &value));
}

inline IDispatch* _DMxDrawX::ImplementCustomEvent() const
{
    QVariant qax_result = property("ImplementCustomEvent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImplementCustomEvent(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImplementCustomEvent", QVariant(typeId, &value));
}

inline IDispatch* _DMxDrawX::ImplementMouseEventFun() const
{
    QVariant qax_result = property("ImplementMouseEventFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void _DMxDrawX::SetImplementMouseEventFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImplementMouseEventFun", QVariant(typeId, &value));
}

inline QString _DMxDrawX::Iniset() const
{
    QVariant qax_result = property("Iniset");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetIniset(const QString& value){ setProperty("Iniset", QVariant(value)); }

inline QString _DMxDrawX::InitUrl() const
{
    QVariant qax_result = property("InitUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetInitUrl(const QString& value){ setProperty("InitUrl", QVariant(value)); }

inline bool _DMxDrawX::IsDrawCoord() const
{
    QVariant qax_result = property("IsDrawCoord");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetIsDrawCoord(bool value){ setProperty("IsDrawCoord", QVariant(value)); }

inline bool _DMxDrawX::IsFirstRunPan() const
{
    QVariant qax_result = property("IsFirstRunPan");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetIsFirstRunPan(bool value){ setProperty("IsFirstRunPan", QVariant(value)); }

inline int _DMxDrawX::IsRuningAtIE() const
{
    QVariant qax_result = property("IsRuningAtIE");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DMxDrawX::SetIsRuningAtIE(int value){ setProperty("IsRuningAtIE", QVariant(value)); }

inline QString _DMxDrawX::LayerName() const
{
    QVariant qax_result = property("LayerName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetLayerName(const QString& value){ setProperty("LayerName", QVariant(value)); }

inline QString _DMxDrawX::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double _DMxDrawX::LineWidth() const
{
    QVariant qax_result = property("LineWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void _DMxDrawX::SetLineWidth(double value){ setProperty("LineWidth", QVariant(value)); }

inline QString _DMxDrawX::PatternDefinition() const
{
    QVariant qax_result = property("PatternDefinition");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetPatternDefinition(const QString& value){ setProperty("PatternDefinition", QVariant(value)); }

inline QString _DMxDrawX::ResPath() const
{
    QVariant qax_result = property("ResPath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetResPath(const QString& value){ setProperty("ResPath", QVariant(value)); }

inline bool _DMxDrawX::ShowCommandWindow() const
{
    QVariant qax_result = property("ShowCommandWindow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetShowCommandWindow(bool value){ setProperty("ShowCommandWindow", QVariant(value)); }

inline bool _DMxDrawX::ShowMenuBar() const
{
    QVariant qax_result = property("ShowMenuBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetShowMenuBar(bool value){ setProperty("ShowMenuBar", QVariant(value)); }

inline bool _DMxDrawX::ShowModelBar() const
{
    QVariant qax_result = property("ShowModelBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetShowModelBar(bool value){ setProperty("ShowModelBar", QVariant(value)); }

inline bool _DMxDrawX::ShowPropertyWindow() const
{
    QVariant qax_result = property("ShowPropertyWindow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetShowPropertyWindow(bool value){ setProperty("ShowPropertyWindow", QVariant(value)); }

inline bool _DMxDrawX::ShowRulerWindow() const
{
    QVariant qax_result = property("ShowRulerWindow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetShowRulerWindow(bool value){ setProperty("ShowRulerWindow", QVariant(value)); }

inline bool _DMxDrawX::ShowStatusBar() const
{
    QVariant qax_result = property("ShowStatusBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetShowStatusBar(bool value){ setProperty("ShowStatusBar", QVariant(value)); }

inline bool _DMxDrawX::ShowToolBars() const
{
    QVariant qax_result = property("ShowToolBars");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetShowToolBars(bool value){ setProperty("ShowToolBars", QVariant(value)); }

inline bool _DMxDrawX::SingleSelection() const
{
    QVariant qax_result = property("SingleSelection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetSingleSelection(bool value){ setProperty("SingleSelection", QVariant(value)); }

inline QString _DMxDrawX::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline int _DMxDrawX::Theme() const
{
    QVariant qax_result = property("Theme");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DMxDrawX::SetTheme(int value){ setProperty("Theme", QVariant(value)); }

inline QString _DMxDrawX::ToolBarFiles() const
{
    QVariant qax_result = property("ToolBarFiles");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetToolBarFiles(const QString& value){ setProperty("ToolBarFiles", QVariant(value)); }

inline bool _DMxDrawX::UseArrowCursor() const
{
    QVariant qax_result = property("UseArrowCursor");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DMxDrawX::SetUseArrowCursor(bool value){ setProperty("UseArrowCursor", QVariant(value)); }

inline QString _DMxDrawX::UserData() const
{
    QVariant qax_result = property("UserData");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetUserData(const QString& value){ setProperty("UserData", QVariant(value)); }

inline QString _DMxDrawX::UserName() const
{
    QVariant qax_result = property("UserName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetUserName(const QString& value){ setProperty("UserName", QVariant(value)); }

inline QString _DMxDrawX::UserPhone() const
{
    QVariant qax_result = property("UserPhone");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetUserPhone(const QString& value){ setProperty("UserPhone", QVariant(value)); }

inline QString _DMxDrawX::UserSoftwareName() const
{
    QVariant qax_result = property("UserSoftwareName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetUserSoftwareName(const QString& value){ setProperty("UserSoftwareName", QVariant(value)); }

inline QColor _DMxDrawX::ViewColor() const
{
    QVariant qax_result = property("ViewColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void _DMxDrawX::SetViewColor(const QColor& value){ setProperty("ViewColor", QVariant(value)); }

inline QString _DMxDrawX::Watermark() const
{
    QVariant qax_result = property("Watermark");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DMxDrawX::SetWatermark(const QString& value){ setProperty("Watermark", QVariant(value)); }

inline void _DMxDrawX::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline bool _DMxDrawX::AddCurrentSelect(qlonglong lId, bool isShowGrid, bool isUpDisplay)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&isShowGrid, (void*)&isUpDisplay};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::AddDimStyle(const QString& pszName, const QString& pszDoubleData, const QString& pszIntData, const QString& pszStringData, const QString& pszIdData)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszDoubleData, (void*)&pszIntData, (void*)&pszStringData, (void*)&pszIdData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::AddLayer(const QString& pszName)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::AddLinetype(const QString& pszName, const QString& pszLineDefine)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszLineDefine};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::AddLinetypeEx(const QString& pszName, const QString& pszLineDefine, const QString& pszTextStyle)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszLineDefine, (void*)&pszTextStyle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool _DMxDrawX::AddPatternDefinition(const QString& pszName, const QString& pszPatternDefinition)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszPatternDefinition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::AddTextStyle1(const QString& pszName, const QString& pszFileName, const QString& pszBigFontFileName, double dXScale)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszFileName, (void*)&pszBigFontFileName, (void*)&dXScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::AddTextStyle2(const QString& pszName, const QString& pszTrueTypeFontName, double dXScale)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszTrueTypeFontName, (void*)&dXScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::Cal(const QString& pszFunName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::Call(const QString& pszFunName, const QString& pszFunParam)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&pszFunParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::CallDoubleParam1(const QString& pszFunName, double dV)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&dV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::CallDoubleParam2(const QString& pszFunName, double dV1, double dV2)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&dV1, (void*)&dV2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::CallDoubleParam3(const QString& pszFunName, double dV1, double dV2, double dV3)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&dV1, (void*)&dV2, (void*)&dV3};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::CallEx(const QString& pszFunName, IDispatch* pParam)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::CallLongParam1(const QString& pszFunName, int lV)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&lV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::CallLongParam2(const QString& pszFunName, int lV1, int lV2)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&lV1, (void*)&lV2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::CallLongParam3(const QString& pszFunName, int lV1, int lV2, int lV3)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&lV1, (void*)&lV2, (void*)&lV3};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::CallPointParam1(const QString& pszFunName, double dX, double dY, double dZ)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&dX, (void*)&dY, (void*)&dZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::CallPointParam2(const QString& pszFunName, double dX1, double dY1, double dZ1, double dX2, double dY2, double dZ2)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&dX1, (void*)&dY1, (void*)&dZ1, (void*)&dX2, (void*)&dY2, (void*)&dZ2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool _DMxDrawX::Clear(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void _DMxDrawX::ClearCurrentSelect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void _DMxDrawX::ClearDisplayBuffer()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void _DMxDrawX::ClearPreviousInputPoint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void _DMxDrawX::ClearUndoData()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline bool _DMxDrawX::CreateGroup(const QString& pszName, IDispatch* pAryId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pAryId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::CustomEventParam()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline int _DMxDrawX::CustomInsertBlock(const QString& pszDwgFileName, const QString& pszBlockName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFileName, (void*)&pszBlockName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool _DMxDrawX::DeleteGroup(const QString& pszName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool _DMxDrawX::DeleteGroupEx(qlonglong lEntId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lEntId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline bool _DMxDrawX::DoCommand(int iCommandId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iCommandId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline double _DMxDrawX::DocLongToViewCoord(double dLen)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dLen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::DocToScreenCoord(double dX, double dY)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::DocToViewCoord(double dX, double dY)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline QString _DMxDrawX::Download(const QString& pszWebFile)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszWebFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawArc1(double dCenterX, double dCenterY, double dRadius, double dStartAng, double dEndAng)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dRadius, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawArc2(double dStartPointX, double dStartPointY, double dMidPointX, double dMidPointY, double dEndPointX, double dEndPointY)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dMidPointX, (void*)&dMidPointY, (void*)&dEndPointX, (void*)&dEndPointY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dEndPointX, (void*)&dEndPointY, (void*)&dBulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawBlockReference(double dPosX, double dPosY, const QString& pszBlkName, double dScale, double dAng)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszBlkName, (void*)&dScale, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawCircle(double dCenterX, double dCenterY, double dRadius)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dRadius};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::DrawCustomEntity(const QString& pszGuid, const QString& pszBlkRecName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszGuid, (void*)&pszBlkRecName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawDimAligned(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dTextPositionX, double dTextPositionY)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dExtLine1PointX, (void*)&dExtLine1PointY, (void*)&dExtLine2PointX, (void*)&dExtLine2PointY, (void*)&dTextPositionX, (void*)&dTextPositionY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawDimAngular(double dAngleVertexX, double dAngleVertexY, double dFirstEndPointX, double dFirstEndPointY, double dSecondEndPointX, double dSecondEndPointY, double dTextPointX, double dTextPointY)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dAngleVertexX, (void*)&dAngleVertexY, (void*)&dFirstEndPointX, (void*)&dFirstEndPointY, (void*)&dSecondEndPointX, (void*)&dSecondEndPointY, (void*)&dTextPointX, (void*)&dTextPointY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawDimDiametric(double dChordPointX, double dChordPointY, double dFarChordPointX, double dFarChordPointY, double dLeaderLength)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dChordPointX, (void*)&dChordPointY, (void*)&dFarChordPointX, (void*)&dFarChordPointY, (void*)&dLeaderLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawDimOrdinate(double dDefinitionPointX, double dDefinitionPointY, double dDeaderEndPointX, double dDeaderEndPointY, bool isUseXAxis)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDefinitionPointX, (void*)&dDefinitionPointY, (void*)&dDeaderEndPointX, (void*)&dDeaderEndPointY, (void*)&isUseXAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawDimRadial(double dCenterX, double dCenterY, double dChordPointX, double dChordPointY, double dLeaderLength)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dChordPointX, (void*)&dChordPointY, (void*)&dLeaderLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawDimRotated(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dDimLineLocationX, double dDimLineLocationY, double dRotationAngle)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dExtLine1PointX, (void*)&dExtLine1PointY, (void*)&dExtLine2PointX, (void*)&dExtLine2PointY, (void*)&dDimLineLocationX, (void*)&dDimLineLocationY, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawEntity(IDispatch* pIn)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline bool _DMxDrawX::DrawEntityToJpg(qlonglong lId, const QString& sJpgFilePath, int iWidth, int iHeight, int lBkColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&sJpgFilePath, (void*)&iWidth, (void*)&iHeight, (void*)&lBkColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawHatchFromPoint(double dX, double dY, double dPatternScale)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY, (void*)&dPatternScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawImage(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFilePath)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&dScale, (void*)&dAng, (void*)&pszFilePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawImageMark(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFileName, const QString& pszTwinkeImageFiles, bool isSaveData)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&dScale, (void*)&dAng, (void*)&pszFileName, (void*)&pszTwinkeImageFiles, (void*)&isSaveData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline bool _DMxDrawX::DrawImageToBackground(const QString& sFileName, int lLeftUpX, int lLeftUpY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sFileName, (void*)&lLeftUpX, (void*)&lLeftUpY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawLine(double dX1, double dY1, double dX2, double dY2)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawMText(double dPosX, double dPosY, const QString& pszContents, double dHeight, double dWidth, double dRotation, int iAttachment)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszContents, (void*)&dHeight, (void*)&dWidth, (void*)&dRotation, (void*)&iAttachment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawPathToHatch(double dPatternScale)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPatternScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawPathToHatch2(double dPatternScale, const QString& sPatternFile, const QString& sPatternName, double dAngel)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPatternScale, (void*)&sPatternFile, (void*)&sPatternName, (void*)&dAngel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawPathToPolyline()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawPathToSpline()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawPoint(double dX, double dY)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2, (void*)&dX3, (void*)&dY3, (void*)&dX4, (void*)&dY4};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, int horizontalMode, int verticalMode)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation, (void*)&horizontalMode, (void*)&verticalMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline bool _DMxDrawX::DrawToJpg(const QString& sJpgFilePath, double dLBx, double dLBy, double dRTx, double dRTy, int lWidth, int lHeight, int lBkColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sJpgFilePath, (void*)&dLBx, (void*)&dLBy, (void*)&dRTx, (void*)&dRTy, (void*)&lWidth, (void*)&lHeight, (void*)&lBkColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline bool _DMxDrawX::DrawVectorCircle(double dCenX, double dCenY, double dR, int lColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dR, (void*)&lColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline bool _DMxDrawX::DrawVectorLine(double dX1, double dY1, double dX2, double dY2, int lColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2, (void*)&lColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline void _DMxDrawX::EnableGripPoint(bool bEnable)
{
    void *_a[] = {0, (void*)&bEnable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline bool _DMxDrawX::EnableSingleSelection(bool isEnable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&isEnable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool _DMxDrawX::EnableToolBarButton(const QString& pButtonName, bool isEnable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pButtonName, (void*)&isEnable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool _DMxDrawX::Erase(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline bool _DMxDrawX::ExprotPdf(const QString& sPdfFileName, double dPaperH, double dPaperW, const QString& pszTitle, bool isExportLayout)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sPdfFileName, (void*)&dPaperH, (void*)&dPaperW, (void*)&pszTitle, (void*)&isExportLayout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::FindEntAtPoint(double dX, double dY, IDispatch* pFilter)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY, (void*)&pFilter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::GetAllGroupName()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::GetAllLayoutName()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline void _DMxDrawX::GetBulidVersion(int& lMajor, int& lMinor)
{
    void *_a[] = {0, (void*)&lMajor, (void*)&lMinor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline QString _DMxDrawX::GetCurrentLayout()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline QString _DMxDrawX::GetCurrentPath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}

inline int _DMxDrawX::GetCursorCrossLong()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline int _DMxDrawX::GetCursorPickRect()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::GetCustomEntity(qlonglong lId)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::GetDatabase()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::GetEntity(const QString& pszPrompt)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszPrompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
    return qax_result;
}

inline int _DMxDrawX::GetEntityDrawOrder(qlonglong lId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::GetEntitysLastCmd()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
    return qax_result;
}

inline QString _DMxDrawX::GetExePath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
    return qax_result;
}

inline QString _DMxDrawX::GetFileName()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::GetGroup(const QString& pszGroupName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszGroupName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::GetImageSize(const QString& pszImageFile)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszImageFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::GetInputCursorPos()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
    return qax_result;
}

inline QString _DMxDrawX::GetLastError()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
    return qax_result;
}

inline QString _DMxDrawX::GetMTextContent(qlonglong lId)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
    return qax_result;
}

inline bool _DMxDrawX::GetMcDbDatabaseBound(double& pLbx, double& pLby, double& pRtx, double& pRty)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pLbx, (void*)&pLby, (void*)&pRtx, (void*)&pRty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::GetMxDrawXId()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
    return qax_result;
}

inline QString _DMxDrawX::GetOcxAppPath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::GetPoint(bool bValidBasePoint, double dX, double dY, const QString& pszPrompt)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&bValidBasePoint, (void*)&dX, (void*)&dY, (void*)&pszPrompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::GetPopupMenuEntity(IDispatch* pFilter)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pFilter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
    return qax_result;
}

inline bool _DMxDrawX::GetSysVarDouble(const QString& pszVarName, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
    return qax_result;
}

inline bool _DMxDrawX::GetSysVarLong(const QString& pszVarName, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
    return qax_result;
}

inline bool _DMxDrawX::GetSysVarString(const QString& pszVarName, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}

inline QString _DMxDrawX::GetTempPath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
    return qax_result;
}

inline void _DMxDrawX::GetViewCoord(double& pLbx, double& pLby, double& pRtx, double& pRty)
{
    void *_a[] = {0, (void*)&pLbx, (void*)&pLby, (void*)&pRtx, (void*)&pRty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
}

inline void _DMxDrawX::GetViewDocCoord(double& pLbx, double& pLby, double& pRtx, double& pRty)
{
    void *_a[] = {0, (void*)&pLbx, (void*)&pLby, (void*)&pRtx, (void*)&pRty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
}

inline qlonglong _DMxDrawX::GetWndHandle()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
    return qax_result;
}

inline bool _DMxDrawX::GotoURL(const QString& sUrl)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 112, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::HandleToObject(const QString& handle)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&handle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
    return qax_result;
}

inline bool _DMxDrawX::Hide(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
    return qax_result;
}

inline bool _DMxDrawX::HideMenuBarControl(const QString& pszControlName, bool isHide)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszControlName, (void*)&isHide};
    qt_metacall(QMetaObject::InvokeMetaMethod, 115, _a);
    return qax_result;
}

inline bool _DMxDrawX::HideToolBarControl(const QString& pszToolBarName, const QString& pszControlName, bool isHide, bool isAutoRecalcLayout)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszToolBarName, (void*)&pszControlName, (void*)&isHide, (void*)&isAutoRecalcLayout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 116, _a);
    return qax_result;
}

inline int _DMxDrawX::InsertBlock(const QString& pszDwgFileName, const QString& pszBlockName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFileName, (void*)&pszBlockName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 117, _a);
    return qax_result;
}

inline bool _DMxDrawX::IsIniting()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 118, _a);
    return qax_result;
}

inline bool _DMxDrawX::IsModelSpace()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 119, _a);
    return qax_result;
}

inline bool _DMxDrawX::IsModifyed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 120, _a);
    return qax_result;
}

inline bool _DMxDrawX::IsOk()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 121, _a);
    return qax_result;
}

inline bool _DMxDrawX::IsRuningCommand(QString& sCmdName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sCmdName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 122, _a);
    return qax_result;
}

inline qlonglong _DMxDrawX::LoadLinetypeFromFile(const QString& pszLinetypeFile, const QString& pszsLinetypeName, bool isReLoad)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszLinetypeFile, (void*)&pszsLinetypeName, (void*)&isReLoad};
    qt_metacall(QMetaObject::InvokeMetaMethod, 123, _a);
    return qax_result;
}

inline bool _DMxDrawX::LoadModule(const QString& sModuleName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sModuleName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 124, _a);
    return qax_result;
}

inline bool _DMxDrawX::LoadToolBar(const QString& pszToolBarFilePath, bool isShow)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszToolBarFilePath, (void*)&isShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 125, _a);
    return qax_result;
}

inline void _DMxDrawX::MakeCurrentOcx()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 126, _a);
}

inline IDispatch* _DMxDrawX::NewComObject(const QString& pszClassName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszClassName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 127, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::NewEntity(const QString& pszClassName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszClassName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 128, _a);
    return qax_result;
}

inline void _DMxDrawX::NewFile()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
}

inline IDispatch* _DMxDrawX::NewPoint()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::NewResbuf()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::NewSelectionSet()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::NewUtility()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 133, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::ObjectIdToObject(qlonglong lId)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
    return qax_result;
}

inline bool _DMxDrawX::OpenBackgroundFile(const QString& sFileName, bool isGreyness, int lightColor, bool isZoomE, bool isUpDisplay)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sFileName, (void*)&isGreyness, (void*)&lightColor, (void*)&isZoomE, (void*)&isUpDisplay};
    qt_metacall(QMetaObject::InvokeMetaMethod, 135, _a);
    return qax_result;
}

inline bool _DMxDrawX::OpenDwgFile(const QString& pszDwgFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 136, _a);
    return qax_result;
}

inline bool _DMxDrawX::OpenWebDwgFile(const QString& pszWebDwgFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszWebDwgFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 137, _a);
    return qax_result;
}

inline void _DMxDrawX::PathLineTo(double dX, double dY)
{
    void *_a[] = {0, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 138, _a);
}

inline void _DMxDrawX::PathLineToEx(double dX, double dY, double dStartWidth, double dEndWidth, double dBulge)
{
    void *_a[] = {0, (void*)&dX, (void*)&dY, (void*)&dStartWidth, (void*)&dEndWidth, (void*)&dBulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 139, _a);
}

inline void _DMxDrawX::PathMakeClosed()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 140, _a);
}

inline void _DMxDrawX::PathMakeExclude(bool isExclude)
{
    void *_a[] = {0, (void*)&isExclude};
    qt_metacall(QMetaObject::InvokeMetaMethod, 141, _a);
}

inline void _DMxDrawX::PathMoveTo(double dX, double dY)
{
    void *_a[] = {0, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 142, _a);
}

inline void _DMxDrawX::PathMoveToEx(double dX, double dY, double dStartWidth, double dEndWidth, double dBulge)
{
    void *_a[] = {0, (void*)&dX, (void*)&dY, (void*)&dStartWidth, (void*)&dEndWidth, (void*)&dBulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 143, _a);
}

inline bool _DMxDrawX::PrintHtml(bool isShowPrintDialog, bool isPrintLineWidth)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&isShowPrintDialog, (void*)&isPrintLineWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 144, _a);
    return qax_result;
}

inline void _DMxDrawX::Prompt(const QString& pszPrompt)
{
    void *_a[] = {0, (void*)&pszPrompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 145, _a);
}

inline bool _DMxDrawX::PutEntityInView(qlonglong lId, double dPaddingPercentage)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&dPaddingPercentage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 146, _a);
    return qax_result;
}

inline void _DMxDrawX::ReDraw()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 147, _a);
}

inline bool _DMxDrawX::ReadBinStream(const QVariant& varBinArray, const QString& sPassword, int lReadContent)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&varBinArray, (void*)&sPassword, (void*)&lReadContent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 148, _a);
    return qax_result;
}

inline bool _DMxDrawX::Regen()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 149, _a);
    return qax_result;
}

inline bool _DMxDrawX::RegistUserCustomCommand(const QString& pszCommandName, int lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszCommandName, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 150, _a);
    return qax_result;
}

inline bool _DMxDrawX::RestoreCursor()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 151, _a);
    return qax_result;
}

inline void _DMxDrawX::RestoreStatusBar()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 152, _a);
}

inline QColor _DMxDrawX::ReturnViewColor()
{
    QColor qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 153, _a);
    return qax_result;
}

inline bool _DMxDrawX::SaveBmpFile(const QString& pszFile, int lWidth, int lHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFile, (void*)&lWidth, (void*)&lHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 154, _a);
    return qax_result;
}

inline void _DMxDrawX::SaveCursor()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 155, _a);
}

inline bool _DMxDrawX::SaveDwgFile(const QString& pFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 156, _a);
    return qax_result;
}

inline bool _DMxDrawX::SaveDwgToURL(const QString& pszServerUrl, const QString& pszServerProgramUrl, const QString& pszComponentName, const QString& pszPort)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszServerUrl, (void*)&pszServerProgramUrl, (void*)&pszComponentName, (void*)&pszPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 157, _a);
    return qax_result;
}

inline bool _DMxDrawX::SaveDwgToURLEx(const QString& sServerUrl, const QString& sServerProgramUrl, const QString& sCommponentName, int lPort, const QString& sFileTag)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sServerUrl, (void*)&sServerProgramUrl, (void*)&sCommponentName, (void*)&lPort, (void*)&sFileTag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 158, _a);
    return qax_result;
}

inline bool _DMxDrawX::SaveJpgFile(const QString& pszFileName, int lWidth, int lHeight, int lBkColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFileName, (void*)&lWidth, (void*)&lHeight, (void*)&lBkColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 159, _a);
    return qax_result;
}

inline bool _DMxDrawX::SavePartDwg(double dX1, double dY1, double dX2, double dY2, const QString& pszFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2, (void*)&pszFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 160, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::ScreenToDocCoord(double dX, double dY)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 161, _a);
    return qax_result;
}

inline bool _DMxDrawX::SendStringToExecute(const QString& pszCmd)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszCmd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 162, _a);
    return qax_result;
}

inline bool _DMxDrawX::SendStringToExecuteEx(const QString& sCmdName, IDispatch* pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sCmdName, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 163, _a);
    return qax_result;
}

inline bool _DMxDrawX::SendStringToExecuteFun(const QString& sCmdName, IDispatch* pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sCmdName, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 164, _a);
    return qax_result;
}

inline bool _DMxDrawX::SetCurrentLayout(const QString& pszLayoutName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszLayoutName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 169, _a);
    return qax_result;
}

inline bool _DMxDrawX::SetCursor(const QString& pszCursorFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszCursorFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 170, _a);
    return qax_result;
}

inline void _DMxDrawX::SetCursorCrossLong(int lLong)
{
    void *_a[] = {0, (void*)&lLong};
    qt_metacall(QMetaObject::InvokeMetaMethod, 171, _a);
}

inline void _DMxDrawX::SetCursorPickRect(int lWidth)
{
    void *_a[] = {0, (void*)&lWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 173, _a);
}

inline bool _DMxDrawX::SetEntityDrawOrder(qlonglong lId, int lOrder)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&lOrder};
    qt_metacall(QMetaObject::InvokeMetaMethod, 192, _a);
    return qax_result;
}

inline void _DMxDrawX::SetEventRet(int lRet)
{
    void *_a[] = {0, (void*)&lRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 193, _a);
}

inline void _DMxDrawX::SetEventRetEx(IDispatch* pParam)
{
    void *_a[] = {0, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 194, _a);
}

inline void _DMxDrawX::SetEventRetString(const QString& pszResult)
{
    void *_a[] = {0, (void*)&pszResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 195, _a);
}

inline bool _DMxDrawX::SetInputCursorPos(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 211, _a);
    return qax_result;
}

inline bool _DMxDrawX::SetIsModifyed(bool IsModifyed)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&IsModifyed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 214, _a);
    return qax_result;
}

inline double _DMxDrawX::SetLayerBright(const QString& sLayerName, double dBright)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sLayerName, (void*)&dBright};
    qt_metacall(QMetaObject::InvokeMetaMethod, 216, _a);
    return qax_result;
}

inline void _DMxDrawX::SetStatusBarProgressMeter(int lMaxPos)
{
    void *_a[] = {0, (void*)&lMaxPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 230, _a);
}

inline void _DMxDrawX::SetStatusBarProgressMeterPos(int lPos)
{
    void *_a[] = {0, (void*)&lPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 231, _a);
}

inline bool _DMxDrawX::SetSysVarDouble(const QString& pszVarName, double dVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&dVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 232, _a);
    return qax_result;
}

inline bool _DMxDrawX::SetSysVarLong(const QString& pszVarName, int lVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&lVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 233, _a);
    return qax_result;
}

inline bool _DMxDrawX::SetSysVarString(const QString& pszVarName, const QString& pszVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&pszVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 234, _a);
    return qax_result;
}

inline void _DMxDrawX::SetToolTipInitialTime(uint ulTime)
{
    void *_a[] = {0, (void*)&ulTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 238, _a);
}

inline void _DMxDrawX::SetToolTipPopTime(uint ulTime)
{
    void *_a[] = {0, (void*)&ulTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 239, _a);
}

inline void _DMxDrawX::SetTwinkeColor(IDispatch* pColorResbuf)
{
    void *_a[] = {0, (void*)&pColorResbuf};
    qt_metacall(QMetaObject::InvokeMetaMethod, 240, _a);
}

inline void _DMxDrawX::SetTwinkeTime(int lTime)
{
    void *_a[] = {0, (void*)&lTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 241, _a);
}

inline void _DMxDrawX::SetViewTwist(double dAng)
{
    void *_a[] = {0, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 248, _a);
}

inline bool _DMxDrawX::Show(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 250, _a);
    return qax_result;
}

inline bool _DMxDrawX::ShowToolBar(const QString& pszToolBarName, bool isShow)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszToolBarName, (void*)&isShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 251, _a);
    return qax_result;
}

inline bool _DMxDrawX::StopAllCommand()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 252, _a);
    return qax_result;
}

inline bool _DMxDrawX::StopAllTwinkeEnt()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 253, _a);
    return qax_result;
}

inline bool _DMxDrawX::StopTwinkeEnt(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 254, _a);
    return qax_result;
}

inline bool _DMxDrawX::TrackPopupMenu(double dX, double dY, const QString& pszMenuFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY, (void*)&pszMenuFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 255, _a);
    return qax_result;
}

inline bool _DMxDrawX::TwinkeEnt(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 256, _a);
    return qax_result;
}

inline bool _DMxDrawX::UnLoadModule(const QString& sModuleName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sModuleName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 257, _a);
    return qax_result;
}

inline bool _DMxDrawX::UnLoadToolBar(const QString& sToolBarName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sToolBarName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 258, _a);
    return qax_result;
}

inline void _DMxDrawX::UpdateDisplay()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 259, _a);
}

inline double _DMxDrawX::ViewLongToDocCoord(double dLong)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dLong};
    qt_metacall(QMetaObject::InvokeMetaMethod, 260, _a);
    return qax_result;
}

inline IDispatch* _DMxDrawX::ViewToDocCoord(double dX, double dY)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 261, _a);
    return qax_result;
}

inline bool _DMxDrawX::WriteBinStream(QVariant& pVarBinArray, const QString& sPassword, int iVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVarBinArray, (void*)&sPassword, (void*)&iVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 262, _a);
    return qax_result;
}

inline bool _DMxDrawX::WriteJpgToURL(const QString& pszServerUrl, const QString& pszServerProgramUrl, const QString& pszComponentName, int lPort, const QString& pszFileTag, int iWidth, int iHeight, int bkColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszServerUrl, (void*)&pszServerProgramUrl, (void*)&pszComponentName, (void*)&lPort, (void*)&pszFileTag, (void*)&iWidth, (void*)&iHeight, (void*)&bkColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 263, _a);
    return qax_result;
}

inline void _DMxDrawX::ZoomAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 264, _a);
}

inline bool _DMxDrawX::ZoomCenter(double dCenterX, double dCenterY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 265, _a);
    return qax_result;
}

inline bool _DMxDrawX::ZoomPan(double dOffsetX, double dOffsetY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetX, (void*)&dOffsetY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 266, _a);
    return qax_result;
}

inline bool _DMxDrawX::ZoomScale(double dScale)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 267, _a);
    return qax_result;
}

inline bool _DMxDrawX::ZoomScale2(double dPtx, double dPty, double dScale)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPtx, (void*)&dPty, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 268, _a);
    return qax_result;
}

inline void _DMxDrawX::ZoomWindow(double dLBx, double dLBy, double dRTx, double dRTy)
{
    void *_a[] = {0, (void*)&dLBx, (void*)&dLBy, (void*)&dRTx, (void*)&dRTy};
    qt_metacall(QMetaObject::InvokeMetaMethod, 269, _a);
}


inline bool MxDrawX::AutoActive() const
{
    QVariant qax_result = property("AutoActive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetAutoActive(bool value){ setProperty("AutoActive", QVariant(value)); }

inline bool MxDrawX::AutoZoomAll() const
{
    QVariant qax_result = property("AutoZoomAll");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetAutoZoomAll(bool value){ setProperty("AutoZoomAll", QVariant(value)); }

inline bool MxDrawX::BrowseMode() const
{
    QVariant qax_result = property("BrowseMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetBrowseMode(bool value){ setProperty("BrowseMode", QVariant(value)); }

inline int MxDrawX::CommandMessgaeModify() const
{
    QVariant qax_result = property("CommandMessgaeModify");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawX::SetCommandMessgaeModify(int value){ setProperty("CommandMessgaeModify", QVariant(value)); }

inline double MxDrawX::CursorLong() const
{
    QVariant qax_result = property("CursorLong");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawX::SetCursorLong(double value){ setProperty("CursorLong", QVariant(value)); }

inline double MxDrawX::CursorWidth() const
{
    QVariant qax_result = property("CursorWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawX::SetCursorWidth(double value){ setProperty("CursorWidth", QVariant(value)); }

inline QString MxDrawX::DimStyle() const
{
    QVariant qax_result = property("DimStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetDimStyle(const QString& value){ setProperty("DimStyle", QVariant(value)); }

inline uint MxDrawX::DrawCADColor() const
{
    QVariant qax_result = property("DrawCADColor");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void MxDrawX::SetDrawCADColor(uint value){ setProperty("DrawCADColor", QVariant(value)); }

inline int MxDrawX::DrawCADColorIndex() const
{
    QVariant qax_result = property("DrawCADColorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawX::SetDrawCADColorIndex(int value){ setProperty("DrawCADColorIndex", QVariant(value)); }

inline QColor MxDrawX::DrawColor() const
{
    QVariant qax_result = property("DrawColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void MxDrawX::SetDrawColor(const QColor& value){ setProperty("DrawColor", QVariant(value)); }

inline QString MxDrawX::DwgFilePath() const
{
    QVariant qax_result = property("DwgFilePath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetDwgFilePath(const QString& value){ setProperty("DwgFilePath", QVariant(value)); }

inline bool MxDrawX::DynToolTip() const
{
    QVariant qax_result = property("DynToolTip");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetDynToolTip(bool value){ setProperty("DynToolTip", QVariant(value)); }

inline int MxDrawX::DynToolTipTime() const
{
    QVariant qax_result = property("DynToolTipTime");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawX::SetDynToolTipTime(int value){ setProperty("DynToolTipTime", QVariant(value)); }

inline bool MxDrawX::EditGripPoint() const
{
    QVariant qax_result = property("EditGripPoint");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetEditGripPoint(bool value){ setProperty("EditGripPoint", QVariant(value)); }

inline bool MxDrawX::EnableClipboard() const
{
    QVariant qax_result = property("EnableClipboard");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetEnableClipboard(bool value){ setProperty("EnableClipboard", QVariant(value)); }

inline bool MxDrawX::EnableDeleteKey() const
{
    QVariant qax_result = property("EnableDeleteKey");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetEnableDeleteKey(bool value){ setProperty("EnableDeleteKey", QVariant(value)); }

inline bool MxDrawX::EnableDrawOrder() const
{
    QVariant qax_result = property("EnableDrawOrder");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetEnableDrawOrder(bool value){ setProperty("EnableDrawOrder", QVariant(value)); }

inline bool MxDrawX::EnableIntelliSelect() const
{
    QVariant qax_result = property("EnableIntelliSelect");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetEnableIntelliSelect(bool value){ setProperty("EnableIntelliSelect", QVariant(value)); }

inline bool MxDrawX::EnableMouseMoveView() const
{
    QVariant qax_result = property("EnableMouseMoveView");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetEnableMouseMoveView(bool value){ setProperty("EnableMouseMoveView", QVariant(value)); }

inline bool MxDrawX::EnableOleShow() const
{
    QVariant qax_result = property("EnableOleShow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetEnableOleShow(bool value){ setProperty("EnableOleShow", QVariant(value)); }

inline int MxDrawX::EnableOpenCmd() const
{
    QVariant qax_result = property("EnableOpenCmd");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawX::SetEnableOpenCmd(int value){ setProperty("EnableOpenCmd", QVariant(value)); }

inline int MxDrawX::EnablePrintCmd() const
{
    QVariant qax_result = property("EnablePrintCmd");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawX::SetEnablePrintCmd(int value){ setProperty("EnablePrintCmd", QVariant(value)); }

inline bool MxDrawX::EnableUndo() const
{
    QVariant qax_result = property("EnableUndo");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetEnableUndo(bool value){ setProperty("EnableUndo", QVariant(value)); }

inline bool MxDrawX::HightQualityDraw() const
{
    QVariant qax_result = property("HightQualityDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetHightQualityDraw(bool value){ setProperty("HightQualityDraw", QVariant(value)); }

inline IDispatch* MxDrawX::ImpDynWorldDrawFun() const
{
    QVariant qax_result = property("ImpDynWorldDrawFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImpDynWorldDrawFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpDynWorldDrawFun", QVariant(typeId, &value));
}

inline IDispatch* MxDrawX::ImpExplodeFun() const
{
    QVariant qax_result = property("ImpExplodeFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImpExplodeFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpExplodeFun", QVariant(typeId, &value));
}

inline IDispatch* MxDrawX::ImpGetGeomExtentsFun() const
{
    QVariant qax_result = property("ImpGetGeomExtentsFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImpGetGeomExtentsFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpGetGeomExtentsFun", QVariant(typeId, &value));
}

inline IDispatch* MxDrawX::ImpGetGripPointsFun() const
{
    QVariant qax_result = property("ImpGetGripPointsFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImpGetGripPointsFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpGetGripPointsFun", QVariant(typeId, &value));
}

inline IDispatch* MxDrawX::ImpGetOsnapPointsFun() const
{
    QVariant qax_result = property("ImpGetOsnapPointsFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImpGetOsnapPointsFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpGetOsnapPointsFun", QVariant(typeId, &value));
}

inline IDispatch* MxDrawX::ImpHyperlinkClickFun() const
{
    QVariant qax_result = property("ImpHyperlinkClickFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImpHyperlinkClickFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpHyperlinkClickFun", QVariant(typeId, &value));
}

inline IDispatch* MxDrawX::ImpInputPointToolTipFun() const
{
    QVariant qax_result = property("ImpInputPointToolTipFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImpInputPointToolTipFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpInputPointToolTipFun", QVariant(typeId, &value));
}

inline IDispatch* MxDrawX::ImpMoveGripPointsAtFun() const
{
    QVariant qax_result = property("ImpMoveGripPointsAtFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImpMoveGripPointsAtFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpMoveGripPointsAtFun", QVariant(typeId, &value));
}

inline IDispatch* MxDrawX::ImpTransformByFun() const
{
    QVariant qax_result = property("ImpTransformByFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImpTransformByFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImpTransformByFun", QVariant(typeId, &value));
}

inline IDispatch* MxDrawX::ImplementCommandEventFun() const
{
    QVariant qax_result = property("ImplementCommandEventFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImplementCommandEventFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImplementCommandEventFun", QVariant(typeId, &value));
}

inline IDispatch* MxDrawX::ImplementCustomEvent() const
{
    QVariant qax_result = property("ImplementCustomEvent");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImplementCustomEvent(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImplementCustomEvent", QVariant(typeId, &value));
}

inline IDispatch* MxDrawX::ImplementMouseEventFun() const
{
    QVariant qax_result = property("ImplementMouseEventFun");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}
inline void MxDrawX::SetImplementMouseEventFun(IDispatch* value){
    int typeId = qRegisterMetaType<IDispatch*>("IDispatch*", &value);
    setProperty("ImplementMouseEventFun", QVariant(typeId, &value));
}

inline QString MxDrawX::Iniset() const
{
    QVariant qax_result = property("Iniset");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetIniset(const QString& value){ setProperty("Iniset", QVariant(value)); }

inline QString MxDrawX::InitUrl() const
{
    QVariant qax_result = property("InitUrl");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetInitUrl(const QString& value){ setProperty("InitUrl", QVariant(value)); }

inline bool MxDrawX::IsDrawCoord() const
{
    QVariant qax_result = property("IsDrawCoord");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetIsDrawCoord(bool value){ setProperty("IsDrawCoord", QVariant(value)); }

inline bool MxDrawX::IsFirstRunPan() const
{
    QVariant qax_result = property("IsFirstRunPan");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetIsFirstRunPan(bool value){ setProperty("IsFirstRunPan", QVariant(value)); }

inline int MxDrawX::IsRuningAtIE() const
{
    QVariant qax_result = property("IsRuningAtIE");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawX::SetIsRuningAtIE(int value){ setProperty("IsRuningAtIE", QVariant(value)); }

inline QString MxDrawX::LayerName() const
{
    QVariant qax_result = property("LayerName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetLayerName(const QString& value){ setProperty("LayerName", QVariant(value)); }

inline QString MxDrawX::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawX::LineWidth() const
{
    QVariant qax_result = property("LineWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawX::SetLineWidth(double value){ setProperty("LineWidth", QVariant(value)); }

inline QString MxDrawX::PatternDefinition() const
{
    QVariant qax_result = property("PatternDefinition");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetPatternDefinition(const QString& value){ setProperty("PatternDefinition", QVariant(value)); }

inline QString MxDrawX::ResPath() const
{
    QVariant qax_result = property("ResPath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetResPath(const QString& value){ setProperty("ResPath", QVariant(value)); }

inline bool MxDrawX::ShowCommandWindow() const
{
    QVariant qax_result = property("ShowCommandWindow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetShowCommandWindow(bool value){ setProperty("ShowCommandWindow", QVariant(value)); }

inline bool MxDrawX::ShowMenuBar() const
{
    QVariant qax_result = property("ShowMenuBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetShowMenuBar(bool value){ setProperty("ShowMenuBar", QVariant(value)); }

inline bool MxDrawX::ShowModelBar() const
{
    QVariant qax_result = property("ShowModelBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetShowModelBar(bool value){ setProperty("ShowModelBar", QVariant(value)); }

inline bool MxDrawX::ShowPropertyWindow() const
{
    QVariant qax_result = property("ShowPropertyWindow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetShowPropertyWindow(bool value){ setProperty("ShowPropertyWindow", QVariant(value)); }

inline bool MxDrawX::ShowRulerWindow() const
{
    QVariant qax_result = property("ShowRulerWindow");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetShowRulerWindow(bool value){ setProperty("ShowRulerWindow", QVariant(value)); }

inline bool MxDrawX::ShowStatusBar() const
{
    QVariant qax_result = property("ShowStatusBar");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetShowStatusBar(bool value){ setProperty("ShowStatusBar", QVariant(value)); }

inline bool MxDrawX::ShowToolBars() const
{
    QVariant qax_result = property("ShowToolBars");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetShowToolBars(bool value){ setProperty("ShowToolBars", QVariant(value)); }

inline bool MxDrawX::SingleSelection() const
{
    QVariant qax_result = property("SingleSelection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetSingleSelection(bool value){ setProperty("SingleSelection", QVariant(value)); }

inline QString MxDrawX::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline int MxDrawX::Theme() const
{
    QVariant qax_result = property("Theme");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawX::SetTheme(int value){ setProperty("Theme", QVariant(value)); }

inline QString MxDrawX::ToolBarFiles() const
{
    QVariant qax_result = property("ToolBarFiles");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetToolBarFiles(const QString& value){ setProperty("ToolBarFiles", QVariant(value)); }

inline bool MxDrawX::UseArrowCursor() const
{
    QVariant qax_result = property("UseArrowCursor");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawX::SetUseArrowCursor(bool value){ setProperty("UseArrowCursor", QVariant(value)); }

inline QString MxDrawX::UserData() const
{
    QVariant qax_result = property("UserData");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetUserData(const QString& value){ setProperty("UserData", QVariant(value)); }

inline QString MxDrawX::UserName() const
{
    QVariant qax_result = property("UserName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetUserName(const QString& value){ setProperty("UserName", QVariant(value)); }

inline QString MxDrawX::UserPhone() const
{
    QVariant qax_result = property("UserPhone");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetUserPhone(const QString& value){ setProperty("UserPhone", QVariant(value)); }

inline QString MxDrawX::UserSoftwareName() const
{
    QVariant qax_result = property("UserSoftwareName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetUserSoftwareName(const QString& value){ setProperty("UserSoftwareName", QVariant(value)); }

inline QColor MxDrawX::ViewColor() const
{
    QVariant qax_result = property("ViewColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void MxDrawX::SetViewColor(const QColor& value){ setProperty("ViewColor", QVariant(value)); }

inline QString MxDrawX::Watermark() const
{
    QVariant qax_result = property("Watermark");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawX::SetWatermark(const QString& value){ setProperty("Watermark", QVariant(value)); }

inline void MxDrawX::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline bool MxDrawX::AddCurrentSelect(qlonglong lId, bool isShowGrid, bool isUpDisplay)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&isShowGrid, (void*)&isUpDisplay};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline qlonglong MxDrawX::AddDimStyle(const QString& pszName, const QString& pszDoubleData, const QString& pszIntData, const QString& pszStringData, const QString& pszIdData)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszDoubleData, (void*)&pszIntData, (void*)&pszStringData, (void*)&pszIdData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline qlonglong MxDrawX::AddLayer(const QString& pszName)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline qlonglong MxDrawX::AddLinetype(const QString& pszName, const QString& pszLineDefine)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszLineDefine};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline qlonglong MxDrawX::AddLinetypeEx(const QString& pszName, const QString& pszLineDefine, const QString& pszTextStyle)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszLineDefine, (void*)&pszTextStyle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline bool MxDrawX::AddPatternDefinition(const QString& pszName, const QString& pszPatternDefinition)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszPatternDefinition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline qlonglong MxDrawX::AddTextStyle1(const QString& pszName, const QString& pszFileName, const QString& pszBigFontFileName, double dXScale)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszFileName, (void*)&pszBigFontFileName, (void*)&dXScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline qlonglong MxDrawX::AddTextStyle2(const QString& pszName, const QString& pszTrueTypeFontName, double dXScale)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pszTrueTypeFontName, (void*)&dXScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::Cal(const QString& pszFunName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::Call(const QString& pszFunName, const QString& pszFunParam)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&pszFunParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::CallDoubleParam1(const QString& pszFunName, double dV)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&dV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::CallDoubleParam2(const QString& pszFunName, double dV1, double dV2)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&dV1, (void*)&dV2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::CallDoubleParam3(const QString& pszFunName, double dV1, double dV2, double dV3)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&dV1, (void*)&dV2, (void*)&dV3};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::CallEx(const QString& pszFunName, IDispatch* pParam)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::CallLongParam1(const QString& pszFunName, int lV)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&lV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::CallLongParam2(const QString& pszFunName, int lV1, int lV2)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&lV1, (void*)&lV2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::CallLongParam3(const QString& pszFunName, int lV1, int lV2, int lV3)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&lV1, (void*)&lV2, (void*)&lV3};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::CallPointParam1(const QString& pszFunName, double dX, double dY, double dZ)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&dX, (void*)&dY, (void*)&dZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::CallPointParam2(const QString& pszFunName, double dX1, double dY1, double dZ1, double dX2, double dY2, double dZ2)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&dX1, (void*)&dY1, (void*)&dZ1, (void*)&dX2, (void*)&dY2, (void*)&dZ2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}

inline bool MxDrawX::Clear(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline void MxDrawX::ClearCurrentSelect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}

inline void MxDrawX::ClearDisplayBuffer()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}

inline void MxDrawX::ClearPreviousInputPoint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}

inline void MxDrawX::ClearUndoData()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline bool MxDrawX::CreateGroup(const QString& pszName, IDispatch* pAryId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pAryId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::CustomEventParam()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
    return qax_result;
}

inline int MxDrawX::CustomInsertBlock(const QString& pszDwgFileName, const QString& pszBlockName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFileName, (void*)&pszBlockName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
    return qax_result;
}

inline bool MxDrawX::DeleteGroup(const QString& pszName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
    return qax_result;
}

inline bool MxDrawX::DeleteGroupEx(qlonglong lEntId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lEntId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
    return qax_result;
}

inline bool MxDrawX::DoCommand(int iCommandId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iCommandId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
    return qax_result;
}

inline double MxDrawX::DocLongToViewCoord(double dLen)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dLen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::DocToScreenCoord(double dX, double dY)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::DocToViewCoord(double dX, double dY)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
    return qax_result;
}

inline QString MxDrawX::Download(const QString& pszWebFile)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszWebFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawArc1(double dCenterX, double dCenterY, double dRadius, double dStartAng, double dEndAng)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dRadius, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawArc2(double dStartPointX, double dStartPointY, double dMidPointX, double dMidPointY, double dEndPointX, double dEndPointY)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dMidPointX, (void*)&dMidPointY, (void*)&dEndPointX, (void*)&dEndPointY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dEndPointX, (void*)&dEndPointY, (void*)&dBulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawBlockReference(double dPosX, double dPosY, const QString& pszBlkName, double dScale, double dAng)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszBlkName, (void*)&dScale, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawCircle(double dCenterX, double dCenterY, double dRadius)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dRadius};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::DrawCustomEntity(const QString& pszGuid, const QString& pszBlkRecName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszGuid, (void*)&pszBlkRecName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawDimAligned(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dTextPositionX, double dTextPositionY)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dExtLine1PointX, (void*)&dExtLine1PointY, (void*)&dExtLine2PointX, (void*)&dExtLine2PointY, (void*)&dTextPositionX, (void*)&dTextPositionY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawDimAngular(double dAngleVertexX, double dAngleVertexY, double dFirstEndPointX, double dFirstEndPointY, double dSecondEndPointX, double dSecondEndPointY, double dTextPointX, double dTextPointY)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dAngleVertexX, (void*)&dAngleVertexY, (void*)&dFirstEndPointX, (void*)&dFirstEndPointY, (void*)&dSecondEndPointX, (void*)&dSecondEndPointY, (void*)&dTextPointX, (void*)&dTextPointY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawDimDiametric(double dChordPointX, double dChordPointY, double dFarChordPointX, double dFarChordPointY, double dLeaderLength)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dChordPointX, (void*)&dChordPointY, (void*)&dFarChordPointX, (void*)&dFarChordPointY, (void*)&dLeaderLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawDimOrdinate(double dDefinitionPointX, double dDefinitionPointY, double dDeaderEndPointX, double dDeaderEndPointY, bool isUseXAxis)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDefinitionPointX, (void*)&dDefinitionPointY, (void*)&dDeaderEndPointX, (void*)&dDeaderEndPointY, (void*)&isUseXAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawDimRadial(double dCenterX, double dCenterY, double dChordPointX, double dChordPointY, double dLeaderLength)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dChordPointX, (void*)&dChordPointY, (void*)&dLeaderLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawDimRotated(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dDimLineLocationX, double dDimLineLocationY, double dRotationAngle)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dExtLine1PointX, (void*)&dExtLine1PointY, (void*)&dExtLine2PointX, (void*)&dExtLine2PointY, (void*)&dDimLineLocationX, (void*)&dDimLineLocationY, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 112, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawEntity(IDispatch* pIn)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 115, _a);
    return qax_result;
}

inline bool MxDrawX::DrawEntityToJpg(qlonglong lId, const QString& sJpgFilePath, int iWidth, int iHeight, int lBkColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&sJpgFilePath, (void*)&iWidth, (void*)&iHeight, (void*)&lBkColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 116, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawHatchFromPoint(double dX, double dY, double dPatternScale)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY, (void*)&dPatternScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 117, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawImage(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFilePath)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&dScale, (void*)&dAng, (void*)&pszFilePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 118, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawImageMark(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFileName, const QString& pszTwinkeImageFiles, bool isSaveData)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&dScale, (void*)&dAng, (void*)&pszFileName, (void*)&pszTwinkeImageFiles, (void*)&isSaveData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 119, _a);
    return qax_result;
}

inline bool MxDrawX::DrawImageToBackground(const QString& sFileName, int lLeftUpX, int lLeftUpY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sFileName, (void*)&lLeftUpX, (void*)&lLeftUpY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 120, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawLine(double dX1, double dY1, double dX2, double dY2)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 121, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawMText(double dPosX, double dPosY, const QString& pszContents, double dHeight, double dWidth, double dRotation, int iAttachment)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszContents, (void*)&dHeight, (void*)&dWidth, (void*)&dRotation, (void*)&iAttachment};
    qt_metacall(QMetaObject::InvokeMetaMethod, 122, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawPathToHatch(double dPatternScale)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPatternScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 123, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawPathToHatch2(double dPatternScale, const QString& sPatternFile, const QString& sPatternName, double dAngel)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPatternScale, (void*)&sPatternFile, (void*)&sPatternName, (void*)&dAngel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 124, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawPathToPolyline()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 125, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawPathToSpline()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 126, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawPoint(double dX, double dY)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 127, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2, (void*)&dX3, (void*)&dY3, (void*)&dX4, (void*)&dY4};
    qt_metacall(QMetaObject::InvokeMetaMethod, 128, _a);
    return qax_result;
}

inline qlonglong MxDrawX::DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, int horizontalMode, int verticalMode)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation, (void*)&horizontalMode, (void*)&verticalMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
    return qax_result;
}

inline bool MxDrawX::DrawToJpg(const QString& sJpgFilePath, double dLBx, double dLBy, double dRTx, double dRTy, int lWidth, int lHeight, int lBkColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sJpgFilePath, (void*)&dLBx, (void*)&dLBy, (void*)&dRTx, (void*)&dRTy, (void*)&lWidth, (void*)&lHeight, (void*)&lBkColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
    return qax_result;
}

inline bool MxDrawX::DrawVectorCircle(double dCenX, double dCenY, double dR, int lColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dR, (void*)&lColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
    return qax_result;
}

inline bool MxDrawX::DrawVectorLine(double dX1, double dY1, double dX2, double dY2, int lColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2, (void*)&lColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
    return qax_result;
}

inline void MxDrawX::EnableGripPoint(bool bEnable)
{
    void *_a[] = {0, (void*)&bEnable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 133, _a);
}

inline bool MxDrawX::EnableSingleSelection(bool isEnable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&isEnable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
    return qax_result;
}

inline bool MxDrawX::EnableToolBarButton(const QString& pButtonName, bool isEnable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pButtonName, (void*)&isEnable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 135, _a);
    return qax_result;
}

inline bool MxDrawX::Erase(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 136, _a);
    return qax_result;
}

inline bool MxDrawX::ExprotPdf(const QString& sPdfFileName, double dPaperH, double dPaperW, const QString& pszTitle, bool isExportLayout)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sPdfFileName, (void*)&dPaperH, (void*)&dPaperW, (void*)&pszTitle, (void*)&isExportLayout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 137, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::FindEntAtPoint(double dX, double dY, IDispatch* pFilter)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY, (void*)&pFilter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 138, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::GetAllGroupName()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 139, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::GetAllLayoutName()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 140, _a);
    return qax_result;
}

inline void MxDrawX::GetBulidVersion(int& lMajor, int& lMinor)
{
    void *_a[] = {0, (void*)&lMajor, (void*)&lMinor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 141, _a);
}

inline QString MxDrawX::GetCurrentLayout()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 142, _a);
    return qax_result;
}

inline QString MxDrawX::GetCurrentPath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 143, _a);
    return qax_result;
}

inline int MxDrawX::GetCursorCrossLong()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 144, _a);
    return qax_result;
}

inline int MxDrawX::GetCursorPickRect()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 145, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::GetCustomEntity(qlonglong lId)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 146, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::GetDatabase()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 147, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::GetEntity(const QString& pszPrompt)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszPrompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 148, _a);
    return qax_result;
}

inline int MxDrawX::GetEntityDrawOrder(qlonglong lId)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 149, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::GetEntitysLastCmd()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 150, _a);
    return qax_result;
}

inline QString MxDrawX::GetExePath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 151, _a);
    return qax_result;
}

inline QString MxDrawX::GetFileName()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 152, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::GetGroup(const QString& pszGroupName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszGroupName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 153, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::GetImageSize(const QString& pszImageFile)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszImageFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 154, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::GetInputCursorPos()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 155, _a);
    return qax_result;
}

inline QString MxDrawX::GetLastError()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 156, _a);
    return qax_result;
}

inline QString MxDrawX::GetMTextContent(qlonglong lId)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 157, _a);
    return qax_result;
}

inline bool MxDrawX::GetMcDbDatabaseBound(double& pLbx, double& pLby, double& pRtx, double& pRty)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pLbx, (void*)&pLby, (void*)&pRtx, (void*)&pRty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 158, _a);
    return qax_result;
}

inline qlonglong MxDrawX::GetMxDrawXId()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 159, _a);
    return qax_result;
}

inline QString MxDrawX::GetOcxAppPath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 160, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::GetPoint(bool bValidBasePoint, double dX, double dY, const QString& pszPrompt)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&bValidBasePoint, (void*)&dX, (void*)&dY, (void*)&pszPrompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 161, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::GetPopupMenuEntity(IDispatch* pFilter)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pFilter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 162, _a);
    return qax_result;
}

inline bool MxDrawX::GetSysVarDouble(const QString& pszVarName, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 163, _a);
    return qax_result;
}

inline bool MxDrawX::GetSysVarLong(const QString& pszVarName, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 164, _a);
    return qax_result;
}

inline bool MxDrawX::GetSysVarString(const QString& pszVarName, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 165, _a);
    return qax_result;
}

inline QString MxDrawX::GetTempPath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 166, _a);
    return qax_result;
}

inline void MxDrawX::GetViewCoord(double& pLbx, double& pLby, double& pRtx, double& pRty)
{
    void *_a[] = {0, (void*)&pLbx, (void*)&pLby, (void*)&pRtx, (void*)&pRty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 167, _a);
}

inline void MxDrawX::GetViewDocCoord(double& pLbx, double& pLby, double& pRtx, double& pRty)
{
    void *_a[] = {0, (void*)&pLbx, (void*)&pLby, (void*)&pRtx, (void*)&pRty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 168, _a);
}

inline qlonglong MxDrawX::GetWndHandle()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 169, _a);
    return qax_result;
}

inline bool MxDrawX::GotoURL(const QString& sUrl)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sUrl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 170, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::HandleToObject(const QString& handle)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&handle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 171, _a);
    return qax_result;
}

inline bool MxDrawX::Hide(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 172, _a);
    return qax_result;
}

inline bool MxDrawX::HideMenuBarControl(const QString& pszControlName, bool isHide)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszControlName, (void*)&isHide};
    qt_metacall(QMetaObject::InvokeMetaMethod, 173, _a);
    return qax_result;
}

inline bool MxDrawX::HideToolBarControl(const QString& pszToolBarName, const QString& pszControlName, bool isHide, bool isAutoRecalcLayout)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszToolBarName, (void*)&pszControlName, (void*)&isHide, (void*)&isAutoRecalcLayout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 174, _a);
    return qax_result;
}

inline int MxDrawX::InsertBlock(const QString& pszDwgFileName, const QString& pszBlockName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFileName, (void*)&pszBlockName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 175, _a);
    return qax_result;
}

inline bool MxDrawX::IsIniting()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 176, _a);
    return qax_result;
}

inline bool MxDrawX::IsModelSpace()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 177, _a);
    return qax_result;
}

inline bool MxDrawX::IsModifyed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 178, _a);
    return qax_result;
}

inline bool MxDrawX::IsOk()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 179, _a);
    return qax_result;
}

inline bool MxDrawX::IsRuningCommand(QString& sCmdName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sCmdName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 180, _a);
    return qax_result;
}

inline qlonglong MxDrawX::LoadLinetypeFromFile(const QString& pszLinetypeFile, const QString& pszsLinetypeName, bool isReLoad)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszLinetypeFile, (void*)&pszsLinetypeName, (void*)&isReLoad};
    qt_metacall(QMetaObject::InvokeMetaMethod, 181, _a);
    return qax_result;
}

inline bool MxDrawX::LoadModule(const QString& sModuleName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sModuleName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 182, _a);
    return qax_result;
}

inline bool MxDrawX::LoadToolBar(const QString& pszToolBarFilePath, bool isShow)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszToolBarFilePath, (void*)&isShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 183, _a);
    return qax_result;
}

inline void MxDrawX::MakeCurrentOcx()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 184, _a);
}

inline IDispatch* MxDrawX::NewComObject(const QString& pszClassName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszClassName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 185, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::NewEntity(const QString& pszClassName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszClassName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 186, _a);
    return qax_result;
}

inline void MxDrawX::NewFile()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 187, _a);
}

inline IDispatch* MxDrawX::NewPoint()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 188, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::NewResbuf()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 189, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::NewSelectionSet()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 190, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::NewUtility()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 191, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::ObjectIdToObject(qlonglong lId)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 192, _a);
    return qax_result;
}

inline bool MxDrawX::OpenBackgroundFile(const QString& sFileName, bool isGreyness, int lightColor, bool isZoomE, bool isUpDisplay)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sFileName, (void*)&isGreyness, (void*)&lightColor, (void*)&isZoomE, (void*)&isUpDisplay};
    qt_metacall(QMetaObject::InvokeMetaMethod, 193, _a);
    return qax_result;
}

inline bool MxDrawX::OpenDwgFile(const QString& pszDwgFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 194, _a);
    return qax_result;
}

inline bool MxDrawX::OpenWebDwgFile(const QString& pszWebDwgFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszWebDwgFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 195, _a);
    return qax_result;
}

inline void MxDrawX::PathLineTo(double dX, double dY)
{
    void *_a[] = {0, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 196, _a);
}

inline void MxDrawX::PathLineToEx(double dX, double dY, double dStartWidth, double dEndWidth, double dBulge)
{
    void *_a[] = {0, (void*)&dX, (void*)&dY, (void*)&dStartWidth, (void*)&dEndWidth, (void*)&dBulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 197, _a);
}

inline void MxDrawX::PathMakeClosed()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 198, _a);
}

inline void MxDrawX::PathMakeExclude(bool isExclude)
{
    void *_a[] = {0, (void*)&isExclude};
    qt_metacall(QMetaObject::InvokeMetaMethod, 199, _a);
}

inline void MxDrawX::PathMoveTo(double dX, double dY)
{
    void *_a[] = {0, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 200, _a);
}

inline void MxDrawX::PathMoveToEx(double dX, double dY, double dStartWidth, double dEndWidth, double dBulge)
{
    void *_a[] = {0, (void*)&dX, (void*)&dY, (void*)&dStartWidth, (void*)&dEndWidth, (void*)&dBulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 201, _a);
}

inline bool MxDrawX::PrintHtml(bool isShowPrintDialog, bool isPrintLineWidth)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&isShowPrintDialog, (void*)&isPrintLineWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 202, _a);
    return qax_result;
}

inline void MxDrawX::Prompt(const QString& pszPrompt)
{
    void *_a[] = {0, (void*)&pszPrompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 203, _a);
}

inline bool MxDrawX::PutEntityInView(qlonglong lId, double dPaddingPercentage)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&dPaddingPercentage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 204, _a);
    return qax_result;
}

inline void MxDrawX::ReDraw()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 205, _a);
}

inline bool MxDrawX::ReadBinStream(const QVariant& varBinArray, const QString& sPassword, int lReadContent)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&varBinArray, (void*)&sPassword, (void*)&lReadContent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 206, _a);
    return qax_result;
}

inline bool MxDrawX::Regen()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 207, _a);
    return qax_result;
}

inline bool MxDrawX::RegistUserCustomCommand(const QString& pszCommandName, int lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszCommandName, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 208, _a);
    return qax_result;
}

inline bool MxDrawX::RestoreCursor()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 209, _a);
    return qax_result;
}

inline void MxDrawX::RestoreStatusBar()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 210, _a);
}

inline QColor MxDrawX::ReturnViewColor()
{
    QColor qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 211, _a);
    return qax_result;
}

inline bool MxDrawX::SaveBmpFile(const QString& pszFile, int lWidth, int lHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFile, (void*)&lWidth, (void*)&lHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 212, _a);
    return qax_result;
}

inline void MxDrawX::SaveCursor()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 213, _a);
}

inline bool MxDrawX::SaveDwgFile(const QString& pFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 214, _a);
    return qax_result;
}

inline bool MxDrawX::SaveDwgToURL(const QString& pszServerUrl, const QString& pszServerProgramUrl, const QString& pszComponentName, const QString& pszPort)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszServerUrl, (void*)&pszServerProgramUrl, (void*)&pszComponentName, (void*)&pszPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 215, _a);
    return qax_result;
}

inline bool MxDrawX::SaveDwgToURLEx(const QString& sServerUrl, const QString& sServerProgramUrl, const QString& sCommponentName, int lPort, const QString& sFileTag)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sServerUrl, (void*)&sServerProgramUrl, (void*)&sCommponentName, (void*)&lPort, (void*)&sFileTag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 216, _a);
    return qax_result;
}

inline bool MxDrawX::SaveJpgFile(const QString& pszFileName, int lWidth, int lHeight, int lBkColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFileName, (void*)&lWidth, (void*)&lHeight, (void*)&lBkColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 217, _a);
    return qax_result;
}

inline bool MxDrawX::SavePartDwg(double dX1, double dY1, double dX2, double dY2, const QString& pszFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2, (void*)&pszFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 218, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::ScreenToDocCoord(double dX, double dY)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 219, _a);
    return qax_result;
}

inline bool MxDrawX::SendStringToExecute(const QString& pszCmd)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszCmd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 220, _a);
    return qax_result;
}

inline bool MxDrawX::SendStringToExecuteEx(const QString& sCmdName, IDispatch* pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sCmdName, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 221, _a);
    return qax_result;
}

inline bool MxDrawX::SendStringToExecuteFun(const QString& sCmdName, IDispatch* pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sCmdName, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 222, _a);
    return qax_result;
}

inline bool MxDrawX::SetCurrentLayout(const QString& pszLayoutName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszLayoutName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 227, _a);
    return qax_result;
}

inline bool MxDrawX::SetCursor(const QString& pszCursorFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszCursorFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 228, _a);
    return qax_result;
}

inline void MxDrawX::SetCursorCrossLong(int lLong)
{
    void *_a[] = {0, (void*)&lLong};
    qt_metacall(QMetaObject::InvokeMetaMethod, 229, _a);
}

inline void MxDrawX::SetCursorPickRect(int lWidth)
{
    void *_a[] = {0, (void*)&lWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 231, _a);
}

inline bool MxDrawX::SetEntityDrawOrder(qlonglong lId, int lOrder)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&lOrder};
    qt_metacall(QMetaObject::InvokeMetaMethod, 250, _a);
    return qax_result;
}

inline void MxDrawX::SetEventRet(int lRet)
{
    void *_a[] = {0, (void*)&lRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 251, _a);
}

inline void MxDrawX::SetEventRetEx(IDispatch* pParam)
{
    void *_a[] = {0, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 252, _a);
}

inline void MxDrawX::SetEventRetString(const QString& pszResult)
{
    void *_a[] = {0, (void*)&pszResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 253, _a);
}

inline bool MxDrawX::SetInputCursorPos(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 269, _a);
    return qax_result;
}

inline bool MxDrawX::SetIsModifyed(bool IsModifyed)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&IsModifyed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 272, _a);
    return qax_result;
}

inline double MxDrawX::SetLayerBright(const QString& sLayerName, double dBright)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sLayerName, (void*)&dBright};
    qt_metacall(QMetaObject::InvokeMetaMethod, 274, _a);
    return qax_result;
}

inline void MxDrawX::SetStatusBarProgressMeter(int lMaxPos)
{
    void *_a[] = {0, (void*)&lMaxPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 288, _a);
}

inline void MxDrawX::SetStatusBarProgressMeterPos(int lPos)
{
    void *_a[] = {0, (void*)&lPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 289, _a);
}

inline bool MxDrawX::SetSysVarDouble(const QString& pszVarName, double dVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&dVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 290, _a);
    return qax_result;
}

inline bool MxDrawX::SetSysVarLong(const QString& pszVarName, int lVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&lVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 291, _a);
    return qax_result;
}

inline bool MxDrawX::SetSysVarString(const QString& pszVarName, const QString& pszVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszVarName, (void*)&pszVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 292, _a);
    return qax_result;
}

inline void MxDrawX::SetToolTipInitialTime(uint ulTime)
{
    void *_a[] = {0, (void*)&ulTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 296, _a);
}

inline void MxDrawX::SetToolTipPopTime(uint ulTime)
{
    void *_a[] = {0, (void*)&ulTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 297, _a);
}

inline void MxDrawX::SetTwinkeColor(IDispatch* pColorResbuf)
{
    void *_a[] = {0, (void*)&pColorResbuf};
    qt_metacall(QMetaObject::InvokeMetaMethod, 298, _a);
}

inline void MxDrawX::SetTwinkeTime(int lTime)
{
    void *_a[] = {0, (void*)&lTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 299, _a);
}

inline void MxDrawX::SetViewTwist(double dAng)
{
    void *_a[] = {0, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 306, _a);
}

inline bool MxDrawX::Show(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 308, _a);
    return qax_result;
}

inline bool MxDrawX::ShowToolBar(const QString& pszToolBarName, bool isShow)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszToolBarName, (void*)&isShow};
    qt_metacall(QMetaObject::InvokeMetaMethod, 309, _a);
    return qax_result;
}

inline bool MxDrawX::StopAllCommand()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 310, _a);
    return qax_result;
}

inline bool MxDrawX::StopAllTwinkeEnt()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 311, _a);
    return qax_result;
}

inline bool MxDrawX::StopTwinkeEnt(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 312, _a);
    return qax_result;
}

inline bool MxDrawX::TrackPopupMenu(double dX, double dY, const QString& pszMenuFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY, (void*)&pszMenuFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 313, _a);
    return qax_result;
}

inline bool MxDrawX::TwinkeEnt(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 314, _a);
    return qax_result;
}

inline bool MxDrawX::UnLoadModule(const QString& sModuleName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sModuleName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 315, _a);
    return qax_result;
}

inline bool MxDrawX::UnLoadToolBar(const QString& sToolBarName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sToolBarName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 316, _a);
    return qax_result;
}

inline void MxDrawX::UpdateDisplay()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 317, _a);
}

inline double MxDrawX::ViewLongToDocCoord(double dLong)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dLong};
    qt_metacall(QMetaObject::InvokeMetaMethod, 318, _a);
    return qax_result;
}

inline IDispatch* MxDrawX::ViewToDocCoord(double dX, double dY)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 319, _a);
    return qax_result;
}

inline bool MxDrawX::WriteBinStream(QVariant& pVarBinArray, const QString& sPassword, int iVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVarBinArray, (void*)&sPassword, (void*)&iVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 320, _a);
    return qax_result;
}

inline bool MxDrawX::WriteJpgToURL(const QString& pszServerUrl, const QString& pszServerProgramUrl, const QString& pszComponentName, int lPort, const QString& pszFileTag, int iWidth, int iHeight, int bkColor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszServerUrl, (void*)&pszServerProgramUrl, (void*)&pszComponentName, (void*)&lPort, (void*)&pszFileTag, (void*)&iWidth, (void*)&iHeight, (void*)&bkColor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 321, _a);
    return qax_result;
}

inline void MxDrawX::ZoomAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 322, _a);
}

inline bool MxDrawX::ZoomCenter(double dCenterX, double dCenterY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 323, _a);
    return qax_result;
}

inline bool MxDrawX::ZoomPan(double dOffsetX, double dOffsetY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetX, (void*)&dOffsetY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 324, _a);
    return qax_result;
}

inline bool MxDrawX::ZoomScale(double dScale)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 325, _a);
    return qax_result;
}

inline bool MxDrawX::ZoomScale2(double dPtx, double dPty, double dScale)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPtx, (void*)&dPty, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 326, _a);
    return qax_result;
}

inline void MxDrawX::ZoomWindow(double dLBx, double dLBy, double dRTx, double dRTy)
{
    void *_a[] = {0, (void*)&dLBx, (void*)&dLBy, (void*)&dRTx, (void*)&dRTy};
    qt_metacall(QMetaObject::InvokeMetaMethod, 327, _a);
}


inline MxDrawXLib::IMxDrawResbuf* MxDrawApplication::Call(const QString& pszFunName, const QString& pszFunParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&pszFunParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawApplication::CallEx(const QString& pszFunName, MxDrawXLib::IMxDrawResbuf* pParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool MxDrawApplication::DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFileName, (void*)&pszJpgFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline bool MxDrawApplication::DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName, int lWidth)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFileName, (void*)&pszJpgFileName, (void*)&lWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawApplication::DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName, int lWidth, int lHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFileName, (void*)&pszJpgFileName, (void*)&lWidth, (void*)&lHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString MxDrawApplication::GetLastError()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawApplication::Iniset(const QString& pszVal)
{
    void *_a[] = {0, (void*)&pszVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawApplication::InitMxDrawOcx(const QString& pszReserve1, const QString& pszReserve2, const QString& pszReserve3, const QString& pszReserve4, const QString& pszReserve5)
{
    void *_a[] = {0, (void*)&pszReserve1, (void*)&pszReserve2, (void*)&pszReserve3, (void*)&pszReserve4, (void*)&pszReserve5};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline bool MxDrawApplication::IsRuningCommand()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawApplication::ListArx()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void MxDrawApplication::LoadArx(const QString& pArxPath)
{
    void *_a[] = {0, (void*)&pArxPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void MxDrawApplication::Regen()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void MxDrawApplication::StopAllCommand()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void MxDrawApplication::UnloadArx(const QString& pArxPath)
{
    void *_a[] = {0, (void*)&pArxPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void MxDrawApplication::UpdateDisplay()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawApplication::WorkingDatabase()
{
    MxDrawXLib::IMxDrawDatabase* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline void MxDrawApplication::ZoomAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void MxDrawApplication::ZoomPrevious()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void MxDrawApplication::ZoomWindow(double dX1, double dY1, double dX2, double dY2)
{
    void *_a[] = {0, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}


inline MxDrawXLib::IMxDrawResbuf* IMxDrawApplication::Call(const QString& pszFunName, const QString& pszFunParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&pszFunParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawApplication::CallEx(const QString& pszFunName, MxDrawXLib::IMxDrawResbuf* pParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszFunName, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool IMxDrawApplication::DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFileName, (void*)&pszJpgFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline bool IMxDrawApplication::DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName, int lWidth)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFileName, (void*)&pszJpgFileName, (void*)&lWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawApplication::DwgToJpg(const QString& pszDwgFileName, const QString& pszJpgFileName, int lWidth, int lHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDwgFileName, (void*)&pszJpgFileName, (void*)&lWidth, (void*)&lHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString IMxDrawApplication::GetLastError()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawApplication::Iniset(const QString& pszVal)
{
    void *_a[] = {0, (void*)&pszVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawApplication::InitMxDrawOcx(const QString& pszReserve1, const QString& pszReserve2, const QString& pszReserve3, const QString& pszReserve4, const QString& pszReserve5)
{
    void *_a[] = {0, (void*)&pszReserve1, (void*)&pszReserve2, (void*)&pszReserve3, (void*)&pszReserve4, (void*)&pszReserve5};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline bool IMxDrawApplication::IsRuningCommand()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawApplication::ListArx()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IMxDrawApplication::LoadArx(const QString& pArxPath)
{
    void *_a[] = {0, (void*)&pArxPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IMxDrawApplication::Regen()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IMxDrawApplication::StopAllCommand()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IMxDrawApplication::UnloadArx(const QString& pArxPath)
{
    void *_a[] = {0, (void*)&pArxPath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IMxDrawApplication::UpdateDisplay()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawApplication::WorkingDatabase()
{
    MxDrawXLib::IMxDrawDatabase* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline void IMxDrawApplication::ZoomAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IMxDrawApplication::ZoomPrevious()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IMxDrawApplication::ZoomWindow(double dX1, double dY1, double dX2, double dY2)
{
    void *_a[] = {0, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}


inline MxDrawXLib::McColor IMxDrawDatabase::CurrentlyColorIndex() const
{
    QVariant qax_result = property("CurrentlyColorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawDatabase::SetCurrentlyColorIndex(MxDrawXLib::McColor value){ setProperty("CurrentlyColorIndex", QVariant(value)); }

inline QString IMxDrawDatabase::CurrentlyDimstyleName() const
{
    QVariant qax_result = property("CurrentlyDimstyleName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDatabase::SetCurrentlyDimstyleName(const QString& value){ setProperty("CurrentlyDimstyleName", QVariant(value)); }

inline QString IMxDrawDatabase::CurrentlyLayerName() const
{
    QVariant qax_result = property("CurrentlyLayerName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDatabase::SetCurrentlyLayerName(const QString& value){ setProperty("CurrentlyLayerName", QVariant(value)); }

inline QString IMxDrawDatabase::CurrentlyLineTypeName() const
{
    QVariant qax_result = property("CurrentlyLineTypeName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDatabase::SetCurrentlyLineTypeName(const QString& value){ setProperty("CurrentlyLineTypeName", QVariant(value)); }

inline double IMxDrawDatabase::CurrentlyLineTypeScale() const
{
    QVariant qax_result = property("CurrentlyLineTypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDatabase::SetCurrentlyLineTypeScale(double value){ setProperty("CurrentlyLineTypeScale", QVariant(value)); }

inline QString IMxDrawDatabase::CurrentlyTextStyle() const
{
    QVariant qax_result = property("CurrentlyTextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDatabase::SetCurrentlyTextStyle(const QString& value){ setProperty("CurrentlyTextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawDatabase::CurrentlyTrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("CurrentlyTrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawDatabase::SetCurrentlyTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("CurrentlyTrueColor", QVariant(typeId, &value));
}

inline QString IMxDrawDatabase::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawDatabase::Insbase() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Insbase");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDatabase::SetInsbase(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Insbase", QVariant(typeId, &value));
}

inline qlonglong IMxDrawDatabase::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDatabase::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double IMxDrawDatabase::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDatabase::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline QString IMxDrawDatabase::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawBlockTableRecord* IMxDrawDatabase::CurrentSpace()
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockTable* IMxDrawDatabase::GetBlockTable()
{
    MxDrawXLib::IMxDrawBlockTable* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTable*>("IMxDrawBlockTable*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTable>("IMxDrawBlockTable", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimStyleTable* IMxDrawDatabase::GetDimStyleTable()
{
    MxDrawXLib::IMxDrawDimStyleTable* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTable*>("IMxDrawDimStyleTable*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTable>("IMxDrawDimStyleTable", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLayerTable* IMxDrawDatabase::GetLayerTable()
{
    MxDrawXLib::IMxDrawLayerTable* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTable*>("IMxDrawLayerTable*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTable>("IMxDrawLayerTable", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDatabase::GetLayoutDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLinetypeTable* IMxDrawDatabase::GetLinetypeTable()
{
    MxDrawXLib::IMxDrawLinetypeTable* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTable*>("IMxDrawLinetypeTable*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTable>("IMxDrawLinetypeTable", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDatabase::GetNamedObjectsDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDatabase::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTextStyleTable* IMxDrawDatabase::GetTextStyleTable()
{
    MxDrawXLib::IMxDrawTextStyleTable* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTable*>("IMxDrawTextStyleTable*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTable>("IMxDrawTextStyleTable", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawUcs* IMxDrawDatabase::GetUCS()
{
    MxDrawXLib::IMxDrawUcs* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawUcs*>("IMxDrawUcs*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawUcs>("IMxDrawUcs", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDatabase::HandleToObject(const QString& handle)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&handle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong IMxDrawDatabase::HandleToObjectId(const QString& pszHandle)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline qlonglong IMxDrawDatabase::Insert(MxDrawXLib::IMxDrawDatabase* pDb, const QString& pszBlockName)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pDb, (void*)&pszBlockName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QString IMxDrawDatabase::ObjectIdToHandle(qlonglong lId)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDatabase::ObjectIdToObject(qlonglong lId)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool IMxDrawDatabase::ReadDwgFile(const QString& pszFullFileName, const QString& password)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFullFileName, (void*)&password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawDatabase::SaveAs(const QString& pszFullFileName, int SaveAsType)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFullFileName, (void*)&SaveAsType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool IMxDrawDatabase::SaveAs(const QString& pszFullFileName, int SaveAsType, const QVariant& vSecurityParams)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFullFileName, (void*)&SaveAsType, (void*)&vSecurityParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawDatabase::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline void IMxDrawDatabase::SetVariable(const QString& pszName, MxDrawXLib::IMxDrawResbuf* value)
{
    void *_a[] = {0, (void*)&pszName, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawDatabase::Wblock(MxDrawXLib::IMxDrawResbuf* aryId, MxDrawXLib::IMxDrawPoint* basePoint, MxDrawXLib::IMxDrawIdMapping** ppIdMapping)
{
    MxDrawXLib::IMxDrawDatabase* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryId, (void*)&basePoint, (void*)&ppIdMapping};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}


inline QString IMxDrawMcRxObject::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawMcRxObject::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawMcRxObject::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawMcRxObject::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawMcRxObject::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool IMxDrawMcRxObject::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int IMxDrawResbuf::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IMxDrawResbuf::AddAppName(const QString& pszAppName)
{
    void *_a[] = {0, (void*)&pszAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IMxDrawResbuf::AddDouble(double dVal)
{
    void *_a[] = {0, (void*)&dVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawResbuf::AddDoubleEx(double dVal)
{
    void *_a[] = {0, (void*)&dVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawResbuf::AddDoubleEx(double dVal, int lDataType)
{
    void *_a[] = {0, (void*)&dVal, (void*)&lDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawResbuf::AddLong(int lVal)
{
    void *_a[] = {0, (void*)&lVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IMxDrawResbuf::AddLongEx(int lVal)
{
    void *_a[] = {0, (void*)&lVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IMxDrawResbuf::AddLongEx(int lVal, int lDataType)
{
    void *_a[] = {0, (void*)&lVal, (void*)&lDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawResbuf::AddObjectId(qlonglong lVal)
{
    void *_a[] = {0, (void*)&lVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IMxDrawResbuf::AddObjectIdEx(qlonglong lVal)
{
    void *_a[] = {0, (void*)&lVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IMxDrawResbuf::AddObjectIdEx(qlonglong lVal, int lDataType)
{
    void *_a[] = {0, (void*)&lVal, (void*)&lDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IMxDrawResbuf::AddPoint(MxDrawXLib::IMxDrawPoint* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IMxDrawResbuf::AddPointEx(MxDrawXLib::IMxDrawPoint* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IMxDrawResbuf::AddPointEx(MxDrawXLib::IMxDrawPoint* pVal, int lDataType)
{
    void *_a[] = {0, (void*)&pVal, (void*)&lDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IMxDrawResbuf::AddString(const QString& pszVal)
{
    void *_a[] = {0, (void*)&pszVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IMxDrawResbuf::AddStringEx(const QString& pszVal)
{
    void *_a[] = {0, (void*)&pszVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IMxDrawResbuf::AddStringEx(const QString& pszVal, int lDataType)
{
    void *_a[] = {0, (void*)&pszVal, (void*)&lDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline double IMxDrawResbuf::AtDouble(int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int IMxDrawResbuf::AtLong(int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawResbuf::AtObject(int lItem)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline qlonglong IMxDrawResbuf::AtObjectId(int lItem)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawResbuf::AtPoint(int lItem)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString IMxDrawResbuf::AtString(int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline int IMxDrawResbuf::ItemDataType(int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline void IMxDrawResbuf::PrintData()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void IMxDrawResbuf::Remove(int lItem)
{
    void *_a[] = {0, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawResbuf::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}


inline double IMxDrawPoint::x() const
{
    QVariant qax_result = property("x");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPoint::setX(double value){ setProperty("x", QVariant(value)); }

inline double IMxDrawPoint::y() const
{
    QVariant qax_result = property("y");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPoint::setY(double value){ setProperty("y", QVariant(value)); }

inline double IMxDrawPoint::z() const
{
    QVariant qax_result = property("z");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPoint::setZ(double value){ setProperty("z", QVariant(value)); }

inline void IMxDrawPoint::Add(MxDrawXLib::IMxDrawVector3d* pVec)
{
    void *_a[] = {0, (void*)&pVec};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline double IMxDrawPoint::DistanceTo(MxDrawXLib::IMxDrawPoint* pPoint)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool IMxDrawPoint::IsEqualTo(MxDrawXLib::IMxDrawPoint* pPoint, double dTol)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pPoint, (void*)&dTol};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IMxDrawPoint::Sum(MxDrawXLib::IMxDrawVector3d* pVec)
{
    void *_a[] = {0, (void*)&pVec};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawPoint::SumVector(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawPoint::TransformBy(MxDrawXLib::IMxDrawMatrix3d* pMat)
{
    void *_a[] = {0, (void*)&pMat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}


inline double IMxDrawMatrix3d::Det()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline double IMxDrawMatrix3d::Get(int iRow, int iCol)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iRow, (void*)&iCol};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawMatrix3d::GetCoordSystem(MxDrawXLib::IMxDrawPoint** ppOrigin, MxDrawXLib::IMxDrawVector3d** ppXAxis, MxDrawXLib::IMxDrawVector3d** ppYAxis, MxDrawXLib::IMxDrawVector3d** ppZAxis)
{
    void *_a[] = {0, (void*)&ppOrigin, (void*)&ppXAxis, (void*)&ppYAxis, (void*)&ppZAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawMatrix3d::GetCoordSystem2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void IMxDrawMatrix3d::Invert()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline bool IMxDrawMatrix3d::IsEqualTo(MxDrawXLib::IMxDrawMatrix3d* pMat)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pMat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool IMxDrawMatrix3d::IsScaledOrtho()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawMatrix3d::IsSingular(double dTol)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dTol};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IMxDrawMatrix3d::IsUniScaledOrtho()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawMatrix3d::Mirroring(MxDrawXLib::IMxDrawPoint* pPt1, MxDrawXLib::IMxDrawPoint* pPt2)
{
    void *_a[] = {0, (void*)&pPt1, (void*)&pPt2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IMxDrawMatrix3d::PostMultBy(MxDrawXLib::IMxDrawMatrix3d* pRightSide)
{
    void *_a[] = {0, (void*)&pRightSide};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IMxDrawMatrix3d::PreMultBy(MxDrawXLib::IMxDrawMatrix3d* pLeftSide)
{
    void *_a[] = {0, (void*)&pLeftSide};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IMxDrawMatrix3d::Rotation(double dAng, MxDrawXLib::IMxDrawVector3d* pAxis, MxDrawXLib::IMxDrawPoint* pCenter)
{
    void *_a[] = {0, (void*)&dAng, (void*)&pAxis, (void*)&pCenter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IMxDrawMatrix3d::Scaling(double dScaleAll, MxDrawXLib::IMxDrawPoint* pCenter)
{
    void *_a[] = {0, (void*)&dScaleAll, (void*)&pCenter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IMxDrawMatrix3d::Set(int iRow, int iCol, double dVal)
{
    void *_a[] = {0, (void*)&iRow, (void*)&iCol, (void*)&dVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IMxDrawMatrix3d::SetCoordSystem(MxDrawXLib::IMxDrawPoint* pOrigin, MxDrawXLib::IMxDrawVector3d* pXAxis, MxDrawXLib::IMxDrawVector3d* pYAxis, MxDrawXLib::IMxDrawVector3d* pZAxis)
{
    void *_a[] = {0, (void*)&pOrigin, (void*)&pXAxis, (void*)&pYAxis, (void*)&pZAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IMxDrawMatrix3d::SetToIdentity()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IMxDrawMatrix3d::Translation(MxDrawXLib::IMxDrawVector3d* pVector3d)
{
    void *_a[] = {0, (void*)&pVector3d};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IMxDrawMatrix3d::TransposeIt()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}


inline double IMxDrawVector3d::x() const
{
    QVariant qax_result = property("x");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawVector3d::setX(double value){ setProperty("x", QVariant(value)); }

inline double IMxDrawVector3d::y() const
{
    QVariant qax_result = property("y");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawVector3d::setY(double value){ setProperty("y", QVariant(value)); }

inline double IMxDrawVector3d::z() const
{
    QVariant qax_result = property("z");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawVector3d::setZ(double value){ setProperty("z", QVariant(value)); }

inline void IMxDrawVector3d::Add(MxDrawXLib::IMxDrawVector3d* pVector)
{
    void *_a[] = {0, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline double IMxDrawVector3d::Angle()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline double IMxDrawVector3d::AngleTo(MxDrawXLib::IMxDrawVector3d* pVector)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline double IMxDrawVector3d::AngleTo(MxDrawXLib::IMxDrawVector3d* pVector, MxDrawXLib::IMxDrawVector3d* pRefVec)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVector, (void*)&pRefVec};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline double IMxDrawVector3d::AngleToXyPlan(MxDrawXLib::IMxDrawVector3d* pVector)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawVector3d::CrossProduct(MxDrawXLib::IMxDrawVector3d* pVector)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline double IMxDrawVector3d::DotProduct(MxDrawXLib::IMxDrawVector3d* pVector)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawVector3d::IsEqualTo(MxDrawXLib::IMxDrawVector3d* pVector)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IMxDrawVector3d::IsZeroLength()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double IMxDrawVector3d::Length()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IMxDrawVector3d::MakeXAxis()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IMxDrawVector3d::MakeYAxis()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IMxDrawVector3d::MakeZAxis()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IMxDrawVector3d::Mult(double dScl)
{
    void *_a[] = {0, (void*)&dScl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IMxDrawVector3d::Negate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IMxDrawVector3d::Normalize()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IMxDrawVector3d::RotateBy(double dAng)
{
    void *_a[] = {0, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IMxDrawVector3d::RotateBy(double dAng, MxDrawXLib::IMxDrawVector3d* pAxis)
{
    void *_a[] = {0, (void*)&dAng, (void*)&pAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IMxDrawVector3d::RotateByXyPlan(double dAng)
{
    void *_a[] = {0, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IMxDrawVector3d::Sub(MxDrawXLib::IMxDrawVector3d* pVector)
{
    void *_a[] = {0, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IMxDrawVector3d::TransformBy(MxDrawXLib::IMxDrawMatrix3d* pMat)
{
    void *_a[] = {0, (void*)&pMat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}


inline int IMxDrawPoints::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IMxDrawPoints::Add(double dX, double dY, double dZ)
{
    void *_a[] = {0, (void*)&dX, (void*)&dY, (void*)&dZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IMxDrawPoints::Add2(MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawPoints::Item(int lItem)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IMxDrawPoints::Remove(int lItem)
{
    void *_a[] = {0, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawPoints::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawMcDbObject::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawMcDbObject::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawMcDbObject::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawMcDbObject::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawMcDbObject::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawMcDbObject::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawMcDbObject::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawMcDbObject::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawMcDbObject::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawMcDbObject::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMxDrawMcDbObject::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawMcDbObject::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawMcDbObject::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawMcDbObject::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IMxDrawMcDbObject::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawDictionary::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawDictionary::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawDictionary::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawDictionary::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDictionary::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDictionary::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDictionary::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawDictionary::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDictionary::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDictionary::AddObject(const QString& pszKeyWord, const QString& pszClassName)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszKeyWord, (void*)&pszClassName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawXRecord* IMxDrawDictionary::AddXRecord(const QString& pszKeyWord)
{
    MxDrawXLib::IMxDrawXRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawXRecord*>("IMxDrawXRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawXRecord>("IMxDrawXRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDictionary::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IMxDrawDictionary::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawDictionary::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDictionary::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDictionary::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDictionary::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDictionary::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionaryIterator* IMxDrawDictionary::NewIterator()
{
    MxDrawXLib::IMxDrawDictionaryIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionaryIterator*>("IMxDrawDictionaryIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionaryIterator>("IMxDrawDictionaryIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IMxDrawDictionary::Remove(const QString& pszName)
{
    void *_a[] = {0, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IMxDrawDictionary::Rename(const QString& pszOldName, const QString& pszNewName)
{
    void *_a[] = {0, (void*)&pszOldName, (void*)&pszNewName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IMxDrawDictionary::Replace(const QString& pszName, MxDrawXLib::IMxDrawMcDbObject* pObject)
{
    void *_a[] = {0, (void*)&pszName, (void*)&pObject};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline bool IMxDrawDictionary::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawXRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawXRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawXRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawXRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawXRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool IMxDrawXRecord::IsXlateReferences() const
{
    QVariant qax_result = property("IsXlateReferences");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawXRecord::SetIsXlateReferences(bool value){ setProperty("IsXlateReferences", QVariant(value)); }

inline qlonglong IMxDrawXRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawXRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawXRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawXRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawXRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMxDrawXRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawXRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawXRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawXRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawXRecord::GetXRecordData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool IMxDrawXRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void IMxDrawXRecord::SetXRecordData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline bool IMxDrawDictionaryIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDictionaryIterator::GetObject()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QString IMxDrawDictionaryIterator::Name()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IMxDrawDictionaryIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawBlockTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawBlockTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawBlockTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawBlockTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawBlockTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawBlockTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawBlockTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline qlonglong IMxDrawBlockTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawBlockTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawBlockTableRecord::Origin() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Origin");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawBlockTableRecord::SetOrigin(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Origin", QVariant(typeId, &value));
}

inline qlonglong IMxDrawBlockTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawBlockTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawArc* IMxDrawBlockTableRecord::AddArc(double dCenX, double dCenY, double dRadius, double dStartAng, double dEndAng)
{
    MxDrawXLib::IMxDrawArc* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawArc*>("IMxDrawArc*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawArc>("IMxDrawArc", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dRadius, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawArc* IMxDrawBlockTableRecord::AddArc2(double dStartPointX, double dStartPointY, double dX, double dY, double dEndPointX, double dEndPointY)
{
    MxDrawXLib::IMxDrawArc* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawArc*>("IMxDrawArc*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawArc>("IMxDrawArc", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dX, (void*)&dY, (void*)&dEndPointX, (void*)&dEndPointY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawArc* IMxDrawBlockTableRecord::AddArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge)
{
    MxDrawXLib::IMxDrawArc* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawArc*>("IMxDrawArc*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawArc>("IMxDrawArc", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dEndPointX, (void*)&dEndPointY, (void*)&dBulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawAttributeDefinition* IMxDrawBlockTableRecord::AddAttributeDef(double dHeight, MxDrawXLib::McAttributeMode mode, const QString& pszPrompt, double dInsertionPointX, double dInsertionPointY, const QString& pszTag, const QString& pszValue)
{
    MxDrawXLib::IMxDrawAttributeDefinition* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawAttributeDefinition*>("IMxDrawAttributeDefinition*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawAttributeDefinition>("IMxDrawAttributeDefinition", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dHeight, (void*)&mode, (void*)&pszPrompt, (void*)&dInsertionPointX, (void*)&dInsertionPointY, (void*)&pszTag, (void*)&pszValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawCircle* IMxDrawBlockTableRecord::AddCircle(double dCenX, double dCenY, double dRadius)
{
    MxDrawXLib::IMxDrawCircle* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCircle*>("IMxDrawCircle*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCircle>("IMxDrawCircle", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dRadius};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEntity* IMxDrawBlockTableRecord::AddCloneEntity(qlonglong lId)
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline IDispatch* IMxDrawBlockTableRecord::AddCustomObject(const QString& pszClassName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszClassName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimAligned* IMxDrawBlockTableRecord::AddDimAligned(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dTextPositionX, double dTextPositionY)
{
    MxDrawXLib::IMxDrawDimAligned* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAligned*>("IMxDrawDimAligned*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAligned>("IMxDrawDimAligned", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dExtLine1PointX, (void*)&dExtLine1PointY, (void*)&dExtLine2PointX, (void*)&dExtLine2PointY, (void*)&dTextPositionX, (void*)&dTextPositionY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimAngular* IMxDrawBlockTableRecord::AddDimAngular(double dAngleVertexX, double dAngleVertexY, double dFirstEndPointX, double dFirstEndPointY, double dSecondEndPointX, double dSecondEndPointY, double dTextPointX, double dTextPointY)
{
    MxDrawXLib::IMxDrawDimAngular* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAngular*>("IMxDrawDimAngular*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAngular>("IMxDrawDimAngular", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dAngleVertexX, (void*)&dAngleVertexY, (void*)&dFirstEndPointX, (void*)&dFirstEndPointY, (void*)&dSecondEndPointX, (void*)&dSecondEndPointY, (void*)&dTextPointX, (void*)&dTextPointY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimDiametric* IMxDrawBlockTableRecord::AddDimDiametric(double dChordPointX, double dChordPointY, double dFarChordPointX, double dFarChordPointY, double dLeaderLength)
{
    MxDrawXLib::IMxDrawDimDiametric* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimDiametric*>("IMxDrawDimDiametric*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimDiametric>("IMxDrawDimDiametric", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dChordPointX, (void*)&dChordPointY, (void*)&dFarChordPointX, (void*)&dFarChordPointY, (void*)&dLeaderLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimOrdinate* IMxDrawBlockTableRecord::AddDimOrdinate(double dDefinitionPointX, double dDefinitionPointY, double dLeaderEndPointX, double dLeaderEndPointY, bool useXAxis)
{
    MxDrawXLib::IMxDrawDimOrdinate* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimOrdinate*>("IMxDrawDimOrdinate*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimOrdinate>("IMxDrawDimOrdinate", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDefinitionPointX, (void*)&dDefinitionPointY, (void*)&dLeaderEndPointX, (void*)&dLeaderEndPointY, (void*)&useXAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimRadial* IMxDrawBlockTableRecord::AddDimRadial(double dCenterX, double dCenterY, double dChordPointX, double dChordPointY, double LeaderLength)
{
    MxDrawXLib::IMxDrawDimRadial* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRadial*>("IMxDrawDimRadial*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRadial>("IMxDrawDimRadial", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dChordPointX, (void*)&dChordPointY, (void*)&LeaderLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimRotated* IMxDrawBlockTableRecord::AddDimRotated(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dDimLineLocationX, double dDimLineLocationY, double dRotationAngle)
{
    MxDrawXLib::IMxDrawDimRotated* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRotated*>("IMxDrawDimRotated*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRotated>("IMxDrawDimRotated", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dExtLine1PointX, (void*)&dExtLine1PointY, (void*)&dExtLine2PointX, (void*)&dExtLine2PointY, (void*)&dDimLineLocationX, (void*)&dDimLineLocationY, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEllipse* IMxDrawBlockTableRecord::AddEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio)
{
    MxDrawXLib::IMxDrawEllipse* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse*>("IMxDrawEllipse*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse>("IMxDrawEllipse", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEllipse* IMxDrawBlockTableRecord::AddEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng)
{
    MxDrawXLib::IMxDrawEllipse* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse*>("IMxDrawEllipse*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse>("IMxDrawEllipse", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEntity* IMxDrawBlockTableRecord::AddEntity(const QString& pszClassName)
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszClassName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEntity* IMxDrawBlockTableRecord::AddEntityEx(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawHatch* IMxDrawBlockTableRecord::AddHatch(int lPatternType, const QString& pszPatternName)
{
    MxDrawXLib::IMxDrawHatch* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawHatch*>("IMxDrawHatch*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawHatch>("IMxDrawHatch", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lPatternType, (void*)&pszPatternName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawRasterImage* IMxDrawBlockTableRecord::AddImage(double dOriginX, double dOriginY, double dUCornerX, double dUCornerY, double dVOnPlaneX, double dVOnPlaneY, qlonglong ImageDefId)
{
    MxDrawXLib::IMxDrawRasterImage* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage*>("IMxDrawRasterImage*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage>("IMxDrawRasterImage", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOriginX, (void*)&dOriginY, (void*)&dUCornerX, (void*)&dUCornerY, (void*)&dVOnPlaneX, (void*)&dVOnPlaneY, (void*)&ImageDefId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawRasterImage* IMxDrawBlockTableRecord::AddImage2(double dOriginX, double dOriginY, double dScale, qlonglong ImageDefId)
{
    MxDrawXLib::IMxDrawRasterImage* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage*>("IMxDrawRasterImage*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage>("IMxDrawRasterImage", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOriginX, (void*)&dOriginY, (void*)&dScale, (void*)&ImageDefId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawImageMark* IMxDrawBlockTableRecord::AddImageMark(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFileName, const QString& pszTwinkeImageFiles, bool isSaveData)
{
    MxDrawXLib::IMxDrawImageMark* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawImageMark*>("IMxDrawImageMark*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawImageMark>("IMxDrawImageMark", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&dScale, (void*)&dAng, (void*)&pszFileName, (void*)&pszTwinkeImageFiles, (void*)&isSaveData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLine* IMxDrawBlockTableRecord::AddLine(double dX1, double dY1, double dX2, double dY2)
{
    MxDrawXLib::IMxDrawLine* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLine*>("IMxDrawLine*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLine>("IMxDrawLine", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPolyline* IMxDrawBlockTableRecord::AddLines(MxDrawXLib::IMxDrawPoints* points)
{
    MxDrawXLib::IMxDrawPolyline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline*>("IMxDrawPolyline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline>("IMxDrawPolyline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMText* IMxDrawBlockTableRecord::AddMText(double dInsertionPointX, double dInsertionPointY, double dHeight, const QString& pszText)
{
    MxDrawXLib::IMxDrawMText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMText*>("IMxDrawMText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMText>("IMxDrawMText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dInsertionPointX, (void*)&dInsertionPointY, (void*)&dHeight, (void*)&pszText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPointEntity* IMxDrawBlockTableRecord::AddPoint(double dX1, double dY1)
{
    MxDrawXLib::IMxDrawPointEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPointEntity*>("IMxDrawPointEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPointEntity>("IMxDrawPointEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPolyline* IMxDrawBlockTableRecord::AddPolyline(MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* sWdiths, MxDrawXLib::IMxDrawResbuf* eWidths, MxDrawXLib::IMxDrawResbuf* bulges)
{
    MxDrawXLib::IMxDrawPolyline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline*>("IMxDrawPolyline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline>("IMxDrawPolyline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&sWdiths, (void*)&eWidths, (void*)&bulges};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPolyline* IMxDrawBlockTableRecord::AddPolyline2(MxDrawXLib::IMxDrawPoints* points, double dWidth)
{
    MxDrawXLib::IMxDrawPolyline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline*>("IMxDrawPolyline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline>("IMxDrawPolyline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&dWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawRay* IMxDrawBlockTableRecord::AddRay(double dX1, double dY1, double dX2, double dY2)
{
    MxDrawXLib::IMxDrawRay* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawRay*>("IMxDrawRay*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawRay>("IMxDrawRay", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawSolid* IMxDrawBlockTableRecord::AddSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4)
{
    MxDrawXLib::IMxDrawSolid* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawSolid*>("IMxDrawSolid*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawSolid>("IMxDrawSolid", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2, (void*)&dX3, (void*)&dY3, (void*)&dX4, (void*)&dY4};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawSpline* IMxDrawBlockTableRecord::AddSpline(MxDrawXLib::IMxDrawPoints* points, double dStartTangentX, double dStartTangentY, double dEndTangentX, double dEndTangentY)
{
    MxDrawXLib::IMxDrawSpline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawSpline*>("IMxDrawSpline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawSpline>("IMxDrawSpline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&dStartTangentX, (void*)&dStartTangentY, (void*)&dEndTangentX, (void*)&dEndTangentY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawText* IMxDrawBlockTableRecord::AddText(double dPosX, double dPosY, const QString& pszText, double dHeight)
{
    MxDrawXLib::IMxDrawText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawText*>("IMxDrawText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawText>("IMxDrawText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawText* IMxDrawBlockTableRecord::AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation)
{
    MxDrawXLib::IMxDrawText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawText*>("IMxDrawText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawText>("IMxDrawText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawText* IMxDrawBlockTableRecord::AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode)
{
    MxDrawXLib::IMxDrawText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawText*>("IMxDrawText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawText>("IMxDrawText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation, (void*)&horizontalMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawText* IMxDrawBlockTableRecord::AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode, MxDrawXLib::McVerticalAlignment verticalMode)
{
    MxDrawXLib::IMxDrawText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawText*>("IMxDrawText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawText>("IMxDrawText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation, (void*)&horizontalMode, (void*)&verticalMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTolerance* IMxDrawBlockTableRecord::AddTolerance(const QString& pszText, double dX, double dY, double dDirectionX, double dDirectionY)
{
    MxDrawXLib::IMxDrawTolerance* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTolerance*>("IMxDrawTolerance*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTolerance>("IMxDrawTolerance", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszText, (void*)&dX, (void*)&dY, (void*)&dDirectionX, (void*)&dDirectionY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTrace* IMxDrawBlockTableRecord::AddTrace(MxDrawXLib::IMxDrawPoints* points)
{
    MxDrawXLib::IMxDrawTrace* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTrace*>("IMxDrawTrace*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTrace>("IMxDrawTrace", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawXline* IMxDrawBlockTableRecord::AddXline(double dX1, double dY1, double dX2, double dY2)
{
    MxDrawXLib::IMxDrawXline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawXline*>("IMxDrawXline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawXline>("IMxDrawXline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawBlockTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void IMxDrawBlockTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void IMxDrawBlockTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawBlockTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline bool IMxDrawBlockTableRecord::GetIsLayout()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLayout* IMxDrawBlockTableRecord::GetLayout()
{
    MxDrawXLib::IMxDrawLayout* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayout*>("IMxDrawLayout*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayout>("IMxDrawLayout", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawBlockTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockReference* IMxDrawBlockTableRecord::InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName)
{
    MxDrawXLib::IMxDrawBlockReference* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference*>("IMxDrawBlockReference*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference>("IMxDrawBlockReference", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dInsertPointX, (void*)&dInsertPointY, (void*)&psxBlkName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockReference* IMxDrawBlockTableRecord::InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale)
{
    MxDrawXLib::IMxDrawBlockReference* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference*>("IMxDrawBlockReference*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference>("IMxDrawBlockReference", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dInsertPointX, (void*)&dInsertPointY, (void*)&psxBlkName, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockReference* IMxDrawBlockTableRecord::InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale, double dAng)
{
    MxDrawXLib::IMxDrawBlockReference* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference*>("IMxDrawBlockReference*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference>("IMxDrawBlockReference", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dInsertPointX, (void*)&dInsertPointY, (void*)&psxBlkName, (void*)&dScale, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockTableRecordIterator* IMxDrawBlockTableRecord::NewIterator()
{
    MxDrawXLib::IMxDrawBlockTableRecordIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecordIterator*>("IMxDrawBlockTableRecordIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecordIterator>("IMxDrawBlockTableRecordIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool IMxDrawBlockTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawSymbolTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawSymbolTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawSymbolTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawSymbolTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawSymbolTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawSymbolTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawSymbolTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline qlonglong IMxDrawSymbolTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawSymbolTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawSymbolTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawSymbolTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawSymbolTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMxDrawSymbolTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawSymbolTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawSymbolTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSymbolTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IMxDrawSymbolTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawLine::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawLine::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawLine::EndPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("EndPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawLine::SetEndPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("EndPoint", QVariant(typeId, &value));
}

inline bool IMxDrawLine::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawLine::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawLine::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawLine::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawLine::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLine::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawLine::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawLine::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawLine::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawLine::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawLine::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawLine::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawLine::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawLine::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawLine::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawLine::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLine::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawLine::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawLine::StartPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("StartPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawLine::SetStartPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("StartPoint", QVariant(typeId, &value));
}

inline QString IMxDrawLine::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawLine::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawLine::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawLine::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawLine::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawLine::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawLine::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawLine::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawLine::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawLine::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawLine::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawLine::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawLine::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawLine::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawLine::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawLine::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double IMxDrawLine::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawLine::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawLine::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawLine::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double IMxDrawLine::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double IMxDrawLine::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawLine::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawLine::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawLine::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawLine::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawLine::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double IMxDrawLine::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double IMxDrawLine::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double IMxDrawLine::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawLine::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawLine::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawLine::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawLine::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawLine::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double IMxDrawLine::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawLine::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawLine::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double IMxDrawLine::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int IMxDrawLine::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool IMxDrawLine::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString IMxDrawLine::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IMxDrawLine::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawLine::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool IMxDrawLine::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void IMxDrawLine::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IMxDrawLine::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool IMxDrawLine::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawLine::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void IMxDrawLine::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IMxDrawLine::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool IMxDrawLine::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void IMxDrawLine::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline bool IMxDrawLine::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool IMxDrawLine::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool IMxDrawLine::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline bool IMxDrawLine::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawLine::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline void IMxDrawLine::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawCurve::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawCurve::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawCurve::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawCurve::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCurve::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawCurve::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawCurve::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawCurve::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCurve::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawCurve::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCurve::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawCurve::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawCurve::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawCurve::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawCurve::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawCurve::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawCurve::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawCurve::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawCurve::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawCurve::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawCurve::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCurve::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawCurve::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawCurve::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawCurve::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawCurve::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawCurve::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawCurve::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawCurve::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawCurve::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawCurve::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawCurve::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawCurve::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawCurve::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawCurve::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCurve::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double IMxDrawCurve::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawCurve::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawCurve::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCurve::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double IMxDrawCurve::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double IMxDrawCurve::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawCurve::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCurve::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawCurve::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawCurve::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawCurve::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double IMxDrawCurve::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double IMxDrawCurve::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double IMxDrawCurve::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCurve::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCurve::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCurve::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawCurve::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawCurve::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double IMxDrawCurve::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCurve::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCurve::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double IMxDrawCurve::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int IMxDrawCurve::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool IMxDrawCurve::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString IMxDrawCurve::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IMxDrawCurve::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawCurve::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool IMxDrawCurve::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void IMxDrawCurve::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IMxDrawCurve::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool IMxDrawCurve::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCurve::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void IMxDrawCurve::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IMxDrawCurve::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool IMxDrawCurve::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline void IMxDrawCurve::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline bool IMxDrawCurve::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline bool IMxDrawCurve::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool IMxDrawCurve::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool IMxDrawCurve::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCurve::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline void IMxDrawCurve::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawEntity::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawEntity::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawEntity::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawEntity::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEntity::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawEntity::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawEntity::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawEntity::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEntity::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawEntity::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEntity::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawEntity::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawEntity::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawEntity::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawEntity::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawEntity::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawEntity::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawEntity::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawEntity::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawEntity::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawEntity::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEntity::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawEntity::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawEntity::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawEntity::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawEntity::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawEntity::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawEntity::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawEntity::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawEntity::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawEntity::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawEntity::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawEntity::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawEntity::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawEntity::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawEntity::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawEntity::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawEntity::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawEntity::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawEntity::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawEntity::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawEntity::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double IMxDrawEntity::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawEntity::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IMxDrawEntity::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawEntity::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString IMxDrawEntity::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IMxDrawEntity::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawEntity::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawEntity::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IMxDrawEntity::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawEntity::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawEntity::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawEntity::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void IMxDrawEntity::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool IMxDrawEntity::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool IMxDrawEntity::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool IMxDrawEntity::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void IMxDrawEntity::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}


inline MxDrawXLib::McColorMethod IMxDrawMcCmColor::ColorMethod() const
{
    QVariant qax_result = property("ColorMethod");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColorMethod*)qax_result.constData();
}
inline void IMxDrawMcCmColor::SetColorMethod(MxDrawXLib::McColorMethod value){ setProperty("ColorMethod", QVariant(value)); }

inline int IMxDrawMcCmColor::EntityColor() const
{
    QVariant qax_result = property("EntityColor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawMcCmColor::SetEntityColor(int value){ setProperty("EntityColor", QVariant(value)); }

inline int IMxDrawMcCmColor::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawMcCmColor::setColorIndex(int value){ setProperty("colorIndex", QVariant(value)); }

inline int IMxDrawMcCmColor::GetBlue()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QString IMxDrawMcCmColor::GetColorName()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int IMxDrawMcCmColor::GetGreen()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int IMxDrawMcCmColor::GetRed()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void IMxDrawMcCmColor::SetRGB(int lRed, int lGreen, int lBlue)
{
    void *_a[] = {0, (void*)&lRed, (void*)&lGreen, (void*)&lBlue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline double IMxDrawPolyline::ConstantWidth() const
{
    QVariant qax_result = property("ConstantWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPolyline::SetConstantWidth(double value){ setProperty("ConstantWidth", QVariant(value)); }

inline MxDrawXLib::IMxDrawDatabase* IMxDrawPolyline::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawPolyline::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawPolyline::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPolyline::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool IMxDrawPolyline::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IMxDrawPolyline::HasPlinegen() const
{
    QVariant qax_result = property("HasPlinegen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawPolyline::SetHasPlinegen(bool value){ setProperty("HasPlinegen", QVariant(value)); }

inline QString IMxDrawPolyline::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPolyline::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawPolyline::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawPolyline::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool IMxDrawPolyline::IsClosedStatus() const
{
    QVariant qax_result = property("IsClosedStatus");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawPolyline::SetIsClosedStatus(bool value){ setProperty("IsClosedStatus", QVariant(value)); }

inline QString IMxDrawPolyline::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPolyline::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawPolyline::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPolyline::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawPolyline::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPolyline::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawPolyline::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawPolyline::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawPolyline::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawPolyline::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline int IMxDrawPolyline::NumVerts() const
{
    QVariant qax_result = property("NumVerts");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline qlonglong IMxDrawPolyline::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawPolyline::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawPolyline::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawPolyline::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPolyline::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline double IMxDrawPolyline::Thickness() const
{
    QVariant qax_result = property("Thickness");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPolyline::SetThickness(double value){ setProperty("Thickness", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawPolyline::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawPolyline::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawPolyline::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawPolyline::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawPolyline::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawPolyline::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawPolyline::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawPolyline::AddVertexAt(MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IMxDrawPolyline::AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge)
{
    void *_a[] = {0, (void*)&point, (void*)&bulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawPolyline::AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge, double startWidth)
{
    void *_a[] = {0, (void*)&point, (void*)&bulge, (void*)&startWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawPolyline::AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge, double startWidth, double endWidth)
{
    void *_a[] = {0, (void*)&point, (void*)&bulge, (void*)&startWidth, (void*)&endWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawPolyline::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawPolyline::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawPolyline::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline IDispatch* IMxDrawPolyline::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawPolyline::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawPolyline::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void IMxDrawPolyline::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawPolyline::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetBulgeAt(int index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawPolyline::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetEWidthsAt(int index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawPolyline::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawPolyline::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawPolyline::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawPolyline::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawPolyline::GetPointAt(int index)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawPolyline::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawPolyline::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawPolyline::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetSWidthsAt(int index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawPolyline::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawPolyline::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawPolyline::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline void IMxDrawPolyline::GetWidthsAt(int index, double& pStartWidth, double& pEndWidth)
{
    void *_a[] = {0, (void*)&index, (void*)&pStartWidth, (void*)&pEndWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawPolyline::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline double IMxDrawPolyline::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline int IMxDrawPolyline::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline QString IMxDrawPolyline::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline void IMxDrawPolyline::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawPolyline::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline void IMxDrawPolyline::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void IMxDrawPolyline::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline bool IMxDrawPolyline::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawPolyline::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::PointInPolygon(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void IMxDrawPolyline::RemoveVertexAt(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void IMxDrawPolyline::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void IMxDrawPolyline::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline void IMxDrawPolyline::SetBulgeAt(int index, double bulge)
{
    void *_a[] = {0, (void*)&index, (void*)&bulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void IMxDrawPolyline::SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&index, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline bool IMxDrawPolyline::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline void IMxDrawPolyline::SetWidthsAt(int index, double dStartWidth, double dEndWidth)
{
    void *_a[] = {0, (void*)&index, (void*)&dStartWidth, (void*)&dEndWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void IMxDrawPolyline::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline bool IMxDrawPolyline::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
    return qax_result;
}

inline bool IMxDrawPolyline::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawPolyline::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
    return qax_result;
}

inline void IMxDrawPolyline::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}


inline MxDrawXLib::IMxDrawPoint* IMxDrawArc::Center() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Center");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawArc::SetCenter(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Center", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawArc::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawArc::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawArc::EndAngle() const
{
    QVariant qax_result = property("EndAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawArc::SetEndAngle(double value){ setProperty("EndAngle", QVariant(value)); }

inline bool IMxDrawArc::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawArc::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawArc::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawArc::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawArc::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawArc::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawArc::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawArc::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawArc::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawArc::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawArc::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawArc::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawArc::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawArc::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawArc::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawArc::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawArc::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawArc::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double IMxDrawArc::Radius() const
{
    QVariant qax_result = property("Radius");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawArc::SetRadius(double value){ setProperty("Radius", QVariant(value)); }

inline double IMxDrawArc::StartAngle() const
{
    QVariant qax_result = property("StartAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawArc::SetStartAngle(double value){ setProperty("StartAngle", QVariant(value)); }

inline QString IMxDrawArc::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawArc::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawArc::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawArc::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawArc::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawArc::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawArc::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawArc::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawArc::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawArc::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawArc::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawArc::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawArc::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawArc::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawArc::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawArc::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double IMxDrawArc::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawArc::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawArc::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawArc::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double IMxDrawArc::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double IMxDrawArc::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawArc::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawArc::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawArc::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawArc::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawArc::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double IMxDrawArc::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double IMxDrawArc::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double IMxDrawArc::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawArc::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawArc::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawArc::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawArc::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawArc::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double IMxDrawArc::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawArc::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawArc::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double IMxDrawArc::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int IMxDrawArc::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool IMxDrawArc::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString IMxDrawArc::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IMxDrawArc::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawArc::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool IMxDrawArc::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void IMxDrawArc::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IMxDrawArc::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool IMxDrawArc::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawArc::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void IMxDrawArc::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IMxDrawArc::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool IMxDrawArc::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline void IMxDrawArc::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline bool IMxDrawArc::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline bool IMxDrawArc::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline bool IMxDrawArc::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline bool IMxDrawArc::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawArc::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline void IMxDrawArc::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}


inline MxDrawXLib::IMxDrawPoint* IMxDrawAttributeDefinition::AlignmentPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("AlignmentPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("AlignmentPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawAttributeDefinition::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawAttributeDefinition::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IMxDrawAttributeDefinition::FieldLength() const
{
    QVariant qax_result = property("FieldLength");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetFieldLength(int value){ setProperty("FieldLength", QVariant(value)); }

inline bool IMxDrawAttributeDefinition::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IMxDrawAttributeDefinition::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString IMxDrawAttributeDefinition::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawAttributeDefinition::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawAttributeDefinition::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool IMxDrawAttributeDefinition::IsConstant() const
{
    QVariant qax_result = property("IsConstant");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetIsConstant(bool value){ setProperty("IsConstant", QVariant(value)); }

inline bool IMxDrawAttributeDefinition::IsInvisible() const
{
    QVariant qax_result = property("IsInvisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetIsInvisible(bool value){ setProperty("IsInvisible", QVariant(value)); }

inline bool IMxDrawAttributeDefinition::IsMirroredInX() const
{
    QVariant qax_result = property("IsMirroredInX");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetIsMirroredInX(bool value){ setProperty("IsMirroredInX", QVariant(value)); }

inline bool IMxDrawAttributeDefinition::IsMirroredInY() const
{
    QVariant qax_result = property("IsMirroredInY");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetIsMirroredInY(bool value){ setProperty("IsMirroredInY", QVariant(value)); }

inline bool IMxDrawAttributeDefinition::IsPreset() const
{
    QVariant qax_result = property("IsPreset");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetIsPreset(bool value){ setProperty("IsPreset", QVariant(value)); }

inline bool IMxDrawAttributeDefinition::IsVerifiable() const
{
    QVariant qax_result = property("IsVerifiable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetIsVerifiable(bool value){ setProperty("IsVerifiable", QVariant(value)); }

inline QString IMxDrawAttributeDefinition::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawAttributeDefinition::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawAttributeDefinition::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawAttributeDefinition::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawAttributeDefinition::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawAttributeDefinition::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawAttributeDefinition::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawAttributeDefinition::Oblique() const
{
    QVariant qax_result = property("Oblique");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetOblique(double value){ setProperty("Oblique", QVariant(value)); }

inline qlonglong IMxDrawAttributeDefinition::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawAttributeDefinition::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline QString IMxDrawAttributeDefinition::Prompt() const
{
    QVariant qax_result = property("Prompt");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetPrompt(const QString& value){ setProperty("Prompt", QVariant(value)); }

inline double IMxDrawAttributeDefinition::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline QString IMxDrawAttributeDefinition::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline QString IMxDrawAttributeDefinition::TextString() const
{
    QVariant qax_result = property("TextString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetTextString(const QString& value){ setProperty("TextString", QVariant(value)); }

inline QString IMxDrawAttributeDefinition::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawAttributeDefinition::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawAttributeDefinition::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IMxDrawAttributeDefinition::WidthFactor() const
{
    QVariant qax_result = property("WidthFactor");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::SetWidthFactor(double value){ setProperty("WidthFactor", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawAttributeDefinition::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawAttributeDefinition::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::McHorizontalAlignment IMxDrawAttributeDefinition::horizontalMode() const
{
    QVariant qax_result = property("horizontalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McHorizontalAlignment*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::setHorizontalMode(MxDrawXLib::McHorizontalAlignment value){ setProperty("horizontalMode", QVariant(value)); }

inline MxDrawXLib::McVerticalAlignment IMxDrawAttributeDefinition::verticalMode() const
{
    QVariant qax_result = property("verticalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McVerticalAlignment*)qax_result.constData();
}
inline void IMxDrawAttributeDefinition::setVerticalMode(MxDrawXLib::McVerticalAlignment value){ setProperty("verticalMode", QVariant(value)); }

inline void IMxDrawAttributeDefinition::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawAttributeDefinition::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawAttributeDefinition::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawAttributeDefinition::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawAttributeDefinition::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawAttributeDefinition::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawAttributeDefinition::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawAttributeDefinition::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawAttributeDefinition::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawAttributeDefinition::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawAttributeDefinition::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawAttributeDefinition::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawAttributeDefinition::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double IMxDrawAttributeDefinition::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawAttributeDefinition::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IMxDrawAttributeDefinition::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawAttributeDefinition::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString IMxDrawAttributeDefinition::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IMxDrawAttributeDefinition::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawAttributeDefinition::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawAttributeDefinition::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IMxDrawAttributeDefinition::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawAttributeDefinition::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawAttributeDefinition::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawAttributeDefinition::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline void IMxDrawAttributeDefinition::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool IMxDrawAttributeDefinition::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool IMxDrawAttributeDefinition::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline bool IMxDrawAttributeDefinition::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawAttributeDefinition::ToCurves()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline void IMxDrawAttributeDefinition::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}


inline MxDrawXLib::IMxDrawPoint* IMxDrawText::AlignmentPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("AlignmentPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawText::SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("AlignmentPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawText::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawText::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawText::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IMxDrawText::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawText::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString IMxDrawText::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawText::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawText::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawText::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool IMxDrawText::IsMirroredInX() const
{
    QVariant qax_result = property("IsMirroredInX");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawText::SetIsMirroredInX(bool value){ setProperty("IsMirroredInX", QVariant(value)); }

inline bool IMxDrawText::IsMirroredInY() const
{
    QVariant qax_result = property("IsMirroredInY");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawText::SetIsMirroredInY(bool value){ setProperty("IsMirroredInY", QVariant(value)); }

inline QString IMxDrawText::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawText::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawText::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawText::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawText::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawText::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawText::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawText::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawText::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawText::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawText::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawText::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawText::Oblique() const
{
    QVariant qax_result = property("Oblique");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawText::SetOblique(double value){ setProperty("Oblique", QVariant(value)); }

inline qlonglong IMxDrawText::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawText::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawText::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline double IMxDrawText::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawText::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline QString IMxDrawText::TextString() const
{
    QVariant qax_result = property("TextString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawText::SetTextString(const QString& value){ setProperty("TextString", QVariant(value)); }

inline QString IMxDrawText::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawText::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawText::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawText::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawText::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawText::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IMxDrawText::WidthFactor() const
{
    QVariant qax_result = property("WidthFactor");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawText::SetWidthFactor(double value){ setProperty("WidthFactor", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawText::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawText::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawText::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::McHorizontalAlignment IMxDrawText::horizontalMode() const
{
    QVariant qax_result = property("horizontalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McHorizontalAlignment*)qax_result.constData();
}
inline void IMxDrawText::setHorizontalMode(MxDrawXLib::McHorizontalAlignment value){ setProperty("horizontalMode", QVariant(value)); }

inline MxDrawXLib::McVerticalAlignment IMxDrawText::verticalMode() const
{
    QVariant qax_result = property("verticalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McVerticalAlignment*)qax_result.constData();
}
inline void IMxDrawText::setVerticalMode(MxDrawXLib::McVerticalAlignment value){ setProperty("verticalMode", QVariant(value)); }

inline void IMxDrawText::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawText::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawText::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawText::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawText::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawText::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawText::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawText::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawText::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawText::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawText::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawText::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawText::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double IMxDrawText::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawText::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IMxDrawText::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawText::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString IMxDrawText::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IMxDrawText::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawText::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawText::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IMxDrawText::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawText::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawText::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawText::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline void IMxDrawText::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline bool IMxDrawText::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline bool IMxDrawText::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline bool IMxDrawText::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawText::ToCurves()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline void IMxDrawText::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}


inline MxDrawXLib::IMxDrawPoint* IMxDrawCircle::Center() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Center");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawCircle::SetCenter(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Center", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawCircle::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawCircle::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawCircle::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawCircle::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCircle::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawCircle::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawCircle::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawCircle::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCircle::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawCircle::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCircle::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawCircle::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawCircle::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawCircle::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawCircle::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawCircle::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawCircle::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawCircle::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawCircle::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawCircle::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double IMxDrawCircle::Radius() const
{
    QVariant qax_result = property("Radius");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawCircle::SetRadius(double value){ setProperty("Radius", QVariant(value)); }

inline QString IMxDrawCircle::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCircle::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawCircle::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawCircle::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawCircle::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawCircle::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawCircle::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawCircle::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawCircle::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawCircle::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawCircle::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawCircle::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawCircle::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawCircle::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawCircle::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCircle::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double IMxDrawCircle::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawCircle::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawCircle::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCircle::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double IMxDrawCircle::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double IMxDrawCircle::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawCircle::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCircle::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawCircle::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawCircle::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawCircle::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double IMxDrawCircle::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double IMxDrawCircle::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double IMxDrawCircle::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCircle::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCircle::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCircle::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawCircle::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawCircle::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double IMxDrawCircle::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCircle::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCircle::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double IMxDrawCircle::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int IMxDrawCircle::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool IMxDrawCircle::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString IMxDrawCircle::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IMxDrawCircle::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawCircle::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool IMxDrawCircle::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void IMxDrawCircle::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IMxDrawCircle::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool IMxDrawCircle::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCircle::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void IMxDrawCircle::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IMxDrawCircle::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool IMxDrawCircle::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void IMxDrawCircle::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline bool IMxDrawCircle::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool IMxDrawCircle::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool IMxDrawCircle::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline bool IMxDrawCircle::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCircle::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline void IMxDrawCircle::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawDimAligned::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong IMxDrawDimAligned::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAligned::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAligned::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimAligned::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double IMxDrawDimAligned::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAligned::DimLinePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimLinePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAligned::SetDimLinePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimLinePoint", QVariant(typeId, &value));
}

inline QString IMxDrawDimAligned::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString IMxDrawDimAligned::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString IMxDrawDimAligned::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawDimAligned::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool IMxDrawDimAligned::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IMxDrawDimAligned::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString IMxDrawDimAligned::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawDimAligned::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDimAligned::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimAligned::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawDimAligned::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawDimAligned::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawDimAligned::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawDimAligned::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawDimAligned::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawDimAligned::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimAligned::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawDimAligned::Oblique() const
{
    QVariant qax_result = property("Oblique");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetOblique(double value){ setProperty("Oblique", QVariant(value)); }

inline qlonglong IMxDrawDimAligned::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint IMxDrawDimAligned::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAligned::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAligned::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimAligned::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString IMxDrawDimAligned::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawDimAligned::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawDimAligned::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawDimAligned::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool IMxDrawDimAligned::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimAligned::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAligned::XLine1Point() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine1Point");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAligned::SetXLine1Point(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine1Point", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAligned::XLine2Point() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine2Point");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAligned::SetXLine2Point(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine2Point", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor IMxDrawDimAligned::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawDimAligned::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawDimAligned::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawDimAligned::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDimAligned::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawDimAligned::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawDimAligned::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawDimAligned::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawDimAligned::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimAligned::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawDimAligned::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimAligned::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double IMxDrawDimAligned::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int IMxDrawDimAligned::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong IMxDrawDimAligned::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString IMxDrawDimAligned::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDimAligned::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimAligned::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimAligned::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawDimAligned::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawDimAligned::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawDimAligned::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int IMxDrawDimAligned::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawDimAligned::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString IMxDrawDimAligned::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void IMxDrawDimAligned::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimAligned::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IMxDrawDimAligned::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawDimAligned::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IMxDrawDimAligned::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IMxDrawDimAligned::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IMxDrawDimAligned::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void IMxDrawDimAligned::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void IMxDrawDimAligned::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IMxDrawDimAligned::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IMxDrawDimAligned::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool IMxDrawDimAligned::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline void IMxDrawDimAligned::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline bool IMxDrawDimAligned::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline bool IMxDrawDimAligned::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool IMxDrawDimAligned::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void IMxDrawDimAligned::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawDimension::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong IMxDrawDimension::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void IMxDrawDimension::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimension::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimension::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimension::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimension::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double IMxDrawDimension::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimension::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline QString IMxDrawDimension::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimension::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString IMxDrawDimension::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimension::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString IMxDrawDimension::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawDimension::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimension::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool IMxDrawDimension::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IMxDrawDimension::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimension::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString IMxDrawDimension::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimension::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawDimension::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDimension::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimension::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimension::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawDimension::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimension::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawDimension::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimension::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawDimension::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawDimension::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawDimension::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawDimension::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawDimension::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimension::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawDimension::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint IMxDrawDimension::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void IMxDrawDimension::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimension::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimension::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimension::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimension::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString IMxDrawDimension::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimension::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawDimension::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawDimension::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawDimension::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimension::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool IMxDrawDimension::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimension::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawDimension::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawDimension::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawDimension::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawDimension::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDimension::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawDimension::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawDimension::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawDimension::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawDimension::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimension::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawDimension::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimension::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double IMxDrawDimension::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int IMxDrawDimension::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong IMxDrawDimension::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString IMxDrawDimension::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDimension::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimension::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimension::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawDimension::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawDimension::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawDimension::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int IMxDrawDimension::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawDimension::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString IMxDrawDimension::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void IMxDrawDimension::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimension::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IMxDrawDimension::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawDimension::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IMxDrawDimension::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IMxDrawDimension::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IMxDrawDimension::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void IMxDrawDimension::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void IMxDrawDimension::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void IMxDrawDimension::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IMxDrawDimension::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline bool IMxDrawDimension::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline void IMxDrawDimension::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline bool IMxDrawDimension::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline bool IMxDrawDimension::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline bool IMxDrawDimension::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline void IMxDrawDimension::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}


inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAngular::ArcPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("ArcPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAngular::SetArcPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("ArcPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawDimAngular::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong IMxDrawDimAngular::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAngular::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAngular::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimAngular::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double IMxDrawDimAngular::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline QString IMxDrawDimAngular::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString IMxDrawDimAngular::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString IMxDrawDimAngular::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawDimAngular::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool IMxDrawDimAngular::ExtArcOn() const
{
    QVariant qax_result = property("ExtArcOn");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetExtArcOn(bool value){ setProperty("ExtArcOn", QVariant(value)); }

inline bool IMxDrawDimAngular::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IMxDrawDimAngular::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString IMxDrawDimAngular::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawDimAngular::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDimAngular::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimAngular::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawDimAngular::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawDimAngular::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawDimAngular::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawDimAngular::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawDimAngular::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawDimAngular::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimAngular::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawDimAngular::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint IMxDrawDimAngular::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAngular::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAngular::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimAngular::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString IMxDrawDimAngular::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawDimAngular::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawDimAngular::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawDimAngular::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool IMxDrawDimAngular::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimAngular::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAngular::XLine1End() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine1End");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAngular::SetXLine1End(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine1End", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAngular::XLine1Start() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine1Start");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAngular::SetXLine1Start(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine1Start", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAngular::XLine2End() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine2End");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAngular::SetXLine2End(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine2End", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimAngular::XLine2Start() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine2Start");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimAngular::SetXLine2Start(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine2Start", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor IMxDrawDimAngular::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawDimAngular::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawDimAngular::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawDimAngular::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDimAngular::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawDimAngular::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawDimAngular::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawDimAngular::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawDimAngular::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimAngular::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawDimAngular::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimAngular::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double IMxDrawDimAngular::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int IMxDrawDimAngular::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong IMxDrawDimAngular::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString IMxDrawDimAngular::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDimAngular::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimAngular::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimAngular::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawDimAngular::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawDimAngular::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawDimAngular::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int IMxDrawDimAngular::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawDimAngular::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString IMxDrawDimAngular::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void IMxDrawDimAngular::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimAngular::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IMxDrawDimAngular::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawDimAngular::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IMxDrawDimAngular::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IMxDrawDimAngular::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IMxDrawDimAngular::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void IMxDrawDimAngular::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void IMxDrawDimAngular::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IMxDrawDimAngular::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IMxDrawDimAngular::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool IMxDrawDimAngular::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline void IMxDrawDimAngular::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline bool IMxDrawDimAngular::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool IMxDrawDimAngular::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline bool IMxDrawDimAngular::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline void IMxDrawDimAngular::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}


inline MxDrawXLib::IMxDrawPoint* IMxDrawDimDiametric::ChordPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("ChordPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetChordPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("ChordPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawDimDiametric::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong IMxDrawDimDiametric::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimDiametric::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimDiametric::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double IMxDrawDimDiametric::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline QString IMxDrawDimDiametric::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString IMxDrawDimDiametric::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString IMxDrawDimDiametric::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawDimDiametric::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline double IMxDrawDimDiametric::ExtArcEndAngle() const
{
    QVariant qax_result = property("ExtArcEndAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetExtArcEndAngle(double value){ setProperty("ExtArcEndAngle", QVariant(value)); }

inline double IMxDrawDimDiametric::ExtArcStartAngle() const
{
    QVariant qax_result = property("ExtArcStartAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetExtArcStartAngle(double value){ setProperty("ExtArcStartAngle", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimDiametric::FarChordPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("FarChordPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetFarChordPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("FarChordPoint", QVariant(typeId, &value));
}

inline bool IMxDrawDimDiametric::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IMxDrawDimDiametric::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString IMxDrawDimDiametric::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawDimDiametric::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDimDiametric::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimDiametric::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline double IMxDrawDimDiametric::LeaderLength() const
{
    QVariant qax_result = property("LeaderLength");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetLeaderLength(double value){ setProperty("LeaderLength", QVariant(value)); }

inline QString IMxDrawDimDiametric::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawDimDiametric::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawDimDiametric::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawDimDiametric::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawDimDiametric::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimDiametric::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawDimDiametric::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint IMxDrawDimDiametric::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimDiametric::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimDiametric::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString IMxDrawDimDiametric::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawDimDiametric::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawDimDiametric::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool IMxDrawDimDiametric::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimDiametric::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawDimDiametric::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawDimDiametric::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawDimDiametric::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawDimDiametric::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDimDiametric::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawDimDiametric::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawDimDiametric::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawDimDiametric::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawDimDiametric::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimDiametric::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawDimDiametric::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimDiametric::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double IMxDrawDimDiametric::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int IMxDrawDimDiametric::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong IMxDrawDimDiametric::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString IMxDrawDimDiametric::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDimDiametric::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimDiametric::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimDiametric::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawDimDiametric::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawDimDiametric::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawDimDiametric::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int IMxDrawDimDiametric::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawDimDiametric::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString IMxDrawDimDiametric::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void IMxDrawDimDiametric::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimDiametric::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IMxDrawDimDiametric::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawDimDiametric::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IMxDrawDimDiametric::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IMxDrawDimDiametric::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IMxDrawDimDiametric::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void IMxDrawDimDiametric::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void IMxDrawDimDiametric::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IMxDrawDimDiametric::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IMxDrawDimDiametric::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool IMxDrawDimDiametric::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void IMxDrawDimDiametric::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline bool IMxDrawDimDiametric::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool IMxDrawDimDiametric::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool IMxDrawDimDiametric::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline void IMxDrawDimDiametric::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawDimRotated::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong IMxDrawDimRotated::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimRotated::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimRotated::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimRotated::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double IMxDrawDimRotated::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimRotated::DimLinePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimLinePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimRotated::SetDimLinePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimLinePoint", QVariant(typeId, &value));
}

inline QString IMxDrawDimRotated::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString IMxDrawDimRotated::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString IMxDrawDimRotated::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawDimRotated::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool IMxDrawDimRotated::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IMxDrawDimRotated::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString IMxDrawDimRotated::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawDimRotated::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDimRotated::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimRotated::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawDimRotated::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawDimRotated::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawDimRotated::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawDimRotated::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawDimRotated::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawDimRotated::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimRotated::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawDimRotated::Oblique() const
{
    QVariant qax_result = property("Oblique");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetOblique(double value){ setProperty("Oblique", QVariant(value)); }

inline qlonglong IMxDrawDimRotated::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double IMxDrawDimRotated::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline MxDrawXLib::McAttachmentPoint IMxDrawDimRotated::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimRotated::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimRotated::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimRotated::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString IMxDrawDimRotated::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawDimRotated::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawDimRotated::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawDimRotated::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool IMxDrawDimRotated::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimRotated::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimRotated::XLine1Point() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine1Point");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimRotated::SetXLine1Point(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine1Point", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimRotated::XLine2Point() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine2Point");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimRotated::SetXLine2Point(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine2Point", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor IMxDrawDimRotated::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawDimRotated::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawDimRotated::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawDimRotated::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDimRotated::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawDimRotated::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawDimRotated::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawDimRotated::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawDimRotated::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimRotated::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawDimRotated::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimRotated::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double IMxDrawDimRotated::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int IMxDrawDimRotated::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong IMxDrawDimRotated::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString IMxDrawDimRotated::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDimRotated::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimRotated::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimRotated::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawDimRotated::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawDimRotated::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawDimRotated::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int IMxDrawDimRotated::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawDimRotated::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString IMxDrawDimRotated::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void IMxDrawDimRotated::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimRotated::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IMxDrawDimRotated::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawDimRotated::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IMxDrawDimRotated::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IMxDrawDimRotated::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IMxDrawDimRotated::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void IMxDrawDimRotated::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void IMxDrawDimRotated::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IMxDrawDimRotated::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IMxDrawDimRotated::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool IMxDrawDimRotated::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline void IMxDrawDimRotated::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline bool IMxDrawDimRotated::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool IMxDrawDimRotated::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool IMxDrawDimRotated::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline void IMxDrawDimRotated::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawDimOrdinate::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimOrdinate::DefiningPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DefiningPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetDefiningPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DefiningPoint", QVariant(typeId, &value));
}

inline qlonglong IMxDrawDimOrdinate::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimOrdinate::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimOrdinate::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double IMxDrawDimOrdinate::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline QString IMxDrawDimOrdinate::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString IMxDrawDimOrdinate::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString IMxDrawDimOrdinate::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawDimOrdinate::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool IMxDrawDimOrdinate::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IMxDrawDimOrdinate::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString IMxDrawDimOrdinate::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawDimOrdinate::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDimOrdinate::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool IMxDrawDimOrdinate::IsUsingXAxis() const
{
    QVariant qax_result = property("IsUsingXAxis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetIsUsingXAxis(bool value){ setProperty("IsUsingXAxis", QVariant(value)); }

inline bool IMxDrawDimOrdinate::IsUsingYAxis() const
{
    QVariant qax_result = property("IsUsingYAxis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetIsUsingYAxis(bool value){ setProperty("IsUsingYAxis", QVariant(value)); }

inline QString IMxDrawDimOrdinate::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimOrdinate::LeaderEndPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("LeaderEndPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetLeaderEndPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("LeaderEndPoint", QVariant(typeId, &value));
}

inline QString IMxDrawDimOrdinate::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawDimOrdinate::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawDimOrdinate::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawDimOrdinate::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawDimOrdinate::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimOrdinate::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimOrdinate::Origin() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Origin");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetOrigin(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Origin", QVariant(typeId, &value));
}

inline qlonglong IMxDrawDimOrdinate::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint IMxDrawDimOrdinate::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimOrdinate::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimOrdinate::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString IMxDrawDimOrdinate::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawDimOrdinate::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawDimOrdinate::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool IMxDrawDimOrdinate::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawDimOrdinate::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawDimOrdinate::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawDimOrdinate::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawDimOrdinate::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDimOrdinate::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawDimOrdinate::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawDimOrdinate::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawDimOrdinate::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawDimOrdinate::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimOrdinate::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawDimOrdinate::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimOrdinate::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double IMxDrawDimOrdinate::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int IMxDrawDimOrdinate::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong IMxDrawDimOrdinate::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString IMxDrawDimOrdinate::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDimOrdinate::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimOrdinate::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimOrdinate::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawDimOrdinate::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawDimOrdinate::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawDimOrdinate::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int IMxDrawDimOrdinate::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawDimOrdinate::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString IMxDrawDimOrdinate::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void IMxDrawDimOrdinate::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimOrdinate::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IMxDrawDimOrdinate::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawDimOrdinate::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IMxDrawDimOrdinate::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IMxDrawDimOrdinate::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IMxDrawDimOrdinate::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void IMxDrawDimOrdinate::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void IMxDrawDimOrdinate::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IMxDrawDimOrdinate::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IMxDrawDimOrdinate::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool IMxDrawDimOrdinate::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void IMxDrawDimOrdinate::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline bool IMxDrawDimOrdinate::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool IMxDrawDimOrdinate::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool IMxDrawDimOrdinate::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline void IMxDrawDimOrdinate::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}


inline MxDrawXLib::IMxDrawPoint* IMxDrawDimRadial::Center() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Center");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimRadial::SetCenter(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Center", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimRadial::ChordPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("ChordPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimRadial::SetChordPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("ChordPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawDimRadial::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong IMxDrawDimRadial::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimRadial::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimRadial::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimRadial::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double IMxDrawDimRadial::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline QString IMxDrawDimRadial::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString IMxDrawDimRadial::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString IMxDrawDimRadial::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawDimRadial::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline double IMxDrawDimRadial::ExtArcEndAngle() const
{
    QVariant qax_result = property("ExtArcEndAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetExtArcEndAngle(double value){ setProperty("ExtArcEndAngle", QVariant(value)); }

inline double IMxDrawDimRadial::ExtArcStartAngle() const
{
    QVariant qax_result = property("ExtArcStartAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetExtArcStartAngle(double value){ setProperty("ExtArcStartAngle", QVariant(value)); }

inline bool IMxDrawDimRadial::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IMxDrawDimRadial::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString IMxDrawDimRadial::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawDimRadial::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDimRadial::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimRadial::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline double IMxDrawDimRadial::LeaderLength() const
{
    QVariant qax_result = property("LeaderLength");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetLeaderLength(double value){ setProperty("LeaderLength", QVariant(value)); }

inline QString IMxDrawDimRadial::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawDimRadial::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawDimRadial::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawDimRadial::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawDimRadial::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawDimRadial::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimRadial::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawDimRadial::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint IMxDrawDimRadial::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawDimRadial::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawDimRadial::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double IMxDrawDimRadial::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString IMxDrawDimRadial::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawDimRadial::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawDimRadial::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawDimRadial::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool IMxDrawDimRadial::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawDimRadial::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawDimRadial::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawDimRadial::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawDimRadial::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawDimRadial::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDimRadial::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawDimRadial::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawDimRadial::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawDimRadial::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawDimRadial::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimRadial::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawDimRadial::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimRadial::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double IMxDrawDimRadial::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int IMxDrawDimRadial::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong IMxDrawDimRadial::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString IMxDrawDimRadial::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDimRadial::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimRadial::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimRadial::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawDimRadial::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawDimRadial::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawDimRadial::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int IMxDrawDimRadial::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawDimRadial::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString IMxDrawDimRadial::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void IMxDrawDimRadial::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawDimRadial::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IMxDrawDimRadial::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawDimRadial::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IMxDrawDimRadial::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IMxDrawDimRadial::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IMxDrawDimRadial::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void IMxDrawDimRadial::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IMxDrawDimRadial::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IMxDrawDimRadial::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void IMxDrawDimRadial::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool IMxDrawDimRadial::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void IMxDrawDimRadial::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline bool IMxDrawDimRadial::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool IMxDrawDimRadial::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool IMxDrawDimRadial::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline void IMxDrawDimRadial::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}


inline MxDrawXLib::IMxDrawPoint* IMxDrawEllipse::Center() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Center");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawEllipse::SetCenter(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Center", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawEllipse::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawEllipse::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawEllipse::EndAngle() const
{
    QVariant qax_result = property("EndAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawEllipse::SetEndAngle(double value){ setProperty("EndAngle", QVariant(value)); }

inline bool IMxDrawEllipse::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawEllipse::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEllipse::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawEllipse::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawEllipse::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawEllipse::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEllipse::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawEllipse::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEllipse::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawEllipse::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawEllipse::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawEllipse::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawEllipse::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawEllipse::MajorAxis() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("MajorAxis");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawEllipse::SetMajorAxis(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("MajorAxis", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawEllipse::MinorAxis() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("MinorAxis");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawEllipse::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawEllipse::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawEllipse::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawEllipse::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawEllipse::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double IMxDrawEllipse::RadiusRatio() const
{
    QVariant qax_result = property("RadiusRatio");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawEllipse::SetRadiusRatio(double value){ setProperty("RadiusRatio", QVariant(value)); }

inline double IMxDrawEllipse::StartAngle() const
{
    QVariant qax_result = property("StartAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawEllipse::SetStartAngle(double value){ setProperty("StartAngle", QVariant(value)); }

inline QString IMxDrawEllipse::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEllipse::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawEllipse::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawEllipse::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawEllipse::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawEllipse::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawEllipse::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawEllipse::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawEllipse::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawEllipse::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawEllipse::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawEllipse::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawEllipse::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawEllipse::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawEllipse::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double IMxDrawEllipse::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawEllipse::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawEllipse::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawEllipse::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double IMxDrawEllipse::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double IMxDrawEllipse::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawEllipse::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawEllipse::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawEllipse::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawEllipse::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawEllipse::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double IMxDrawEllipse::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double IMxDrawEllipse::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double IMxDrawEllipse::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawEllipse::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawEllipse::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawEllipse::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawEllipse::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawEllipse::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double IMxDrawEllipse::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawEllipse::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawEllipse::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double IMxDrawEllipse::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int IMxDrawEllipse::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString IMxDrawEllipse::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IMxDrawEllipse::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawEllipse::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void IMxDrawEllipse::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IMxDrawEllipse::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool IMxDrawEllipse::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawEllipse::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void IMxDrawEllipse::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IMxDrawEllipse::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool IMxDrawEllipse::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline void IMxDrawEllipse::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline bool IMxDrawEllipse::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline bool IMxDrawEllipse::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawEllipse::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
    return qax_result;
}

inline void IMxDrawEllipse::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}


inline MxDrawXLib::McAttachmentPoint IMxDrawMText::Attachment() const
{
    QVariant qax_result = property("Attachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void IMxDrawMText::SetAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("Attachment", QVariant(value)); }

inline QString IMxDrawMText::Contents() const
{
    QVariant qax_result = property("Contents");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawMText::SetContents(const QString& value){ setProperty("Contents", QVariant(value)); }

inline MxDrawXLib::IMxDrawDatabase* IMxDrawMText::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawMText::Direction() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Direction");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawMText::SetDirection(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Direction", QVariant(typeId, &value));
}

inline QString IMxDrawMText::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::McDrawingDirection IMxDrawMText::FlowDirection() const
{
    QVariant qax_result = property("FlowDirection");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McDrawingDirection*)qax_result.constData();
}
inline void IMxDrawMText::SetFlowDirection(MxDrawXLib::McDrawingDirection value){ setProperty("FlowDirection", QVariant(value)); }

inline bool IMxDrawMText::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawMText::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawMText::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawMText::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawMText::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawMText::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawMText::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline double IMxDrawMText::LineSpacingFactor() const
{
    QVariant qax_result = property("LineSpacingFactor");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawMText::SetLineSpacingFactor(double value){ setProperty("LineSpacingFactor", QVariant(value)); }

inline QString IMxDrawMText::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawMText::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawMText::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawMText::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawMText::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawMText::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawMText::Location() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Location");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawMText::SetLocation(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Location", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawMText::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawMText::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawMText::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawMText::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawMText::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double IMxDrawMText::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawMText::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline double IMxDrawMText::TextHeight() const
{
    QVariant qax_result = property("TextHeight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawMText::SetTextHeight(double value){ setProperty("TextHeight", QVariant(value)); }

inline QString IMxDrawMText::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawMText::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawMText::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawMText::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawMText::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawMText::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IMxDrawMText::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawMText::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawMText::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawMText::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawMText::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawMText::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawMText::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawMText::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawMText::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawMText::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawMText::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawMText::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawMText::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawMText::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawMText::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawMText::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawMText::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawMText::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double IMxDrawMText::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawMText::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IMxDrawMText::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawMText::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString IMxDrawMText::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IMxDrawMText::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawMText::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawMText::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IMxDrawMText::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawMText::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawMText::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawMText::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline void IMxDrawMText::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline bool IMxDrawMText::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline bool IMxDrawMText::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline bool IMxDrawMText::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawMText::ToCurves()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline void IMxDrawMText::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawPointEntity::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawPointEntity::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawPointEntity::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawPointEntity::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPointEntity::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawPointEntity::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawPointEntity::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawPointEntity::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPointEntity::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawPointEntity::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPointEntity::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawPointEntity::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPointEntity::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawPointEntity::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawPointEntity::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawPointEntity::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawPointEntity::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawPointEntity::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawPointEntity::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawPointEntity::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawPointEntity::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawPointEntity::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline QString IMxDrawPointEntity::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPointEntity::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawPointEntity::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawPointEntity::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawPointEntity::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawPointEntity::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawPointEntity::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawPointEntity::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawPointEntity::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawPointEntity::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawPointEntity::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawPointEntity::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawPointEntity::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawPointEntity::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawPointEntity::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawPointEntity::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawPointEntity::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawPointEntity::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawPointEntity::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawPointEntity::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawPointEntity::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawPointEntity::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double IMxDrawPointEntity::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawPointEntity::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IMxDrawPointEntity::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawPointEntity::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString IMxDrawPointEntity::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IMxDrawPointEntity::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawPointEntity::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawPointEntity::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IMxDrawPointEntity::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawPointEntity::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawPointEntity::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawPointEntity::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline void IMxDrawPointEntity::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline bool IMxDrawPointEntity::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool IMxDrawPointEntity::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool IMxDrawPointEntity::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline void IMxDrawPointEntity::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawRay::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawRay::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawRay::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawRay::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawRay::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawRay::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawRay::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawRay::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawRay::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawRay::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawRay::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawRay::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawRay::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawRay::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawRay::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawRay::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawRay::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawRay::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawRay::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawRay::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawRay::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawRay::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawRay::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawRay::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawRay::UnitDir() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("UnitDir");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawRay::SetUnitDir(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("UnitDir", QVariant(typeId, &value));
}

inline bool IMxDrawRay::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawRay::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawRay::basePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawRay::setBasePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePoint", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor IMxDrawRay::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawRay::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawRay::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawRay::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawRay::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawRay::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawRay::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawRay::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawRay::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawRay::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double IMxDrawRay::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawRay::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawRay::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawRay::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double IMxDrawRay::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double IMxDrawRay::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawRay::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawRay::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawRay::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawRay::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawRay::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double IMxDrawRay::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double IMxDrawRay::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double IMxDrawRay::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawRay::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawRay::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawRay::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawRay::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawRay::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double IMxDrawRay::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawRay::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawRay::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double IMxDrawRay::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int IMxDrawRay::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool IMxDrawRay::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString IMxDrawRay::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IMxDrawRay::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawRay::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool IMxDrawRay::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void IMxDrawRay::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IMxDrawRay::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool IMxDrawRay::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawRay::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void IMxDrawRay::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IMxDrawRay::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool IMxDrawRay::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline void IMxDrawRay::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline bool IMxDrawRay::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool IMxDrawRay::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool IMxDrawRay::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool IMxDrawRay::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawRay::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline void IMxDrawRay::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawSolid::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawSolid::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawSolid::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawSolid::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawSolid::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawSolid::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawSolid::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawSolid::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawSolid::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawSolid::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawSolid::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawSolid::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawSolid::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawSolid::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawSolid::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawSolid::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawSolid::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawSolid::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawSolid::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawSolid::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawSolid::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawSolid::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawSolid::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawSolid::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawSolid::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawSolid::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawSolid::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawSolid::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawSolid::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawSolid::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawSolid::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawSolid::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawSolid::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawSolid::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawSolid::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSolid::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawSolid::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawSolid::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawSolid::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawSolid::GetPointAt(int index)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSolid::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSolid::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool IMxDrawSolid::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double IMxDrawSolid::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool IMxDrawSolid::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline int IMxDrawSolid::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool IMxDrawSolid::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QString IMxDrawSolid::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void IMxDrawSolid::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawSolid::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void IMxDrawSolid::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawSolid::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawSolid::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void IMxDrawSolid::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawSolid::SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&index, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline bool IMxDrawSolid::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void IMxDrawSolid::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline bool IMxDrawSolid::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool IMxDrawSolid::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline bool IMxDrawSolid::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void IMxDrawSolid::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawSpline::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawSpline::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawSpline::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawSpline::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawSpline::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawSpline::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawSpline::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawSpline::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawSpline::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawSpline::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawSpline::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawSpline::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawSpline::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawSpline::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawSpline::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawSpline::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawSpline::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawSpline::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawSpline::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawSpline::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawSpline::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawSpline::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawSpline::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawSpline::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawSpline::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawSpline::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawSpline::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawSpline::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawSpline::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawSpline::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawSpline::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawSpline::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawSpline::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawSpline::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawSpline::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSpline::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double IMxDrawSpline::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawSpline::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawSpline::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawSpline::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawSpline::GetControlPoints()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline double IMxDrawSpline::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawSpline::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline double IMxDrawSpline::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawSpline::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawSpline::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawSpline::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawSpline::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IMxDrawSpline::GetFitData(MxDrawXLib::IMxDrawPoints** pPoints, int& degree, double& fitTolerance, bool& tangentsExist, MxDrawXLib::IMxDrawVector3d** startTangent, MxDrawXLib::IMxDrawVector3d** endTangent)
{
    void *_a[] = {0, (void*)&pPoints, (void*)&degree, (void*)&fitTolerance, (void*)&tangentsExist, (void*)&startTangent, (void*)&endTangent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSpline::GetFitParam()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawSpline::GetFitPoints()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSpline::GetKnots()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline double IMxDrawSpline::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline void IMxDrawSpline::GetNurbsData(int& degree, bool& rational, bool& closed, bool& periodic, MxDrawXLib::IMxDrawPoints** controlPoints, MxDrawXLib::IMxDrawResbuf** knots, MxDrawXLib::IMxDrawResbuf** weights, double& controlPtTol, double& knotTol)
{
    void *_a[] = {0, (void*)&degree, (void*)&rational, (void*)&closed, (void*)&periodic, (void*)&controlPoints, (void*)&knots, (void*)&weights, (void*)&controlPtTol, (void*)&knotTol};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSpline::GetParam()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline double IMxDrawSpline::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline double IMxDrawSpline::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawSpline::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawSpline::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSpline::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawSpline::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawSpline::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline double IMxDrawSpline::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawSpline::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSpline::GetWeights()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSpline::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline double IMxDrawSpline::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline int IMxDrawSpline::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool IMxDrawSpline::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline QString IMxDrawSpline::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline void IMxDrawSpline::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawSpline::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline bool IMxDrawSpline::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline void IMxDrawSpline::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void IMxDrawSpline::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline bool IMxDrawSpline::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSpline::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline void IMxDrawSpline::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void IMxDrawSpline::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void IMxDrawSpline::SetFitData(MxDrawXLib::IMxDrawPoints* points, int degree, double fitTolerance, MxDrawXLib::IMxDrawVector3d* startTangent, MxDrawXLib::IMxDrawVector3d* endTangent)
{
    void *_a[] = {0, (void*)&points, (void*)&degree, (void*)&fitTolerance, (void*)&startTangent, (void*)&endTangent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void IMxDrawSpline::SetNurbsData(int degree, bool rational, bool closed, bool periodic, MxDrawXLib::IMxDrawPoints* controlPoints, MxDrawXLib::IMxDrawResbuf* knots, MxDrawXLib::IMxDrawResbuf* weights, double controlPtTol, double knotTol)
{
    void *_a[] = {0, (void*)&degree, (void*)&rational, (void*)&closed, (void*)&periodic, (void*)&controlPoints, (void*)&knots, (void*)&weights, (void*)&controlPtTol, (void*)&knotTol};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline bool IMxDrawSpline::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline void IMxDrawSpline::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline bool IMxDrawSpline::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline bool IMxDrawSpline::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}

inline bool IMxDrawSpline::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline bool IMxDrawSpline::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSpline::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline void IMxDrawSpline::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawTolerance::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawTolerance::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawTolerance::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawTolerance::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawTolerance::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawTolerance::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawTolerance::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawTolerance::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawTolerance::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawTolerance::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawTolerance::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawTolerance::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawTolerance::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawTolerance::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawTolerance::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawTolerance::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawTolerance::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawTolerance::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawTolerance::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawTolerance::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawTolerance::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawTolerance::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawTolerance::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawTolerance::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawTolerance::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawTolerance::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawTolerance::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawTolerance::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawTolerance::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawTolerance::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawTolerance::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawTolerance::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawTolerance::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawTolerance::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawTolerance::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawTolerance::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawTolerance::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawTolerance::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawTolerance::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawTolerance::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawTolerance::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawTolerance::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double IMxDrawTolerance::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawTolerance::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IMxDrawTolerance::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawTolerance::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString IMxDrawTolerance::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IMxDrawTolerance::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawTolerance::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawTolerance::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IMxDrawTolerance::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawTolerance::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawTolerance::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawTolerance::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void IMxDrawTolerance::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool IMxDrawTolerance::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool IMxDrawTolerance::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool IMxDrawTolerance::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void IMxDrawTolerance::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawTrace::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawTrace::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawTrace::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawTrace::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawTrace::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawTrace::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawTrace::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawTrace::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawTrace::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawTrace::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawTrace::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawTrace::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawTrace::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawTrace::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawTrace::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawTrace::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawTrace::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawTrace::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawTrace::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawTrace::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawTrace::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawTrace::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawTrace::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawTrace::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawTrace::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawTrace::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawTrace::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawTrace::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawTrace::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawTrace::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawTrace::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawTrace::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawTrace::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawTrace::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawTrace::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawTrace::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawTrace::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawTrace::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawTrace::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawTrace::GetPointAt(int index)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawTrace::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawTrace::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool IMxDrawTrace::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double IMxDrawTrace::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool IMxDrawTrace::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline int IMxDrawTrace::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool IMxDrawTrace::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QString IMxDrawTrace::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void IMxDrawTrace::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawTrace::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void IMxDrawTrace::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawTrace::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawTrace::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void IMxDrawTrace::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawTrace::SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&index, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline bool IMxDrawTrace::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void IMxDrawTrace::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline bool IMxDrawTrace::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool IMxDrawTrace::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline bool IMxDrawTrace::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void IMxDrawTrace::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawXline::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawXline::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawXline::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawXline::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawXline::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawXline::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawXline::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawXline::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawXline::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawXline::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawXline::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawXline::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawXline::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawXline::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawXline::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawXline::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawXline::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawXline::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawXline::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawXline::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawXline::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawXline::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawXline::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawXline::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawXline::UnitDir() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("UnitDir");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawXline::SetUnitDir(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("UnitDir", QVariant(typeId, &value));
}

inline bool IMxDrawXline::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawXline::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawXline::basePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawXline::setBasePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePoint", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor IMxDrawXline::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawXline::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawXline::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawXline::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawXline::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawXline::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawXline::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawXline::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawXline::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawXline::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double IMxDrawXline::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawXline::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawXline::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawXline::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double IMxDrawXline::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double IMxDrawXline::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawXline::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawXline::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawXline::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawXline::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawXline::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double IMxDrawXline::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double IMxDrawXline::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double IMxDrawXline::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawXline::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawXline::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawXline::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawXline::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawXline::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double IMxDrawXline::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawXline::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawXline::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double IMxDrawXline::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int IMxDrawXline::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool IMxDrawXline::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString IMxDrawXline::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IMxDrawXline::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawXline::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool IMxDrawXline::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void IMxDrawXline::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IMxDrawXline::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool IMxDrawXline::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawXline::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void IMxDrawXline::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IMxDrawXline::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool IMxDrawXline::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline void IMxDrawXline::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline bool IMxDrawXline::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool IMxDrawXline::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool IMxDrawXline::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool IMxDrawXline::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawXline::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline void IMxDrawXline::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}


inline int IMxDrawBlockReference::AttributeCount() const
{
    QVariant qax_result = property("AttributeCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawBlockTableRecord* IMxDrawBlockReference::BlockTableRecord() const
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_pointer);
    QVariant qax_result = property("BlockTableRecord");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawBlockTableRecord**)qax_result.constData();
}
inline void IMxDrawBlockReference::SetBlockTableRecord(MxDrawXLib::IMxDrawBlockTableRecord* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("MxDrawXLib::IMxDrawBlockTableRecord*", &value);
    setProperty("BlockTableRecord", QVariant(typeId, &value));
}

inline qlonglong IMxDrawBlockReference::BlockTableRecordId() const
{
    QVariant qax_result = property("BlockTableRecordId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void IMxDrawBlockReference::SetBlockTableRecordId(qlonglong value){ setProperty("BlockTableRecordId", QVariant(value)); }

inline MxDrawXLib::IMxDrawMatrix3d* IMxDrawBlockReference::BlockTransform() const
{
    MxDrawXLib::IMxDrawMatrix3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMatrix3d*>("IMxDrawMatrix3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMatrix3d>("IMxDrawMatrix3d", qax_pointer);
    QVariant qax_result = property("BlockTransform");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMatrix3d**)qax_result.constData();
}
inline void IMxDrawBlockReference::SetBlockTransform(MxDrawXLib::IMxDrawMatrix3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMatrix3d*>("MxDrawXLib::IMxDrawMatrix3d*", &value);
    setProperty("BlockTransform", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawBlockReference::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawBlockReference::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawBlockReference::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawBlockReference::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawBlockReference::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawBlockReference::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawBlockReference::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawBlockReference::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawBlockReference::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawBlockReference::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawBlockReference::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawBlockReference::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawBlockReference::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawBlockReference::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawBlockReference::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawBlockReference::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawBlockReference::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawBlockReference::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawBlockReference::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawBlockReference::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawBlockReference::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawBlockReference::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline double IMxDrawBlockReference::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawBlockReference::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline MxDrawXLib::IMxDrawScale3d* IMxDrawBlockReference::ScaleFactors() const
{
    MxDrawXLib::IMxDrawScale3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawScale3d*>("IMxDrawScale3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawScale3d>("IMxDrawScale3d", qax_pointer);
    QVariant qax_result = property("ScaleFactors");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawScale3d**)qax_result.constData();
}
inline void IMxDrawBlockReference::SetScaleFactors(MxDrawXLib::IMxDrawScale3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawScale3d*>("MxDrawXLib::IMxDrawScale3d*", &value);
    setProperty("ScaleFactors", QVariant(typeId, &value));
}

inline QString IMxDrawBlockReference::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawBlockReference::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawBlockReference::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawBlockReference::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawBlockReference::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawBlockReference::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawBlockReference::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawBlockReference::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawBlockReference::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawAttribute* IMxDrawBlockReference::AppendAttribute()
{
    MxDrawXLib::IMxDrawAttribute* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute*>("IMxDrawAttribute*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute>("IMxDrawAttribute", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMxDrawBlockReference::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline MxDrawXLib::IMxDrawAttribute* IMxDrawBlockReference::AttributeItem(int lItem)
{
    MxDrawXLib::IMxDrawAttribute* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute*>("IMxDrawAttribute*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute>("IMxDrawAttribute", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawBlockReference::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void IMxDrawBlockReference::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline IDispatch* IMxDrawBlockReference::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool IMxDrawBlockReference::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawBlockReference::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawBlockReference::Explode()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawBlockReference::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline QString IMxDrawBlockReference::GetBlockName()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void IMxDrawBlockReference::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawBlockReference::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawBlockReference::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawBlockReference::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawBlockReference::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawBlockReference::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double IMxDrawBlockReference::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawBlockReference::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int IMxDrawBlockReference::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawBlockReference::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString IMxDrawBlockReference::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void IMxDrawBlockReference::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawBlockReference::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IMxDrawBlockReference::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawBlockReference::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IMxDrawBlockReference::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IMxDrawBlockReference::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline bool IMxDrawBlockReference::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline void IMxDrawBlockReference::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline bool IMxDrawBlockReference::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline bool IMxDrawBlockReference::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline bool IMxDrawBlockReference::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline void IMxDrawBlockReference::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}


inline double IMxDrawScale3d::sx() const
{
    QVariant qax_result = property("sx");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawScale3d::setSx(double value){ setProperty("sx", QVariant(value)); }

inline double IMxDrawScale3d::sy() const
{
    QVariant qax_result = property("sy");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawScale3d::setSy(double value){ setProperty("sy", QVariant(value)); }

inline double IMxDrawScale3d::sz() const
{
    QVariant qax_result = property("sz");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawScale3d::setSz(double value){ setProperty("sz", QVariant(value)); }


inline MxDrawXLib::IMxDrawPoint* IMxDrawAttribute::AlignmentPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("AlignmentPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawAttribute::SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("AlignmentPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawAttribute::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawAttribute::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IMxDrawAttribute::FieldLength() const
{
    QVariant qax_result = property("FieldLength");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawAttribute::SetFieldLength(int value){ setProperty("FieldLength", QVariant(value)); }

inline bool IMxDrawAttribute::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IMxDrawAttribute::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawAttribute::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString IMxDrawAttribute::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttribute::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawAttribute::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawAttribute::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool IMxDrawAttribute::IsConstant() const
{
    QVariant qax_result = property("IsConstant");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IMxDrawAttribute::IsInvisible() const
{
    QVariant qax_result = property("IsInvisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawAttribute::SetIsInvisible(bool value){ setProperty("IsInvisible", QVariant(value)); }

inline bool IMxDrawAttribute::IsMirroredInX() const
{
    QVariant qax_result = property("IsMirroredInX");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawAttribute::SetIsMirroredInX(bool value){ setProperty("IsMirroredInX", QVariant(value)); }

inline bool IMxDrawAttribute::IsMirroredInY() const
{
    QVariant qax_result = property("IsMirroredInY");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawAttribute::SetIsMirroredInY(bool value){ setProperty("IsMirroredInY", QVariant(value)); }

inline bool IMxDrawAttribute::IsPreset() const
{
    QVariant qax_result = property("IsPreset");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IMxDrawAttribute::IsVerifiable() const
{
    QVariant qax_result = property("IsVerifiable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawAttribute::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttribute::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawAttribute::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttribute::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawAttribute::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawAttribute::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawAttribute::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawAttribute::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawAttribute::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawAttribute::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawAttribute::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawAttribute::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawAttribute::Oblique() const
{
    QVariant qax_result = property("Oblique");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawAttribute::SetOblique(double value){ setProperty("Oblique", QVariant(value)); }

inline qlonglong IMxDrawAttribute::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawAttribute::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawAttribute::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline double IMxDrawAttribute::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawAttribute::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline QString IMxDrawAttribute::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttribute::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline QString IMxDrawAttribute::TextString() const
{
    QVariant qax_result = property("TextString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttribute::SetTextString(const QString& value){ setProperty("TextString", QVariant(value)); }

inline QString IMxDrawAttribute::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawAttribute::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawAttribute::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawAttribute::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawAttribute::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawAttribute::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IMxDrawAttribute::WidthFactor() const
{
    QVariant qax_result = property("WidthFactor");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawAttribute::SetWidthFactor(double value){ setProperty("WidthFactor", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawAttribute::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawAttribute::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawAttribute::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::McHorizontalAlignment IMxDrawAttribute::horizontalMode() const
{
    QVariant qax_result = property("horizontalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McHorizontalAlignment*)qax_result.constData();
}
inline void IMxDrawAttribute::setHorizontalMode(MxDrawXLib::McHorizontalAlignment value){ setProperty("horizontalMode", QVariant(value)); }

inline MxDrawXLib::McVerticalAlignment IMxDrawAttribute::verticalMode() const
{
    QVariant qax_result = property("verticalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McVerticalAlignment*)qax_result.constData();
}
inline void IMxDrawAttribute::setVerticalMode(MxDrawXLib::McVerticalAlignment value){ setProperty("verticalMode", QVariant(value)); }

inline void IMxDrawAttribute::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawAttribute::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawAttribute::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawAttribute::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawAttribute::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawAttribute::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawAttribute::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawAttribute::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawAttribute::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawAttribute::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawAttribute::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawAttribute::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawAttribute::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double IMxDrawAttribute::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawAttribute::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IMxDrawAttribute::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawAttribute::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString IMxDrawAttribute::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IMxDrawAttribute::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawAttribute::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawAttribute::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IMxDrawAttribute::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawAttribute::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawAttribute::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawAttribute::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline void IMxDrawAttribute::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline bool IMxDrawAttribute::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool IMxDrawAttribute::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline bool IMxDrawAttribute::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawAttribute::ToCurves()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline void IMxDrawAttribute::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawHatch::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawHatch::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double IMxDrawHatch::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawHatch::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline double IMxDrawHatch::GradientAngle() const
{
    QVariant qax_result = property("GradientAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawHatch::SetGradientAngle(double value){ setProperty("GradientAngle", QVariant(value)); }

inline QString IMxDrawHatch::GradientName() const
{
    QVariant qax_result = property("GradientName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawHatch::SetGradientName(const QString& value){ setProperty("GradientName", QVariant(value)); }

inline bool IMxDrawHatch::GradientOneColorMode() const
{
    QVariant qax_result = property("GradientOneColorMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawHatch::SetGradientOneColorMode(bool value){ setProperty("GradientOneColorMode", QVariant(value)); }

inline MxDrawXLib::GradientPatternType IMxDrawHatch::GradientType() const
{
    QVariant qax_result = property("GradientType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::GradientPatternType*)qax_result.constData();
}
inline void IMxDrawHatch::SetGradientType(MxDrawXLib::GradientPatternType value){ setProperty("GradientType", QVariant(value)); }

inline bool IMxDrawHatch::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline MxDrawXLib::HatchObjectType IMxDrawHatch::HatchObjectType() const
{
    QVariant qax_result = property("HatchObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::HatchObjectType*)qax_result.constData();
}
inline void IMxDrawHatch::SetHatchObjectType(MxDrawXLib::HatchObjectType value){ setProperty("HatchObjectType", QVariant(value)); }

inline MxDrawXLib::HatchStyle IMxDrawHatch::HatchStyle() const
{
    QVariant qax_result = property("HatchStyle");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::HatchStyle*)qax_result.constData();
}
inline void IMxDrawHatch::SetHatchStyle(MxDrawXLib::HatchStyle value){ setProperty("HatchStyle", QVariant(value)); }

inline QString IMxDrawHatch::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawHatch::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawHatch::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawHatch::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawHatch::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawHatch::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawHatch::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawHatch::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawHatch::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawHatch::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawHatch::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawHatch::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawHatch::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawHatch::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline int IMxDrawHatch::NumLoops() const
{
    QVariant qax_result = property("NumLoops");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline qlonglong IMxDrawHatch::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawHatch::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawHatch::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double IMxDrawHatch::PatternAngle() const
{
    QVariant qax_result = property("PatternAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawHatch::SetPatternAngle(double value){ setProperty("PatternAngle", QVariant(value)); }

inline bool IMxDrawHatch::PatternDouble() const
{
    QVariant qax_result = property("PatternDouble");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawHatch::SetPatternDouble(bool value){ setProperty("PatternDouble", QVariant(value)); }

inline QString IMxDrawHatch::PatternName() const
{
    QVariant qax_result = property("PatternName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawHatch::SetPatternName(const QString& value){ setProperty("PatternName", QVariant(value)); }

inline double IMxDrawHatch::PatternScale() const
{
    QVariant qax_result = property("PatternScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawHatch::SetPatternScale(double value){ setProperty("PatternScale", QVariant(value)); }

inline double IMxDrawHatch::PatternSpace() const
{
    QVariant qax_result = property("PatternSpace");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawHatch::SetPatternSpace(double value){ setProperty("PatternSpace", QVariant(value)); }

inline MxDrawXLib::HatchPatternType IMxDrawHatch::PatternType() const
{
    QVariant qax_result = property("PatternType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::HatchPatternType*)qax_result.constData();
}
inline void IMxDrawHatch::SetPatternType(MxDrawXLib::HatchPatternType value){ setProperty("PatternType", QVariant(value)); }

inline double IMxDrawHatch::ShadeTintValue() const
{
    QVariant qax_result = property("ShadeTintValue");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawHatch::SetShadeTintValue(double value){ setProperty("ShadeTintValue", QVariant(value)); }

inline QString IMxDrawHatch::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawHatch::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawHatch::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawHatch::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawHatch::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawHatch::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawHatch::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawHatch::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawHatch::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawHatch::AddPatternDefinition(double Angle, double baseX, double baseY, double offsetX, double offsetY, MxDrawXLib::IMxDrawResbuf* dashes)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Angle, (void*)&baseX, (void*)&baseY, (void*)&offsetX, (void*)&offsetY, (void*)&dashes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool IMxDrawHatch::AddPatternDefinitionEx(const QString& pszDefinitionData, double dScale)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDefinitionData, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool IMxDrawHatch::AppendLoop(int loopType, MxDrawXLib::IMxDrawResbuf* pData)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&loopType, (void*)&pData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IMxDrawHatch::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawHatch::ClearPatternDefinition()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawHatch::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawHatch::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline IDispatch* IMxDrawHatch::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IMxDrawHatch::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawHatch::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline bool IMxDrawHatch::EvaluateHatch(bool bUnderestimateNumLines)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bUnderestimateNumLines};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawHatch::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline void IMxDrawHatch::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawHatch::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawHatch::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawHatch::GetLoopAt(int loopIndex)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&loopIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawHatch::GetPatternDefinitionAt(int index, double& Angle, double& baseX, double& baseY, double& offsetX, double& offsetY)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index, (void*)&Angle, (void*)&baseX, (void*)&baseY, (void*)&offsetX, (void*)&offsetY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawHatch::GetPolylines()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawHatch::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawHatch::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawHatch::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline double IMxDrawHatch::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool IMxDrawHatch::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline int IMxDrawHatch::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline bool IMxDrawHatch::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline QString IMxDrawHatch::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline void IMxDrawHatch::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawHatch::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool IMxDrawHatch::IsGradient()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool IMxDrawHatch::IsHatch()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline bool IMxDrawHatch::IsSolid()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool IMxDrawHatch::LoadPatternDefinition(const QString& pszFileName, const QString& pszName, double dPatternScale, double dPatternAngel)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFileName, (void*)&pszName, (void*)&dPatternScale, (void*)&dPatternAngel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline int IMxDrawHatch::LoopTypeAt(int loopIndex)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&loopIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline bool IMxDrawHatch::LoopTypeIsPolyline(int loopIndex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&loopIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline void IMxDrawHatch::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void IMxDrawHatch::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline int IMxDrawHatch::NumPatternDefinitions()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline void IMxDrawHatch::RemoveAllLoop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool IMxDrawHatch::RemoveLoopAt(int loopIndex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&loopIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline void IMxDrawHatch::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void IMxDrawHatch::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline bool IMxDrawHatch::ScalePattern(double dScale)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool IMxDrawHatch::SetLoopAt(int loopIndex, int loopType, MxDrawXLib::IMxDrawResbuf* pData)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&loopIndex, (void*)&loopType, (void*)&pData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline bool IMxDrawHatch::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void IMxDrawHatch::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline bool IMxDrawHatch::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool IMxDrawHatch::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool IMxDrawHatch::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline void IMxDrawHatch::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawHatch::getGradientColors(MxDrawXLib::IMxDrawResbuf** mxColors)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&mxColors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline bool IMxDrawHatch::setGradientColors(MxDrawXLib::IMxDrawResbuf* mxColors, MxDrawXLib::IMxDrawResbuf* mxValues)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&mxColors, (void*)&mxValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawLayout::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawLayout::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawLayout::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawLayout::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawLayout::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLayout::LayoutName() const
{
    QVariant qax_result = property("LayoutName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawLayout::SetLayoutName(const QString& value){ setProperty("LayoutName", QVariant(value)); }

inline qlonglong IMxDrawLayout::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLayout::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawLayout::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLayout::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawLayout::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMxDrawLayout::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawLayout::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawLayout::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawLayout::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IMxDrawLayout::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawRasterImage::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawRasterImage::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawRasterImage::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawRasterImage::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawRasterImage::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawRasterImage::ImageDefId() const
{
    QVariant qax_result = property("ImageDefId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void IMxDrawRasterImage::SetImageDefId(qlonglong value){ setProperty("ImageDefId", QVariant(value)); }

inline qlonglong IMxDrawRasterImage::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawRasterImage::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawRasterImage::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawRasterImage::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawRasterImage::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawRasterImage::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawRasterImage::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawRasterImage::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawRasterImage::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawRasterImage::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawRasterImage::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawRasterImage::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawRasterImage::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawRasterImage::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawRasterImage::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawRasterImage::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawRasterImage::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawRasterImage::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawRasterImage::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawRasterImage::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawRasterImage::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawRasterImage::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawRasterImage::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawRasterImage::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawRasterImage::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawRasterImage::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawRasterImage::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawRasterImage::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawRasterImage::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawRasterImage::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawRasterImage::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawRasterImage::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawRasterImage::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawRasterImage::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IMxDrawRasterImage::GetOrientation(MxDrawXLib::IMxDrawPoint** Origin, MxDrawXLib::IMxDrawVector3d** uCorner, MxDrawXLib::IMxDrawVector3d** vOnPlane)
{
    void *_a[] = {0, (void*)&Origin, (void*)&uCorner, (void*)&vOnPlane};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawRasterImage::GetOrientation2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawRasterImage::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawRasterImage::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawRasterImage::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline double IMxDrawRasterImage::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawRasterImage::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int IMxDrawRasterImage::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawRasterImage::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline QString IMxDrawRasterImage::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawRasterImage::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawRasterImage::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void IMxDrawRasterImage::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawRasterImage::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void IMxDrawRasterImage::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IMxDrawRasterImage::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IMxDrawRasterImage::SetOrientation(MxDrawXLib::IMxDrawPoint* Origin, MxDrawXLib::IMxDrawVector3d* uCorner, MxDrawXLib::IMxDrawVector3d* vOnPlane)
{
    void *_a[] = {0, (void*)&Origin, (void*)&uCorner, (void*)&vOnPlane};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline bool IMxDrawRasterImage::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline void IMxDrawRasterImage::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool IMxDrawRasterImage::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool IMxDrawRasterImage::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline bool IMxDrawRasterImage::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline void IMxDrawRasterImage::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}


inline bool IMxDrawBlockTableRecordIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEntity* IMxDrawBlockTableRecordIterator::GetEntity()
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawBlockTableRecordIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawBlockTableRecordIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawBlockTableRecordIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IMxDrawBlockTableRecordIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IMxDrawBlockTableRecordIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawBlockTableRecordIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline double IMxDrawImageMark::Angle() const
{
    QVariant qax_result = property("Angle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawImageMark::SetAngle(double value){ setProperty("Angle", QVariant(value)); }

inline MxDrawXLib::IMxDrawDatabase* IMxDrawImageMark::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawImageMark::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawImageMark::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double IMxDrawImageMark::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawImageMark::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString IMxDrawImageMark::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawImageMark::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline QString IMxDrawImageMark::ImageFile() const
{
    QVariant qax_result = property("ImageFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawImageMark::SetImageFile(const QString& value){ setProperty("ImageFile", QVariant(value)); }

inline qlonglong IMxDrawImageMark::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawImageMark::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool IMxDrawImageMark::IsCDCDraw() const
{
    QVariant qax_result = property("IsCDCDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawImageMark::SetIsCDCDraw(bool value){ setProperty("IsCDCDraw", QVariant(value)); }

inline bool IMxDrawImageMark::IsDrawFlag() const
{
    QVariant qax_result = property("IsDrawFlag");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawImageMark::SetIsDrawFlag(bool value){ setProperty("IsDrawFlag", QVariant(value)); }

inline QString IMxDrawImageMark::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawImageMark::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawImageMark::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawImageMark::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawImageMark::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawImageMark::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawImageMark::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawImageMark::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawImageMark::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawImageMark::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawImageMark::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawImageMark::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawImageMark::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawImageMark::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawImageMark::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline double IMxDrawImageMark::Scale() const
{
    QVariant qax_result = property("Scale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawImageMark::SetScale(double value){ setProperty("Scale", QVariant(value)); }

inline QString IMxDrawImageMark::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawImageMark::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline double IMxDrawImageMark::TextHeight() const
{
    QVariant qax_result = property("TextHeight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawImageMark::SetTextHeight(double value){ setProperty("TextHeight", QVariant(value)); }

inline QString IMxDrawImageMark::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawImageMark::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawImageMark::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawImageMark::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline QString IMxDrawImageMark::TwinkeImageFile() const
{
    QVariant qax_result = property("TwinkeImageFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawImageMark::SetTwinkeImageFile(const QString& value){ setProperty("TwinkeImageFile", QVariant(value)); }

inline bool IMxDrawImageMark::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawImageMark::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double IMxDrawImageMark::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawImageMark::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawImageMark::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawImageMark::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawImageMark::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawImageMark::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IMxDrawImageMark::ClearImageData()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawImageMark::ClearTwinkeImageData()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawImageMark::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void IMxDrawImageMark::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline IDispatch* IMxDrawImageMark::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool IMxDrawImageMark::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawImageMark::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawImageMark::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawImageMark::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawImageMark::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawImageMark::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawImageMark::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawImageMark::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawImageMark::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline double IMxDrawImageMark::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawImageMark::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int IMxDrawImageMark::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawImageMark::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline QString IMxDrawImageMark::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawImageMark::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawImageMark::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void IMxDrawImageMark::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawImageMark::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawImageMark::ReadImageData(const QString& pszFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool IMxDrawImageMark::ReadTwinkeImageData(const QString& pszFiles)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFiles};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline void IMxDrawImageMark::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IMxDrawImageMark::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline bool IMxDrawImageMark::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline void IMxDrawImageMark::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline bool IMxDrawImageMark::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline bool IMxDrawImageMark::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool IMxDrawImageMark::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void IMxDrawImageMark::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawBlockTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawBlockTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawBlockTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawBlockTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawBlockTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawBlockTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawBlockTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawBlockTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawBlockTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawBlockTableRecord* IMxDrawBlockTable::Add(const QString& pszName)
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawBlockTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawBlockTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawBlockTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawBlockTableRecord* IMxDrawBlockTable::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockTableRecord* IMxDrawBlockTable::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawBlockTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawBlockTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IMxDrawBlockTable::Has(const QString& pName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockTableIterator* IMxDrawBlockTable::NewIterator()
{
    MxDrawXLib::IMxDrawBlockTableIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableIterator*>("IMxDrawBlockTableIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableIterator>("IMxDrawBlockTableIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool IMxDrawBlockTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawSymbolTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawSymbolTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawSymbolTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawSymbolTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawSymbolTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawSymbolTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawSymbolTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawSymbolTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawSymbolTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawSymbolTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMxDrawSymbolTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawSymbolTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawSymbolTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawSymbolTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IMxDrawSymbolTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}


inline bool IMxDrawBlockTableIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockTableRecord* IMxDrawBlockTableIterator::GetRecord()
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawBlockTableIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawBlockTableIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawBlockTableIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IMxDrawBlockTableIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IMxDrawBlockTableIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawBlockTableIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawLayerTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawLayerTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawLayerTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawLayerTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawLayerTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawLayerTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLayerTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawLayerTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLayerTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawLayerTableRecord* IMxDrawLayerTable::Add(const QString& pszName)
{
    MxDrawXLib::IMxDrawLayerTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord*>("IMxDrawLayerTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord>("IMxDrawLayerTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawLayerTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawLayerTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawLayerTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawLayerTableRecord* IMxDrawLayerTable::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawLayerTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord*>("IMxDrawLayerTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord>("IMxDrawLayerTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLayerTableRecord* IMxDrawLayerTable::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawLayerTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord*>("IMxDrawLayerTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord>("IMxDrawLayerTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawLayerTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawLayerTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IMxDrawLayerTable::Has(const QString& pName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLayerTableIterator* IMxDrawLayerTable::NewIterator()
{
    MxDrawXLib::IMxDrawLayerTableIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableIterator*>("IMxDrawLayerTableIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableIterator>("IMxDrawLayerTableIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool IMxDrawLayerTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawLayerTableRecord::Color() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("Color");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawLayerTableRecord::SetColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("Color", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawLayerTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawLayerTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawLayerTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawLayerTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawLayerTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool IMxDrawLayerTableRecord::IsFrozen() const
{
    QVariant qax_result = property("IsFrozen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawLayerTableRecord::SetIsFrozen(bool value){ setProperty("IsFrozen", QVariant(value)); }

inline bool IMxDrawLayerTableRecord::IsLocked() const
{
    QVariant qax_result = property("IsLocked");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawLayerTableRecord::SetIsLocked(bool value){ setProperty("IsLocked", QVariant(value)); }

inline bool IMxDrawLayerTableRecord::IsOff() const
{
    QVariant qax_result = property("IsOff");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawLayerTableRecord::SetIsOff(bool value){ setProperty("IsOff", QVariant(value)); }

inline qlonglong IMxDrawLayerTableRecord::LinetypeObjectId() const
{
    QVariant qax_result = property("LinetypeObjectId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void IMxDrawLayerTableRecord::SetLinetypeObjectId(qlonglong value){ setProperty("LinetypeObjectId", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawLayerTableRecord::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawLayerTableRecord::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline QString IMxDrawLayerTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawLayerTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline qlonglong IMxDrawLayerTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLayerTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawLayerTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLayerTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawLayerTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMxDrawLayerTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawLayerTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawLayerTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawLayerTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IMxDrawLayerTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}


inline bool IMxDrawLayerTableIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLayerTableRecord* IMxDrawLayerTableIterator::GetRecord()
{
    MxDrawXLib::IMxDrawLayerTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord*>("IMxDrawLayerTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord>("IMxDrawLayerTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawLayerTableIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawLayerTableIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawLayerTableIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IMxDrawLayerTableIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IMxDrawLayerTableIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawLayerTableIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawLinetypeTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawLinetypeTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawLinetypeTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawLinetypeTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawLinetypeTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawLinetypeTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLinetypeTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawLinetypeTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLinetypeTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawLinetypeTableRecord* IMxDrawLinetypeTable::Add(const QString& pszName)
{
    MxDrawXLib::IMxDrawLinetypeTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord*>("IMxDrawLinetypeTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord>("IMxDrawLinetypeTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawLinetypeTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawLinetypeTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawLinetypeTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawLinetypeTableRecord* IMxDrawLinetypeTable::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawLinetypeTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord*>("IMxDrawLinetypeTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord>("IMxDrawLinetypeTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLinetypeTableRecord* IMxDrawLinetypeTable::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawLinetypeTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord*>("IMxDrawLinetypeTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord>("IMxDrawLinetypeTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawLinetypeTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawLinetypeTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IMxDrawLinetypeTable::Has(const QString& pName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLinetypeTableIterator* IMxDrawLinetypeTable::NewIterator()
{
    MxDrawXLib::IMxDrawLinetypeTableIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableIterator*>("IMxDrawLinetypeTableIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableIterator>("IMxDrawLinetypeTableIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool IMxDrawLinetypeTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline QString IMxDrawLinetypeTableRecord::Comments() const
{
    QVariant qax_result = property("Comments");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawLinetypeTableRecord::SetComments(const QString& value){ setProperty("Comments", QVariant(value)); }

inline MxDrawXLib::IMxDrawDatabase* IMxDrawLinetypeTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawLinetypeTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawLinetypeTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawLinetypeTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawLinetypeTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool IMxDrawLinetypeTableRecord::IsScaledToFit() const
{
    QVariant qax_result = property("IsScaledToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawLinetypeTableRecord::SetIsScaledToFit(bool value){ setProperty("IsScaledToFit", QVariant(value)); }

inline QString IMxDrawLinetypeTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawLinetypeTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline int IMxDrawLinetypeTableRecord::NumDashes() const
{
    QVariant qax_result = property("NumDashes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawLinetypeTableRecord::SetNumDashes(int value){ setProperty("NumDashes", QVariant(value)); }

inline qlonglong IMxDrawLinetypeTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawLinetypeTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawLinetypeTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double IMxDrawLinetypeTableRecord::PatternLength() const
{
    QVariant qax_result = property("PatternLength");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawLinetypeTableRecord::SetPatternLength(double value){ setProperty("PatternLength", QVariant(value)); }

inline QString IMxDrawLinetypeTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawLinetypeTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMxDrawLinetypeTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline double IMxDrawLinetypeTableRecord::DashLengthAt(int index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IMxDrawLinetypeTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawLinetypeTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawLinetypeTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawLinetypeTableRecord::SetDashLengthAt(int index, double dLen)
{
    void *_a[] = {0, (void*)&index, (void*)&dLen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline bool IMxDrawLinetypeTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void IMxDrawLinetypeTableRecord::SetShapeIsUcsOrientedAt(int index, bool isUcsOriented)
{
    void *_a[] = {0, (void*)&index, (void*)&isUcsOriented};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IMxDrawLinetypeTableRecord::SetShapeNumberAt(int index, int lNumber)
{
    void *_a[] = {0, (void*)&index, (void*)&lNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IMxDrawLinetypeTableRecord::SetShapeOffsetAt(int index, MxDrawXLib::IMxDrawVector3d* offset)
{
    void *_a[] = {0, (void*)&index, (void*)&offset};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IMxDrawLinetypeTableRecord::SetShapeRotationAt(int index, double dRotation)
{
    void *_a[] = {0, (void*)&index, (void*)&dRotation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IMxDrawLinetypeTableRecord::SetTextAt(int index, const QString& pszText)
{
    void *_a[] = {0, (void*)&index, (void*)&pszText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline bool IMxDrawLinetypeTableRecord::ShapeIsUcsOrientedAt(int index)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int IMxDrawLinetypeTableRecord::ShapeNumberAt(int index)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* IMxDrawLinetypeTableRecord::ShapeOffsetAt(int index)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline double IMxDrawLinetypeTableRecord::ShapeRotationAt(int index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline qlonglong IMxDrawLinetypeTableRecord::ShapeStyleAt(int index)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline QString IMxDrawLinetypeTableRecord::TextAt(int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IMxDrawLinetypeTableRecord::setShapeStyleAt(int index, qlonglong lId)
{
    void *_a[] = {0, (void*)&index, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}


inline bool IMxDrawLinetypeTableIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLinetypeTableRecord* IMxDrawLinetypeTableIterator::GetRecord()
{
    MxDrawXLib::IMxDrawLinetypeTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord*>("IMxDrawLinetypeTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord>("IMxDrawLinetypeTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawLinetypeTableIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawLinetypeTableIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawLinetypeTableIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IMxDrawLinetypeTableIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IMxDrawLinetypeTableIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawLinetypeTableIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawTextStyleTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawTextStyleTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawTextStyleTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawTextStyleTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawTextStyleTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawTextStyleTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawTextStyleTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawTextStyleTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawTextStyleTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawTextStyleTableRecord* IMxDrawTextStyleTable::Add(const QString& pszName)
{
    MxDrawXLib::IMxDrawTextStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord*>("IMxDrawTextStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord>("IMxDrawTextStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawTextStyleTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawTextStyleTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawTextStyleTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawTextStyleTableRecord* IMxDrawTextStyleTable::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawTextStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord*>("IMxDrawTextStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord>("IMxDrawTextStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTextStyleTableRecord* IMxDrawTextStyleTable::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawTextStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord*>("IMxDrawTextStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord>("IMxDrawTextStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawTextStyleTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawTextStyleTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IMxDrawTextStyleTable::Has(const QString& pName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTextStyleTableIterator* IMxDrawTextStyleTable::NewIterator()
{
    MxDrawXLib::IMxDrawTextStyleTableIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableIterator*>("IMxDrawTextStyleTableIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableIterator>("IMxDrawTextStyleTableIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool IMxDrawTextStyleTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawTextStyleTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawTextStyleTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawTextStyleTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawTextStyleTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawTextStyleTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawTextStyleTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawTextStyleTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline qlonglong IMxDrawTextStyleTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawTextStyleTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawTextStyleTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawTextStyleTableRecord::bigFontFileName() const
{
    QVariant qax_result = property("bigFontFileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawTextStyleTableRecord::setBigFontFileName(const QString& value){ setProperty("bigFontFileName", QVariant(value)); }

inline QString IMxDrawTextStyleTableRecord::fileName() const
{
    QVariant qax_result = property("fileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawTextStyleTableRecord::setFileName(const QString& value){ setProperty("fileName", QVariant(value)); }

inline int IMxDrawTextStyleTableRecord::flagBits() const
{
    QVariant qax_result = property("flagBits");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawTextStyleTableRecord::setFlagBits(int value){ setProperty("flagBits", QVariant(value)); }

inline QString IMxDrawTextStyleTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawTextStyleTableRecord::isShapeFile() const
{
    QVariant qax_result = property("isShapeFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawTextStyleTableRecord::setIsShapeFile(bool value){ setProperty("isShapeFile", QVariant(value)); }

inline bool IMxDrawTextStyleTableRecord::isVertical() const
{
    QVariant qax_result = property("isVertical");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawTextStyleTableRecord::setIsVertical(bool value){ setProperty("isVertical", QVariant(value)); }

inline double IMxDrawTextStyleTableRecord::obliquingAngle() const
{
    QVariant qax_result = property("obliquingAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawTextStyleTableRecord::setObliquingAngle(double value){ setProperty("obliquingAngle", QVariant(value)); }

inline double IMxDrawTextStyleTableRecord::priorSize() const
{
    QVariant qax_result = property("priorSize");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawTextStyleTableRecord::setPriorSize(double value){ setProperty("priorSize", QVariant(value)); }

inline double IMxDrawTextStyleTableRecord::textSize() const
{
    QVariant qax_result = property("textSize");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawTextStyleTableRecord::setTextSize(double value){ setProperty("textSize", QVariant(value)); }

inline double IMxDrawTextStyleTableRecord::xScale() const
{
    QVariant qax_result = property("xScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawTextStyleTableRecord::setXScale(double value){ setProperty("xScale", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawTextStyleTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMxDrawTextStyleTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawTextStyleTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawTextStyleTableRecord::Font(QString& pTypeface, bool& bold, bool& italic, int& charset, int& pitchAndFamily)
{
    void *_a[] = {0, (void*)&pTypeface, (void*)&bold, (void*)&italic, (void*)&charset, (void*)&pitchAndFamily};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawTextStyleTableRecord::Font2()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawTextStyleTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawTextStyleTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawTextStyleTableRecord::SetFont(const QString& pTypeface, bool bold, bool italic, int charset, int pitchAndFamily)
{
    void *_a[] = {0, (void*)&pTypeface, (void*)&bold, (void*)&italic, (void*)&charset, (void*)&pitchAndFamily};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline bool IMxDrawTextStyleTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}


inline bool IMxDrawTextStyleTableIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTextStyleTableRecord* IMxDrawTextStyleTableIterator::GetRecord()
{
    MxDrawXLib::IMxDrawTextStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord*>("IMxDrawTextStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord>("IMxDrawTextStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawTextStyleTableIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawTextStyleTableIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawTextStyleTableIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IMxDrawTextStyleTableIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IMxDrawTextStyleTableIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawTextStyleTableIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline int IMxDrawIdMapping::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline qlonglong IMxDrawIdMapping::Find(qlonglong lKeyId)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lKeyId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline qlonglong IMxDrawIdMapping::Item(int index, qlonglong& lId1)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index, (void*)&lId1};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline qlonglong IMxDrawIdMapping::ItemKey(int index)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline qlonglong IMxDrawIdMapping::ItemValue(int index)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}



inline MxDrawXLib::IMxDrawDatabase* IMxDrawDimStyleTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawDimStyleTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawDimStyleTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawDimStyleTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDimStyleTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDimStyleTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimStyleTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawDimStyleTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimStyleTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawDimStyleTableRecord* IMxDrawDimStyleTable::Add(const QString& pszName)
{
    MxDrawXLib::IMxDrawDimStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord*>("IMxDrawDimStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord>("IMxDrawDimStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDimStyleTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawDimStyleTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawDimStyleTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawDimStyleTableRecord* IMxDrawDimStyleTable::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawDimStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord*>("IMxDrawDimStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord>("IMxDrawDimStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimStyleTableRecord* IMxDrawDimStyleTable::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawDimStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord*>("IMxDrawDimStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord>("IMxDrawDimStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDimStyleTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimStyleTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IMxDrawDimStyleTable::Has(const QString& pName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimStyleTableIterator* IMxDrawDimStyleTable::NewIterator()
{
    MxDrawXLib::IMxDrawDimStyleTableIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableIterator*>("IMxDrawDimStyleTableIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableIterator>("IMxDrawDimStyleTableIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool IMxDrawDimStyleTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawDimStyleTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawDimStyleTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawDimStyleTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawDimStyleTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawDimStyleTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimStyleTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawDimStyleTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline qlonglong IMxDrawDimStyleTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimStyleTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawDimStyleTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawDimStyleTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawDimStyleTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMxDrawDimStyleTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawDimStyleTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline double IMxDrawDimStyleTableRecord::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int IMxDrawDimStyleTableRecord::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline qlonglong IMxDrawDimStyleTableRecord::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QString IMxDrawDimStyleTableRecord::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawDimStyleTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawDimStyleTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawDimStyleTableRecord::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IMxDrawDimStyleTableRecord::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IMxDrawDimStyleTableRecord::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IMxDrawDimStyleTableRecord::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline bool IMxDrawDimStyleTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}


inline bool IMxDrawDimStyleTableIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimStyleTableRecord* IMxDrawDimStyleTableIterator::GetRecord()
{
    MxDrawXLib::IMxDrawDimStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord*>("IMxDrawDimStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord>("IMxDrawDimStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawDimStyleTableIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawDimStyleTableIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawDimStyleTableIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void IMxDrawDimStyleTableIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IMxDrawDimStyleTableIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawDimStyleTableIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline MxDrawXLib::McColor MxDrawDatabase::CurrentlyColorIndex() const
{
    QVariant qax_result = property("CurrentlyColorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawDatabase::SetCurrentlyColorIndex(MxDrawXLib::McColor value){ setProperty("CurrentlyColorIndex", QVariant(value)); }

inline QString MxDrawDatabase::CurrentlyDimstyleName() const
{
    QVariant qax_result = property("CurrentlyDimstyleName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDatabase::SetCurrentlyDimstyleName(const QString& value){ setProperty("CurrentlyDimstyleName", QVariant(value)); }

inline QString MxDrawDatabase::CurrentlyLayerName() const
{
    QVariant qax_result = property("CurrentlyLayerName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDatabase::SetCurrentlyLayerName(const QString& value){ setProperty("CurrentlyLayerName", QVariant(value)); }

inline QString MxDrawDatabase::CurrentlyLineTypeName() const
{
    QVariant qax_result = property("CurrentlyLineTypeName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDatabase::SetCurrentlyLineTypeName(const QString& value){ setProperty("CurrentlyLineTypeName", QVariant(value)); }

inline double MxDrawDatabase::CurrentlyLineTypeScale() const
{
    QVariant qax_result = property("CurrentlyLineTypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDatabase::SetCurrentlyLineTypeScale(double value){ setProperty("CurrentlyLineTypeScale", QVariant(value)); }

inline QString MxDrawDatabase::CurrentlyTextStyle() const
{
    QVariant qax_result = property("CurrentlyTextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDatabase::SetCurrentlyTextStyle(const QString& value){ setProperty("CurrentlyTextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawDatabase::CurrentlyTrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("CurrentlyTrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawDatabase::SetCurrentlyTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("CurrentlyTrueColor", QVariant(typeId, &value));
}

inline QString MxDrawDatabase::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawDatabase::Insbase() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Insbase");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDatabase::SetInsbase(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Insbase", QVariant(typeId, &value));
}

inline qlonglong MxDrawDatabase::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDatabase::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double MxDrawDatabase::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDatabase::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline QString MxDrawDatabase::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawBlockTableRecord* MxDrawDatabase::CurrentSpace()
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockTable* MxDrawDatabase::GetBlockTable()
{
    MxDrawXLib::IMxDrawBlockTable* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTable*>("IMxDrawBlockTable*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTable>("IMxDrawBlockTable", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimStyleTable* MxDrawDatabase::GetDimStyleTable()
{
    MxDrawXLib::IMxDrawDimStyleTable* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTable*>("IMxDrawDimStyleTable*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTable>("IMxDrawDimStyleTable", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLayerTable* MxDrawDatabase::GetLayerTable()
{
    MxDrawXLib::IMxDrawLayerTable* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTable*>("IMxDrawLayerTable*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTable>("IMxDrawLayerTable", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDatabase::GetLayoutDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLinetypeTable* MxDrawDatabase::GetLinetypeTable()
{
    MxDrawXLib::IMxDrawLinetypeTable* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTable*>("IMxDrawLinetypeTable*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTable>("IMxDrawLinetypeTable", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDatabase::GetNamedObjectsDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDatabase::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTextStyleTable* MxDrawDatabase::GetTextStyleTable()
{
    MxDrawXLib::IMxDrawTextStyleTable* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTable*>("IMxDrawTextStyleTable*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTable>("IMxDrawTextStyleTable", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawUcs* MxDrawDatabase::GetUCS()
{
    MxDrawXLib::IMxDrawUcs* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawUcs*>("IMxDrawUcs*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawUcs>("IMxDrawUcs", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDatabase::HandleToObject(const QString& handle)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&handle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong MxDrawDatabase::HandleToObjectId(const QString& pszHandle)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline qlonglong MxDrawDatabase::Insert(MxDrawXLib::IMxDrawDatabase* pDb, const QString& pszBlockName)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pDb, (void*)&pszBlockName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QString MxDrawDatabase::ObjectIdToHandle(qlonglong lId)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDatabase::ObjectIdToObject(qlonglong lId)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool MxDrawDatabase::ReadDwgFile(const QString& pszFullFileName, const QString& password)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFullFileName, (void*)&password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawDatabase::SaveAs(const QString& pszFullFileName, int SaveAsType)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFullFileName, (void*)&SaveAsType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool MxDrawDatabase::SaveAs(const QString& pszFullFileName, int SaveAsType, const QVariant& vSecurityParams)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFullFileName, (void*)&SaveAsType, (void*)&vSecurityParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawDatabase::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline void MxDrawDatabase::SetVariable(const QString& pszName, MxDrawXLib::IMxDrawResbuf* value)
{
    void *_a[] = {0, (void*)&pszName, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawDatabase::Wblock(MxDrawXLib::IMxDrawResbuf* aryId, MxDrawXLib::IMxDrawPoint* basePoint, MxDrawXLib::IMxDrawIdMapping** ppIdMapping)
{
    MxDrawXLib::IMxDrawDatabase* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryId, (void*)&basePoint, (void*)&ppIdMapping};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}


inline QString MxDrawMcRxObject::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawMcRxObject::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawMcRxObject::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawMcRxObject::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawMcRxObject::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool MxDrawMcRxObject::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawMcDbObject::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawMcDbObject::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawMcDbObject::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawMcDbObject::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawMcDbObject::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawMcDbObject::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawMcDbObject::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawMcDbObject::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawMcDbObject::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawMcDbObject::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MxDrawMcDbObject::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawMcDbObject::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawMcDbObject::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawMcDbObject::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool MxDrawMcDbObject::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawSymbolTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawSymbolTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawSymbolTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawSymbolTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawSymbolTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawSymbolTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawSymbolTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline qlonglong MxDrawSymbolTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawSymbolTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawSymbolTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawSymbolTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawSymbolTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MxDrawSymbolTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawSymbolTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawSymbolTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSymbolTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool MxDrawSymbolTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawBlockTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawBlockTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawBlockTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawBlockTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawBlockTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawBlockTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawBlockTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline qlonglong MxDrawBlockTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawBlockTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawBlockTableRecord::Origin() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Origin");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawBlockTableRecord::SetOrigin(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Origin", QVariant(typeId, &value));
}

inline qlonglong MxDrawBlockTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawBlockTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawArc* MxDrawBlockTableRecord::AddArc(double dCenX, double dCenY, double dRadius, double dStartAng, double dEndAng)
{
    MxDrawXLib::IMxDrawArc* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawArc*>("IMxDrawArc*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawArc>("IMxDrawArc", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dRadius, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawArc* MxDrawBlockTableRecord::AddArc2(double dStartPointX, double dStartPointY, double dX, double dY, double dEndPointX, double dEndPointY)
{
    MxDrawXLib::IMxDrawArc* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawArc*>("IMxDrawArc*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawArc>("IMxDrawArc", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dX, (void*)&dY, (void*)&dEndPointX, (void*)&dEndPointY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawArc* MxDrawBlockTableRecord::AddArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge)
{
    MxDrawXLib::IMxDrawArc* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawArc*>("IMxDrawArc*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawArc>("IMxDrawArc", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dEndPointX, (void*)&dEndPointY, (void*)&dBulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawAttributeDefinition* MxDrawBlockTableRecord::AddAttributeDef(double dHeight, MxDrawXLib::McAttributeMode mode, const QString& pszPrompt, double dInsertionPointX, double dInsertionPointY, const QString& pszTag, const QString& pszValue)
{
    MxDrawXLib::IMxDrawAttributeDefinition* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawAttributeDefinition*>("IMxDrawAttributeDefinition*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawAttributeDefinition>("IMxDrawAttributeDefinition", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dHeight, (void*)&mode, (void*)&pszPrompt, (void*)&dInsertionPointX, (void*)&dInsertionPointY, (void*)&pszTag, (void*)&pszValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawCircle* MxDrawBlockTableRecord::AddCircle(double dCenX, double dCenY, double dRadius)
{
    MxDrawXLib::IMxDrawCircle* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCircle*>("IMxDrawCircle*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCircle>("IMxDrawCircle", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dRadius};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEntity* MxDrawBlockTableRecord::AddCloneEntity(qlonglong lId)
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline IDispatch* MxDrawBlockTableRecord::AddCustomObject(const QString& pszClassName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pszClassName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimAligned* MxDrawBlockTableRecord::AddDimAligned(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dTextPositionX, double dTextPositionY)
{
    MxDrawXLib::IMxDrawDimAligned* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAligned*>("IMxDrawDimAligned*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAligned>("IMxDrawDimAligned", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dExtLine1PointX, (void*)&dExtLine1PointY, (void*)&dExtLine2PointX, (void*)&dExtLine2PointY, (void*)&dTextPositionX, (void*)&dTextPositionY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimAngular* MxDrawBlockTableRecord::AddDimAngular(double dAngleVertexX, double dAngleVertexY, double dFirstEndPointX, double dFirstEndPointY, double dSecondEndPointX, double dSecondEndPointY, double dTextPointX, double dTextPointY)
{
    MxDrawXLib::IMxDrawDimAngular* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAngular*>("IMxDrawDimAngular*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAngular>("IMxDrawDimAngular", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dAngleVertexX, (void*)&dAngleVertexY, (void*)&dFirstEndPointX, (void*)&dFirstEndPointY, (void*)&dSecondEndPointX, (void*)&dSecondEndPointY, (void*)&dTextPointX, (void*)&dTextPointY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimDiametric* MxDrawBlockTableRecord::AddDimDiametric(double dChordPointX, double dChordPointY, double dFarChordPointX, double dFarChordPointY, double dLeaderLength)
{
    MxDrawXLib::IMxDrawDimDiametric* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimDiametric*>("IMxDrawDimDiametric*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimDiametric>("IMxDrawDimDiametric", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dChordPointX, (void*)&dChordPointY, (void*)&dFarChordPointX, (void*)&dFarChordPointY, (void*)&dLeaderLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimOrdinate* MxDrawBlockTableRecord::AddDimOrdinate(double dDefinitionPointX, double dDefinitionPointY, double dLeaderEndPointX, double dLeaderEndPointY, bool useXAxis)
{
    MxDrawXLib::IMxDrawDimOrdinate* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimOrdinate*>("IMxDrawDimOrdinate*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimOrdinate>("IMxDrawDimOrdinate", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDefinitionPointX, (void*)&dDefinitionPointY, (void*)&dLeaderEndPointX, (void*)&dLeaderEndPointY, (void*)&useXAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimRadial* MxDrawBlockTableRecord::AddDimRadial(double dCenterX, double dCenterY, double dChordPointX, double dChordPointY, double LeaderLength)
{
    MxDrawXLib::IMxDrawDimRadial* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRadial*>("IMxDrawDimRadial*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRadial>("IMxDrawDimRadial", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dChordPointX, (void*)&dChordPointY, (void*)&LeaderLength};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimRotated* MxDrawBlockTableRecord::AddDimRotated(double dExtLine1PointX, double dExtLine1PointY, double dExtLine2PointX, double dExtLine2PointY, double dDimLineLocationX, double dDimLineLocationY, double dRotationAngle)
{
    MxDrawXLib::IMxDrawDimRotated* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRotated*>("IMxDrawDimRotated*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRotated>("IMxDrawDimRotated", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dExtLine1PointX, (void*)&dExtLine1PointY, (void*)&dExtLine2PointX, (void*)&dExtLine2PointY, (void*)&dDimLineLocationX, (void*)&dDimLineLocationY, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEllipse* MxDrawBlockTableRecord::AddEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio)
{
    MxDrawXLib::IMxDrawEllipse* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse*>("IMxDrawEllipse*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse>("IMxDrawEllipse", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEllipse* MxDrawBlockTableRecord::AddEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng)
{
    MxDrawXLib::IMxDrawEllipse* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse*>("IMxDrawEllipse*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse>("IMxDrawEllipse", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEntity* MxDrawBlockTableRecord::AddEntity(const QString& pszClassName)
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszClassName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEntity* MxDrawBlockTableRecord::AddEntityEx(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawHatch* MxDrawBlockTableRecord::AddHatch(int lPatternType, const QString& pszPatternName)
{
    MxDrawXLib::IMxDrawHatch* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawHatch*>("IMxDrawHatch*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawHatch>("IMxDrawHatch", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lPatternType, (void*)&pszPatternName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawRasterImage* MxDrawBlockTableRecord::AddImage(double dOriginX, double dOriginY, double dUCornerX, double dUCornerY, double dVOnPlaneX, double dVOnPlaneY, qlonglong ImageDefId)
{
    MxDrawXLib::IMxDrawRasterImage* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage*>("IMxDrawRasterImage*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage>("IMxDrawRasterImage", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOriginX, (void*)&dOriginY, (void*)&dUCornerX, (void*)&dUCornerY, (void*)&dVOnPlaneX, (void*)&dVOnPlaneY, (void*)&ImageDefId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawRasterImage* MxDrawBlockTableRecord::AddImage2(double dOriginX, double dOriginY, double dScale, qlonglong ImageDefId)
{
    MxDrawXLib::IMxDrawRasterImage* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage*>("IMxDrawRasterImage*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage>("IMxDrawRasterImage", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOriginX, (void*)&dOriginY, (void*)&dScale, (void*)&ImageDefId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawImageMark* MxDrawBlockTableRecord::AddImageMark(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFileName, const QString& pszTwinkeImageFiles, bool isSaveData)
{
    MxDrawXLib::IMxDrawImageMark* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawImageMark*>("IMxDrawImageMark*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawImageMark>("IMxDrawImageMark", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&dScale, (void*)&dAng, (void*)&pszFileName, (void*)&pszTwinkeImageFiles, (void*)&isSaveData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLine* MxDrawBlockTableRecord::AddLine(double dX1, double dY1, double dX2, double dY2)
{
    MxDrawXLib::IMxDrawLine* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLine*>("IMxDrawLine*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLine>("IMxDrawLine", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPolyline* MxDrawBlockTableRecord::AddLines(MxDrawXLib::IMxDrawPoints* points)
{
    MxDrawXLib::IMxDrawPolyline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline*>("IMxDrawPolyline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline>("IMxDrawPolyline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMText* MxDrawBlockTableRecord::AddMText(double dInsertionPointX, double dInsertionPointY, double dHeight, const QString& pszText)
{
    MxDrawXLib::IMxDrawMText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMText*>("IMxDrawMText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMText>("IMxDrawMText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dInsertionPointX, (void*)&dInsertionPointY, (void*)&dHeight, (void*)&pszText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPointEntity* MxDrawBlockTableRecord::AddPoint(double dX1, double dY1)
{
    MxDrawXLib::IMxDrawPointEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPointEntity*>("IMxDrawPointEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPointEntity>("IMxDrawPointEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPolyline* MxDrawBlockTableRecord::AddPolyline(MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* sWdiths, MxDrawXLib::IMxDrawResbuf* eWidths, MxDrawXLib::IMxDrawResbuf* bulges)
{
    MxDrawXLib::IMxDrawPolyline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline*>("IMxDrawPolyline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline>("IMxDrawPolyline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&sWdiths, (void*)&eWidths, (void*)&bulges};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPolyline* MxDrawBlockTableRecord::AddPolyline2(MxDrawXLib::IMxDrawPoints* points, double dWidth)
{
    MxDrawXLib::IMxDrawPolyline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline*>("IMxDrawPolyline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline>("IMxDrawPolyline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&dWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawRay* MxDrawBlockTableRecord::AddRay(double dX1, double dY1, double dX2, double dY2)
{
    MxDrawXLib::IMxDrawRay* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawRay*>("IMxDrawRay*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawRay>("IMxDrawRay", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawSolid* MxDrawBlockTableRecord::AddSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4)
{
    MxDrawXLib::IMxDrawSolid* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawSolid*>("IMxDrawSolid*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawSolid>("IMxDrawSolid", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2, (void*)&dX3, (void*)&dY3, (void*)&dX4, (void*)&dY4};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawSpline* MxDrawBlockTableRecord::AddSpline(MxDrawXLib::IMxDrawPoints* points, double dStartTangentX, double dStartTangentY, double dEndTangentX, double dEndTangentY)
{
    MxDrawXLib::IMxDrawSpline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawSpline*>("IMxDrawSpline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawSpline>("IMxDrawSpline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&dStartTangentX, (void*)&dStartTangentY, (void*)&dEndTangentX, (void*)&dEndTangentY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawText* MxDrawBlockTableRecord::AddText(double dPosX, double dPosY, const QString& pszText, double dHeight)
{
    MxDrawXLib::IMxDrawText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawText*>("IMxDrawText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawText>("IMxDrawText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawText* MxDrawBlockTableRecord::AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation)
{
    MxDrawXLib::IMxDrawText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawText*>("IMxDrawText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawText>("IMxDrawText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawText* MxDrawBlockTableRecord::AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode)
{
    MxDrawXLib::IMxDrawText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawText*>("IMxDrawText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawText>("IMxDrawText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation, (void*)&horizontalMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawText* MxDrawBlockTableRecord::AddText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode, MxDrawXLib::McVerticalAlignment verticalMode)
{
    MxDrawXLib::IMxDrawText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawText*>("IMxDrawText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawText>("IMxDrawText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation, (void*)&horizontalMode, (void*)&verticalMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTolerance* MxDrawBlockTableRecord::AddTolerance(const QString& pszText, double dX, double dY, double dDirectionX, double dDirectionY)
{
    MxDrawXLib::IMxDrawTolerance* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTolerance*>("IMxDrawTolerance*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTolerance>("IMxDrawTolerance", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszText, (void*)&dX, (void*)&dY, (void*)&dDirectionX, (void*)&dDirectionY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTrace* MxDrawBlockTableRecord::AddTrace(MxDrawXLib::IMxDrawPoints* points)
{
    MxDrawXLib::IMxDrawTrace* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTrace*>("IMxDrawTrace*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTrace>("IMxDrawTrace", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawXline* MxDrawBlockTableRecord::AddXline(double dX1, double dY1, double dX2, double dY2)
{
    MxDrawXLib::IMxDrawXline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawXline*>("IMxDrawXline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawXline>("IMxDrawXline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawBlockTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void MxDrawBlockTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void MxDrawBlockTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawBlockTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline bool MxDrawBlockTableRecord::GetIsLayout()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLayout* MxDrawBlockTableRecord::GetLayout()
{
    MxDrawXLib::IMxDrawLayout* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayout*>("IMxDrawLayout*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayout>("IMxDrawLayout", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawBlockTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockReference* MxDrawBlockTableRecord::InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName)
{
    MxDrawXLib::IMxDrawBlockReference* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference*>("IMxDrawBlockReference*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference>("IMxDrawBlockReference", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dInsertPointX, (void*)&dInsertPointY, (void*)&psxBlkName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockReference* MxDrawBlockTableRecord::InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale)
{
    MxDrawXLib::IMxDrawBlockReference* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference*>("IMxDrawBlockReference*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference>("IMxDrawBlockReference", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dInsertPointX, (void*)&dInsertPointY, (void*)&psxBlkName, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockReference* MxDrawBlockTableRecord::InsertBlock(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale, double dAng)
{
    MxDrawXLib::IMxDrawBlockReference* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference*>("IMxDrawBlockReference*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference>("IMxDrawBlockReference", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dInsertPointX, (void*)&dInsertPointY, (void*)&psxBlkName, (void*)&dScale, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockTableRecordIterator* MxDrawBlockTableRecord::NewIterator()
{
    MxDrawXLib::IMxDrawBlockTableRecordIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecordIterator*>("IMxDrawBlockTableRecordIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecordIterator>("IMxDrawBlockTableRecordIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool MxDrawBlockTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawEntity::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawEntity::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawEntity::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawEntity::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEntity::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawEntity::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawEntity::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawEntity::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEntity::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawEntity::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEntity::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawEntity::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawEntity::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawEntity::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawEntity::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawEntity::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawEntity::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawEntity::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawEntity::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawEntity::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawEntity::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEntity::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawEntity::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawEntity::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawEntity::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawEntity::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawEntity::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawEntity::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawEntity::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawEntity::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawEntity::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawEntity::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawEntity::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawEntity::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawEntity::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawEntity::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawEntity::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawEntity::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawEntity::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawEntity::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawEntity::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawEntity::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double MxDrawEntity::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawEntity::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int MxDrawEntity::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawEntity::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString MxDrawEntity::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void MxDrawEntity::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawEntity::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawEntity::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void MxDrawEntity::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawEntity::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawEntity::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawEntity::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void MxDrawEntity::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool MxDrawEntity::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool MxDrawEntity::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool MxDrawEntity::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void MxDrawEntity::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawLine::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawLine::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawLine::EndPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("EndPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawLine::SetEndPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("EndPoint", QVariant(typeId, &value));
}

inline bool MxDrawLine::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawLine::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawLine::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawLine::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawLine::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLine::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawLine::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawLine::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawLine::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawLine::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawLine::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawLine::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawLine::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawLine::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawLine::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawLine::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLine::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawLine::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawLine::StartPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("StartPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawLine::SetStartPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("StartPoint", QVariant(typeId, &value));
}

inline QString MxDrawLine::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawLine::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawLine::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawLine::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawLine::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawLine::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawLine::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawLine::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawLine::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawLine::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawLine::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawLine::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawLine::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawLine::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawLine::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawLine::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawLine::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double MxDrawLine::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawLine::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawLine::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool MxDrawLine::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawLine::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool MxDrawLine::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double MxDrawLine::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool MxDrawLine::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double MxDrawLine::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawLine::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawLine::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawLine::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawLine::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawLine::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawLine::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool MxDrawLine::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double MxDrawLine::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool MxDrawLine::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double MxDrawLine::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool MxDrawLine::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double MxDrawLine::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool MxDrawLine::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawLine::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool MxDrawLine::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawLine::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawLine::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* MxDrawLine::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool MxDrawLine::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawLine::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double MxDrawLine::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawLine::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawLine::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool MxDrawLine::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double MxDrawLine::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool MxDrawLine::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int MxDrawLine::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool MxDrawLine::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString MxDrawLine::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void MxDrawLine::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawLine::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool MxDrawLine::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void MxDrawLine::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void MxDrawLine::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool MxDrawLine::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawLine::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void MxDrawLine::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void MxDrawLine::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool MxDrawLine::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void MxDrawLine::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline bool MxDrawLine::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool MxDrawLine::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool MxDrawLine::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline bool MxDrawLine::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawLine::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline void MxDrawLine::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawDictionary::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawDictionary::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawDictionary::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawDictionary::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDictionary::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDictionary::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDictionary::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawDictionary::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDictionary::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDictionary::AddObject(const QString& pszKeyWord, const QString& pszClassName)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszKeyWord, (void*)&pszClassName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawXRecord* MxDrawDictionary::AddXRecord(const QString& pszKeyWord)
{
    MxDrawXLib::IMxDrawXRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawXRecord*>("IMxDrawXRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawXRecord>("IMxDrawXRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDictionary::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void MxDrawDictionary::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawDictionary::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDictionary::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDictionary::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDictionary::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDictionary::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionaryIterator* MxDrawDictionary::NewIterator()
{
    MxDrawXLib::IMxDrawDictionaryIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionaryIterator*>("IMxDrawDictionaryIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionaryIterator>("IMxDrawDictionaryIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void MxDrawDictionary::Remove(const QString& pszName)
{
    void *_a[] = {0, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void MxDrawDictionary::Rename(const QString& pszOldName, const QString& pszNewName)
{
    void *_a[] = {0, (void*)&pszOldName, (void*)&pszNewName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void MxDrawDictionary::Replace(const QString& pszName, MxDrawXLib::IMxDrawMcDbObject* pObject)
{
    void *_a[] = {0, (void*)&pszName, (void*)&pObject};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline bool MxDrawDictionary::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}


inline MxDrawXLib::McColorMethod MxDrawMcCmColor::ColorMethod() const
{
    QVariant qax_result = property("ColorMethod");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColorMethod*)qax_result.constData();
}
inline void MxDrawMcCmColor::SetColorMethod(MxDrawXLib::McColorMethod value){ setProperty("ColorMethod", QVariant(value)); }

inline int MxDrawMcCmColor::EntityColor() const
{
    QVariant qax_result = property("EntityColor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawMcCmColor::SetEntityColor(int value){ setProperty("EntityColor", QVariant(value)); }

inline int MxDrawMcCmColor::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawMcCmColor::setColorIndex(int value){ setProperty("colorIndex", QVariant(value)); }

inline int MxDrawMcCmColor::GetBlue()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QString MxDrawMcCmColor::GetColorName()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int MxDrawMcCmColor::GetGreen()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int MxDrawMcCmColor::GetRed()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void MxDrawMcCmColor::SetRGB(int lRed, int lGreen, int lBlue)
{
    void *_a[] = {0, (void*)&lRed, (void*)&lGreen, (void*)&lBlue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawCurve::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawCurve::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawCurve::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawCurve::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCurve::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawCurve::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawCurve::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawCurve::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCurve::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawCurve::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCurve::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawCurve::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawCurve::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawCurve::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawCurve::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawCurve::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawCurve::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawCurve::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawCurve::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawCurve::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawCurve::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCurve::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawCurve::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawCurve::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawCurve::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawCurve::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawCurve::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawCurve::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawCurve::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawCurve::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawCurve::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawCurve::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawCurve::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawCurve::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawCurve::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCurve::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double MxDrawCurve::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawCurve::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawCurve::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCurve::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double MxDrawCurve::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double MxDrawCurve::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawCurve::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCurve::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawCurve::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawCurve::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawCurve::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double MxDrawCurve::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double MxDrawCurve::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double MxDrawCurve::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCurve::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCurve::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCurve::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* MxDrawCurve::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawCurve::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double MxDrawCurve::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCurve::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCurve::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double MxDrawCurve::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int MxDrawCurve::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool MxDrawCurve::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString MxDrawCurve::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void MxDrawCurve::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawCurve::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool MxDrawCurve::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void MxDrawCurve::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void MxDrawCurve::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool MxDrawCurve::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCurve::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void MxDrawCurve::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void MxDrawCurve::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool MxDrawCurve::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline void MxDrawCurve::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline bool MxDrawCurve::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline bool MxDrawCurve::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool MxDrawCurve::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool MxDrawCurve::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCurve::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline void MxDrawCurve::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}


inline double MxDrawPoint::x() const
{
    QVariant qax_result = property("x");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPoint::setX(double value){ setProperty("x", QVariant(value)); }

inline double MxDrawPoint::y() const
{
    QVariant qax_result = property("y");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPoint::setY(double value){ setProperty("y", QVariant(value)); }

inline double MxDrawPoint::z() const
{
    QVariant qax_result = property("z");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPoint::setZ(double value){ setProperty("z", QVariant(value)); }

inline void MxDrawPoint::Add(MxDrawXLib::IMxDrawVector3d* pVec)
{
    void *_a[] = {0, (void*)&pVec};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline double MxDrawPoint::DistanceTo(MxDrawXLib::IMxDrawPoint* pPoint)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool MxDrawPoint::IsEqualTo(MxDrawXLib::IMxDrawPoint* pPoint, double dTol)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pPoint, (void*)&dTol};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void MxDrawPoint::Sum(MxDrawXLib::IMxDrawVector3d* pVec)
{
    void *_a[] = {0, (void*)&pVec};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawPoint::SumVector(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawPoint::TransformBy(MxDrawXLib::IMxDrawMatrix3d* pMat)
{
    void *_a[] = {0, (void*)&pMat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}


inline int MxDrawPoints::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void MxDrawPoints::Add(double dX, double dY, double dZ)
{
    void *_a[] = {0, (void*)&dX, (void*)&dY, (void*)&dZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void MxDrawPoints::Add2(MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline MxDrawXLib::IMxDrawPoint* MxDrawPoints::Item(int lItem)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void MxDrawPoints::Remove(int lItem)
{
    void *_a[] = {0, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawPoints::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline double MxDrawPolyline::ConstantWidth() const
{
    QVariant qax_result = property("ConstantWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPolyline::SetConstantWidth(double value){ setProperty("ConstantWidth", QVariant(value)); }

inline MxDrawXLib::IMxDrawDatabase* MxDrawPolyline::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawPolyline::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawPolyline::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPolyline::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool MxDrawPolyline::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool MxDrawPolyline::HasPlinegen() const
{
    QVariant qax_result = property("HasPlinegen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawPolyline::SetHasPlinegen(bool value){ setProperty("HasPlinegen", QVariant(value)); }

inline QString MxDrawPolyline::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPolyline::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawPolyline::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawPolyline::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool MxDrawPolyline::IsClosedStatus() const
{
    QVariant qax_result = property("IsClosedStatus");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawPolyline::SetIsClosedStatus(bool value){ setProperty("IsClosedStatus", QVariant(value)); }

inline QString MxDrawPolyline::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPolyline::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawPolyline::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPolyline::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawPolyline::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPolyline::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawPolyline::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawPolyline::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawPolyline::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawPolyline::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline int MxDrawPolyline::NumVerts() const
{
    QVariant qax_result = property("NumVerts");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline qlonglong MxDrawPolyline::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawPolyline::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawPolyline::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawPolyline::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPolyline::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline double MxDrawPolyline::Thickness() const
{
    QVariant qax_result = property("Thickness");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPolyline::SetThickness(double value){ setProperty("Thickness", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawPolyline::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawPolyline::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawPolyline::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawPolyline::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawPolyline::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawPolyline::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawPolyline::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawPolyline::AddVertexAt(MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void MxDrawPolyline::AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge)
{
    void *_a[] = {0, (void*)&point, (void*)&bulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawPolyline::AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge, double startWidth)
{
    void *_a[] = {0, (void*)&point, (void*)&bulge, (void*)&startWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawPolyline::AddVertexAt(MxDrawXLib::IMxDrawPoint* point, double bulge, double startWidth, double endWidth)
{
    void *_a[] = {0, (void*)&point, (void*)&bulge, (void*)&startWidth, (void*)&endWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawPolyline::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawPolyline::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawPolyline::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline IDispatch* MxDrawPolyline::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool MxDrawPolyline::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawPolyline::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawPolyline::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void MxDrawPolyline::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawPolyline::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetBulgeAt(int index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawPolyline::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetEWidthsAt(int index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawPolyline::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawPolyline::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawPolyline::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawPolyline::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawPolyline::GetPointAt(int index)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawPolyline::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawPolyline::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawPolyline::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetSWidthsAt(int index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* MxDrawPolyline::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawPolyline::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawPolyline::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline void MxDrawPolyline::GetWidthsAt(int index, double& pStartWidth, double& pEndWidth)
{
    void *_a[] = {0, (void*)&index, (void*)&pStartWidth, (void*)&pEndWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawPolyline::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline double MxDrawPolyline::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline int MxDrawPolyline::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline bool MxDrawPolyline::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline QString MxDrawPolyline::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline void MxDrawPolyline::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawPolyline::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline bool MxDrawPolyline::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline void MxDrawPolyline::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void MxDrawPolyline::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline bool MxDrawPolyline::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawPolyline::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool MxDrawPolyline::PointInPolygon(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void MxDrawPolyline::RemoveVertexAt(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void MxDrawPolyline::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void MxDrawPolyline::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline void MxDrawPolyline::SetBulgeAt(int index, double bulge)
{
    void *_a[] = {0, (void*)&index, (void*)&bulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void MxDrawPolyline::SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&index, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline bool MxDrawPolyline::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline void MxDrawPolyline::SetWidthsAt(int index, double dStartWidth, double dEndWidth)
{
    void *_a[] = {0, (void*)&index, (void*)&dStartWidth, (void*)&dEndWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void MxDrawPolyline::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline bool MxDrawPolyline::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
    return qax_result;
}

inline bool MxDrawPolyline::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
    return qax_result;
}

inline bool MxDrawPolyline::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
    return qax_result;
}

inline bool MxDrawPolyline::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawPolyline::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
    return qax_result;
}

inline void MxDrawPolyline::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}


inline MxDrawXLib::IMxDrawPoint* MxDrawArc::Center() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Center");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawArc::SetCenter(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Center", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawArc::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawArc::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawArc::EndAngle() const
{
    QVariant qax_result = property("EndAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawArc::SetEndAngle(double value){ setProperty("EndAngle", QVariant(value)); }

inline bool MxDrawArc::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawArc::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawArc::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawArc::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawArc::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawArc::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawArc::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawArc::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawArc::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawArc::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawArc::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawArc::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawArc::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawArc::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawArc::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawArc::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawArc::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawArc::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double MxDrawArc::Radius() const
{
    QVariant qax_result = property("Radius");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawArc::SetRadius(double value){ setProperty("Radius", QVariant(value)); }

inline double MxDrawArc::StartAngle() const
{
    QVariant qax_result = property("StartAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawArc::SetStartAngle(double value){ setProperty("StartAngle", QVariant(value)); }

inline QString MxDrawArc::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawArc::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawArc::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawArc::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawArc::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawArc::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawArc::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawArc::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawArc::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawArc::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawArc::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawArc::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawArc::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawArc::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawArc::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawArc::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawArc::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double MxDrawArc::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawArc::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawArc::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool MxDrawArc::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawArc::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool MxDrawArc::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double MxDrawArc::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool MxDrawArc::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double MxDrawArc::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawArc::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawArc::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawArc::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawArc::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawArc::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawArc::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool MxDrawArc::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double MxDrawArc::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool MxDrawArc::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double MxDrawArc::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool MxDrawArc::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double MxDrawArc::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool MxDrawArc::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawArc::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool MxDrawArc::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawArc::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawArc::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* MxDrawArc::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool MxDrawArc::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawArc::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double MxDrawArc::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawArc::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawArc::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool MxDrawArc::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double MxDrawArc::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool MxDrawArc::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int MxDrawArc::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool MxDrawArc::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString MxDrawArc::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void MxDrawArc::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawArc::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool MxDrawArc::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void MxDrawArc::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void MxDrawArc::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool MxDrawArc::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawArc::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void MxDrawArc::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void MxDrawArc::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool MxDrawArc::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline void MxDrawArc::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline bool MxDrawArc::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline bool MxDrawArc::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline bool MxDrawArc::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline bool MxDrawArc::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawArc::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline void MxDrawArc::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}


inline MxDrawXLib::IMxDrawPoint* MxDrawText::AlignmentPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("AlignmentPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawText::SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("AlignmentPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawText::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawText::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawText::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double MxDrawText::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawText::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString MxDrawText::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawText::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawText::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawText::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool MxDrawText::IsMirroredInX() const
{
    QVariant qax_result = property("IsMirroredInX");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawText::SetIsMirroredInX(bool value){ setProperty("IsMirroredInX", QVariant(value)); }

inline bool MxDrawText::IsMirroredInY() const
{
    QVariant qax_result = property("IsMirroredInY");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawText::SetIsMirroredInY(bool value){ setProperty("IsMirroredInY", QVariant(value)); }

inline QString MxDrawText::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawText::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawText::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawText::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawText::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawText::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawText::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawText::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawText::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawText::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawText::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawText::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawText::Oblique() const
{
    QVariant qax_result = property("Oblique");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawText::SetOblique(double value){ setProperty("Oblique", QVariant(value)); }

inline qlonglong MxDrawText::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawText::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawText::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline double MxDrawText::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawText::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline QString MxDrawText::TextString() const
{
    QVariant qax_result = property("TextString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawText::SetTextString(const QString& value){ setProperty("TextString", QVariant(value)); }

inline QString MxDrawText::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawText::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawText::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawText::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawText::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawText::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double MxDrawText::WidthFactor() const
{
    QVariant qax_result = property("WidthFactor");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawText::SetWidthFactor(double value){ setProperty("WidthFactor", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawText::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawText::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawText::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::McHorizontalAlignment MxDrawText::horizontalMode() const
{
    QVariant qax_result = property("horizontalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McHorizontalAlignment*)qax_result.constData();
}
inline void MxDrawText::setHorizontalMode(MxDrawXLib::McHorizontalAlignment value){ setProperty("horizontalMode", QVariant(value)); }

inline MxDrawXLib::McVerticalAlignment MxDrawText::verticalMode() const
{
    QVariant qax_result = property("verticalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McVerticalAlignment*)qax_result.constData();
}
inline void MxDrawText::setVerticalMode(MxDrawXLib::McVerticalAlignment value){ setProperty("verticalMode", QVariant(value)); }

inline void MxDrawText::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawText::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawText::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawText::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawText::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawText::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawText::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawText::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawText::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawText::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawText::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawText::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawText::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double MxDrawText::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawText::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int MxDrawText::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawText::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString MxDrawText::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void MxDrawText::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawText::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawText::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void MxDrawText::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawText::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawText::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawText::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline void MxDrawText::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline bool MxDrawText::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline bool MxDrawText::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline bool MxDrawText::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawText::ToCurves()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline void MxDrawText::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}


inline MxDrawXLib::IMxDrawPoint* MxDrawAttributeDefinition::AlignmentPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("AlignmentPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("AlignmentPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawAttributeDefinition::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawAttributeDefinition::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int MxDrawAttributeDefinition::FieldLength() const
{
    QVariant qax_result = property("FieldLength");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetFieldLength(int value){ setProperty("FieldLength", QVariant(value)); }

inline bool MxDrawAttributeDefinition::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double MxDrawAttributeDefinition::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString MxDrawAttributeDefinition::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawAttributeDefinition::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawAttributeDefinition::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool MxDrawAttributeDefinition::IsConstant() const
{
    QVariant qax_result = property("IsConstant");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetIsConstant(bool value){ setProperty("IsConstant", QVariant(value)); }

inline bool MxDrawAttributeDefinition::IsInvisible() const
{
    QVariant qax_result = property("IsInvisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetIsInvisible(bool value){ setProperty("IsInvisible", QVariant(value)); }

inline bool MxDrawAttributeDefinition::IsMirroredInX() const
{
    QVariant qax_result = property("IsMirroredInX");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetIsMirroredInX(bool value){ setProperty("IsMirroredInX", QVariant(value)); }

inline bool MxDrawAttributeDefinition::IsMirroredInY() const
{
    QVariant qax_result = property("IsMirroredInY");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetIsMirroredInY(bool value){ setProperty("IsMirroredInY", QVariant(value)); }

inline bool MxDrawAttributeDefinition::IsPreset() const
{
    QVariant qax_result = property("IsPreset");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetIsPreset(bool value){ setProperty("IsPreset", QVariant(value)); }

inline bool MxDrawAttributeDefinition::IsVerifiable() const
{
    QVariant qax_result = property("IsVerifiable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetIsVerifiable(bool value){ setProperty("IsVerifiable", QVariant(value)); }

inline QString MxDrawAttributeDefinition::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawAttributeDefinition::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawAttributeDefinition::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawAttributeDefinition::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawAttributeDefinition::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawAttributeDefinition::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawAttributeDefinition::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawAttributeDefinition::Oblique() const
{
    QVariant qax_result = property("Oblique");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetOblique(double value){ setProperty("Oblique", QVariant(value)); }

inline qlonglong MxDrawAttributeDefinition::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawAttributeDefinition::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline QString MxDrawAttributeDefinition::Prompt() const
{
    QVariant qax_result = property("Prompt");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetPrompt(const QString& value){ setProperty("Prompt", QVariant(value)); }

inline double MxDrawAttributeDefinition::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline QString MxDrawAttributeDefinition::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline QString MxDrawAttributeDefinition::TextString() const
{
    QVariant qax_result = property("TextString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetTextString(const QString& value){ setProperty("TextString", QVariant(value)); }

inline QString MxDrawAttributeDefinition::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawAttributeDefinition::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawAttributeDefinition::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double MxDrawAttributeDefinition::WidthFactor() const
{
    QVariant qax_result = property("WidthFactor");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::SetWidthFactor(double value){ setProperty("WidthFactor", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawAttributeDefinition::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawAttributeDefinition::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::McHorizontalAlignment MxDrawAttributeDefinition::horizontalMode() const
{
    QVariant qax_result = property("horizontalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McHorizontalAlignment*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::setHorizontalMode(MxDrawXLib::McHorizontalAlignment value){ setProperty("horizontalMode", QVariant(value)); }

inline MxDrawXLib::McVerticalAlignment MxDrawAttributeDefinition::verticalMode() const
{
    QVariant qax_result = property("verticalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McVerticalAlignment*)qax_result.constData();
}
inline void MxDrawAttributeDefinition::setVerticalMode(MxDrawXLib::McVerticalAlignment value){ setProperty("verticalMode", QVariant(value)); }

inline void MxDrawAttributeDefinition::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawAttributeDefinition::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawAttributeDefinition::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawAttributeDefinition::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawAttributeDefinition::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawAttributeDefinition::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawAttributeDefinition::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawAttributeDefinition::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawAttributeDefinition::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawAttributeDefinition::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawAttributeDefinition::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawAttributeDefinition::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawAttributeDefinition::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double MxDrawAttributeDefinition::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawAttributeDefinition::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int MxDrawAttributeDefinition::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawAttributeDefinition::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString MxDrawAttributeDefinition::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void MxDrawAttributeDefinition::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawAttributeDefinition::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawAttributeDefinition::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void MxDrawAttributeDefinition::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawAttributeDefinition::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawAttributeDefinition::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawAttributeDefinition::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline void MxDrawAttributeDefinition::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool MxDrawAttributeDefinition::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool MxDrawAttributeDefinition::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline bool MxDrawAttributeDefinition::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawAttributeDefinition::ToCurves()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline void MxDrawAttributeDefinition::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}


inline MxDrawXLib::IMxDrawPoint* MxDrawAttribute::AlignmentPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("AlignmentPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawAttribute::SetAlignmentPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("AlignmentPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawAttribute::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawAttribute::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int MxDrawAttribute::FieldLength() const
{
    QVariant qax_result = property("FieldLength");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawAttribute::SetFieldLength(int value){ setProperty("FieldLength", QVariant(value)); }

inline bool MxDrawAttribute::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double MxDrawAttribute::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawAttribute::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString MxDrawAttribute::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttribute::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawAttribute::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawAttribute::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool MxDrawAttribute::IsConstant() const
{
    QVariant qax_result = property("IsConstant");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool MxDrawAttribute::IsInvisible() const
{
    QVariant qax_result = property("IsInvisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawAttribute::SetIsInvisible(bool value){ setProperty("IsInvisible", QVariant(value)); }

inline bool MxDrawAttribute::IsMirroredInX() const
{
    QVariant qax_result = property("IsMirroredInX");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawAttribute::SetIsMirroredInX(bool value){ setProperty("IsMirroredInX", QVariant(value)); }

inline bool MxDrawAttribute::IsMirroredInY() const
{
    QVariant qax_result = property("IsMirroredInY");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawAttribute::SetIsMirroredInY(bool value){ setProperty("IsMirroredInY", QVariant(value)); }

inline bool MxDrawAttribute::IsPreset() const
{
    QVariant qax_result = property("IsPreset");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool MxDrawAttribute::IsVerifiable() const
{
    QVariant qax_result = property("IsVerifiable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawAttribute::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttribute::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawAttribute::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttribute::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawAttribute::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawAttribute::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawAttribute::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawAttribute::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawAttribute::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawAttribute::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawAttribute::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawAttribute::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawAttribute::Oblique() const
{
    QVariant qax_result = property("Oblique");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawAttribute::SetOblique(double value){ setProperty("Oblique", QVariant(value)); }

inline qlonglong MxDrawAttribute::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawAttribute::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawAttribute::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline double MxDrawAttribute::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawAttribute::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline QString MxDrawAttribute::Tag() const
{
    QVariant qax_result = property("Tag");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttribute::SetTag(const QString& value){ setProperty("Tag", QVariant(value)); }

inline QString MxDrawAttribute::TextString() const
{
    QVariant qax_result = property("TextString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttribute::SetTextString(const QString& value){ setProperty("TextString", QVariant(value)); }

inline QString MxDrawAttribute::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawAttribute::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawAttribute::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawAttribute::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawAttribute::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawAttribute::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double MxDrawAttribute::WidthFactor() const
{
    QVariant qax_result = property("WidthFactor");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawAttribute::SetWidthFactor(double value){ setProperty("WidthFactor", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawAttribute::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawAttribute::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawAttribute::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::McHorizontalAlignment MxDrawAttribute::horizontalMode() const
{
    QVariant qax_result = property("horizontalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McHorizontalAlignment*)qax_result.constData();
}
inline void MxDrawAttribute::setHorizontalMode(MxDrawXLib::McHorizontalAlignment value){ setProperty("horizontalMode", QVariant(value)); }

inline MxDrawXLib::McVerticalAlignment MxDrawAttribute::verticalMode() const
{
    QVariant qax_result = property("verticalMode");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McVerticalAlignment*)qax_result.constData();
}
inline void MxDrawAttribute::setVerticalMode(MxDrawXLib::McVerticalAlignment value){ setProperty("verticalMode", QVariant(value)); }

inline void MxDrawAttribute::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawAttribute::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawAttribute::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawAttribute::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawAttribute::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawAttribute::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawAttribute::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawAttribute::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawAttribute::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawAttribute::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawAttribute::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawAttribute::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawAttribute::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double MxDrawAttribute::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawAttribute::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int MxDrawAttribute::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawAttribute::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString MxDrawAttribute::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void MxDrawAttribute::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawAttribute::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawAttribute::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void MxDrawAttribute::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawAttribute::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawAttribute::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawAttribute::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline void MxDrawAttribute::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline bool MxDrawAttribute::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool MxDrawAttribute::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline bool MxDrawAttribute::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawAttribute::ToCurves()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline void MxDrawAttribute::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}


inline MxDrawXLib::IMxDrawPoint* MxDrawCircle::Center() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Center");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawCircle::SetCenter(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Center", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawCircle::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawCircle::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawCircle::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawCircle::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCircle::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawCircle::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawCircle::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawCircle::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCircle::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawCircle::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCircle::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawCircle::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawCircle::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawCircle::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawCircle::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawCircle::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawCircle::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawCircle::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawCircle::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawCircle::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double MxDrawCircle::Radius() const
{
    QVariant qax_result = property("Radius");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawCircle::SetRadius(double value){ setProperty("Radius", QVariant(value)); }

inline QString MxDrawCircle::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCircle::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawCircle::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawCircle::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawCircle::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawCircle::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawCircle::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawCircle::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawCircle::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawCircle::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawCircle::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawCircle::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawCircle::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawCircle::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawCircle::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCircle::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double MxDrawCircle::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawCircle::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawCircle::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCircle::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double MxDrawCircle::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double MxDrawCircle::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawCircle::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCircle::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawCircle::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawCircle::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawCircle::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double MxDrawCircle::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double MxDrawCircle::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double MxDrawCircle::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCircle::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCircle::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCircle::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* MxDrawCircle::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawCircle::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double MxDrawCircle::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCircle::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCircle::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double MxDrawCircle::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int MxDrawCircle::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool MxDrawCircle::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString MxDrawCircle::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void MxDrawCircle::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawCircle::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool MxDrawCircle::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void MxDrawCircle::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void MxDrawCircle::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool MxDrawCircle::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCircle::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void MxDrawCircle::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void MxDrawCircle::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool MxDrawCircle::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void MxDrawCircle::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline bool MxDrawCircle::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool MxDrawCircle::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool MxDrawCircle::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline bool MxDrawCircle::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCircle::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline void MxDrawCircle::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawDimension::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong MxDrawDimension::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void MxDrawDimension::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimension::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimension::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double MxDrawDimension::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimension::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double MxDrawDimension::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimension::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline QString MxDrawDimension::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimension::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString MxDrawDimension::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimension::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString MxDrawDimension::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawDimension::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimension::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool MxDrawDimension::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double MxDrawDimension::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimension::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString MxDrawDimension::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimension::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawDimension::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDimension::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimension::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimension::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawDimension::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimension::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawDimension::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimension::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawDimension::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawDimension::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawDimension::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawDimension::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawDimension::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimension::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawDimension::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint MxDrawDimension::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void MxDrawDimension::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimension::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimension::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double MxDrawDimension::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimension::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString MxDrawDimension::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimension::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawDimension::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawDimension::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawDimension::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimension::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool MxDrawDimension::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimension::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawDimension::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawDimension::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawDimension::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawDimension::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDimension::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawDimension::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawDimension::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawDimension::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawDimension::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimension::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawDimension::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimension::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double MxDrawDimension::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int MxDrawDimension::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong MxDrawDimension::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString MxDrawDimension::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDimension::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimension::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimension::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawDimension::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawDimension::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawDimension::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int MxDrawDimension::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawDimension::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString MxDrawDimension::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void MxDrawDimension::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimension::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void MxDrawDimension::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawDimension::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void MxDrawDimension::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void MxDrawDimension::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void MxDrawDimension::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void MxDrawDimension::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void MxDrawDimension::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void MxDrawDimension::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void MxDrawDimension::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline bool MxDrawDimension::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline void MxDrawDimension::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline bool MxDrawDimension::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline bool MxDrawDimension::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline bool MxDrawDimension::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline void MxDrawDimension::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawDimAligned::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong MxDrawDimAligned::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void MxDrawDimAligned::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimAligned::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAligned::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double MxDrawDimAligned::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAligned::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double MxDrawDimAligned::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAligned::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimAligned::DimLinePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimLinePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAligned::SetDimLinePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimLinePoint", QVariant(typeId, &value));
}

inline QString MxDrawDimAligned::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAligned::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString MxDrawDimAligned::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAligned::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString MxDrawDimAligned::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawDimAligned::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAligned::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool MxDrawDimAligned::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double MxDrawDimAligned::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAligned::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString MxDrawDimAligned::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAligned::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawDimAligned::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDimAligned::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimAligned::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAligned::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawDimAligned::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAligned::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawDimAligned::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAligned::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawDimAligned::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawDimAligned::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawDimAligned::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawDimAligned::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawDimAligned::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimAligned::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawDimAligned::Oblique() const
{
    QVariant qax_result = property("Oblique");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAligned::SetOblique(double value){ setProperty("Oblique", QVariant(value)); }

inline qlonglong MxDrawDimAligned::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint MxDrawDimAligned::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void MxDrawDimAligned::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimAligned::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAligned::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double MxDrawDimAligned::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAligned::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString MxDrawDimAligned::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAligned::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawDimAligned::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawDimAligned::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawDimAligned::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimAligned::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool MxDrawDimAligned::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimAligned::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimAligned::XLine1Point() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine1Point");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAligned::SetXLine1Point(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine1Point", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* MxDrawDimAligned::XLine2Point() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine2Point");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAligned::SetXLine2Point(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine2Point", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor MxDrawDimAligned::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawDimAligned::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawDimAligned::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawDimAligned::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDimAligned::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawDimAligned::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawDimAligned::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawDimAligned::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawDimAligned::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimAligned::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawDimAligned::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimAligned::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double MxDrawDimAligned::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int MxDrawDimAligned::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong MxDrawDimAligned::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString MxDrawDimAligned::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDimAligned::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimAligned::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimAligned::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawDimAligned::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawDimAligned::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawDimAligned::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int MxDrawDimAligned::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawDimAligned::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString MxDrawDimAligned::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void MxDrawDimAligned::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimAligned::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void MxDrawDimAligned::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawDimAligned::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void MxDrawDimAligned::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void MxDrawDimAligned::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void MxDrawDimAligned::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void MxDrawDimAligned::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void MxDrawDimAligned::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void MxDrawDimAligned::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void MxDrawDimAligned::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool MxDrawDimAligned::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline void MxDrawDimAligned::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline bool MxDrawDimAligned::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline bool MxDrawDimAligned::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool MxDrawDimAligned::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void MxDrawDimAligned::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}


inline MxDrawXLib::IMxDrawPoint* MxDrawDimAngular::ArcPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("ArcPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAngular::SetArcPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("ArcPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawDimAngular::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong MxDrawDimAngular::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void MxDrawDimAngular::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimAngular::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAngular::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double MxDrawDimAngular::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAngular::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double MxDrawDimAngular::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAngular::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline QString MxDrawDimAngular::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAngular::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString MxDrawDimAngular::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAngular::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString MxDrawDimAngular::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawDimAngular::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAngular::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool MxDrawDimAngular::ExtArcOn() const
{
    QVariant qax_result = property("ExtArcOn");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimAngular::SetExtArcOn(bool value){ setProperty("ExtArcOn", QVariant(value)); }

inline bool MxDrawDimAngular::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double MxDrawDimAngular::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAngular::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString MxDrawDimAngular::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAngular::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawDimAngular::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDimAngular::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimAngular::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAngular::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawDimAngular::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAngular::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawDimAngular::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAngular::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawDimAngular::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawDimAngular::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawDimAngular::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawDimAngular::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawDimAngular::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimAngular::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawDimAngular::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint MxDrawDimAngular::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void MxDrawDimAngular::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimAngular::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAngular::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double MxDrawDimAngular::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimAngular::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString MxDrawDimAngular::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimAngular::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawDimAngular::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawDimAngular::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawDimAngular::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimAngular::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool MxDrawDimAngular::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimAngular::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimAngular::XLine1End() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine1End");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAngular::SetXLine1End(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine1End", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* MxDrawDimAngular::XLine1Start() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine1Start");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAngular::SetXLine1Start(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine1Start", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* MxDrawDimAngular::XLine2End() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine2End");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAngular::SetXLine2End(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine2End", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* MxDrawDimAngular::XLine2Start() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine2Start");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimAngular::SetXLine2Start(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine2Start", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor MxDrawDimAngular::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawDimAngular::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawDimAngular::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawDimAngular::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDimAngular::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawDimAngular::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawDimAngular::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawDimAngular::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawDimAngular::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimAngular::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawDimAngular::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimAngular::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double MxDrawDimAngular::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int MxDrawDimAngular::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong MxDrawDimAngular::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString MxDrawDimAngular::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDimAngular::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimAngular::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimAngular::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawDimAngular::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawDimAngular::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawDimAngular::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int MxDrawDimAngular::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawDimAngular::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString MxDrawDimAngular::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void MxDrawDimAngular::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimAngular::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void MxDrawDimAngular::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawDimAngular::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void MxDrawDimAngular::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void MxDrawDimAngular::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void MxDrawDimAngular::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void MxDrawDimAngular::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void MxDrawDimAngular::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void MxDrawDimAngular::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void MxDrawDimAngular::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool MxDrawDimAngular::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline void MxDrawDimAngular::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline bool MxDrawDimAngular::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool MxDrawDimAngular::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline bool MxDrawDimAngular::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline void MxDrawDimAngular::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}


inline MxDrawXLib::IMxDrawPoint* MxDrawDimDiametric::ChordPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("ChordPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimDiametric::SetChordPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("ChordPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawDimDiametric::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong MxDrawDimDiametric::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimDiametric::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimDiametric::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double MxDrawDimDiametric::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double MxDrawDimDiametric::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline QString MxDrawDimDiametric::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString MxDrawDimDiametric::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString MxDrawDimDiametric::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawDimDiametric::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline double MxDrawDimDiametric::ExtArcEndAngle() const
{
    QVariant qax_result = property("ExtArcEndAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetExtArcEndAngle(double value){ setProperty("ExtArcEndAngle", QVariant(value)); }

inline double MxDrawDimDiametric::ExtArcStartAngle() const
{
    QVariant qax_result = property("ExtArcStartAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetExtArcStartAngle(double value){ setProperty("ExtArcStartAngle", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimDiametric::FarChordPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("FarChordPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimDiametric::SetFarChordPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("FarChordPoint", QVariant(typeId, &value));
}

inline bool MxDrawDimDiametric::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double MxDrawDimDiametric::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString MxDrawDimDiametric::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawDimDiametric::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDimDiametric::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimDiametric::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline double MxDrawDimDiametric::LeaderLength() const
{
    QVariant qax_result = property("LeaderLength");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetLeaderLength(double value){ setProperty("LeaderLength", QVariant(value)); }

inline QString MxDrawDimDiametric::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawDimDiametric::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawDimDiametric::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawDimDiametric::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawDimDiametric::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawDimDiametric::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimDiametric::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawDimDiametric::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint MxDrawDimDiametric::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimDiametric::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimDiametric::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double MxDrawDimDiametric::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString MxDrawDimDiametric::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawDimDiametric::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawDimDiametric::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawDimDiametric::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool MxDrawDimDiametric::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimDiametric::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawDimDiametric::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawDimDiametric::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawDimDiametric::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawDimDiametric::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDimDiametric::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawDimDiametric::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawDimDiametric::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawDimDiametric::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawDimDiametric::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimDiametric::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawDimDiametric::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimDiametric::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double MxDrawDimDiametric::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int MxDrawDimDiametric::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong MxDrawDimDiametric::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString MxDrawDimDiametric::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDimDiametric::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimDiametric::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimDiametric::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawDimDiametric::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawDimDiametric::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawDimDiametric::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int MxDrawDimDiametric::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawDimDiametric::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString MxDrawDimDiametric::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void MxDrawDimDiametric::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimDiametric::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void MxDrawDimDiametric::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawDimDiametric::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void MxDrawDimDiametric::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void MxDrawDimDiametric::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void MxDrawDimDiametric::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void MxDrawDimDiametric::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void MxDrawDimDiametric::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void MxDrawDimDiametric::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void MxDrawDimDiametric::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool MxDrawDimDiametric::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void MxDrawDimDiametric::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline bool MxDrawDimDiametric::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool MxDrawDimDiametric::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool MxDrawDimDiametric::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline void MxDrawDimDiametric::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawDimRotated::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong MxDrawDimRotated::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void MxDrawDimRotated::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimRotated::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimRotated::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double MxDrawDimRotated::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRotated::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double MxDrawDimRotated::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRotated::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimRotated::DimLinePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimLinePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimRotated::SetDimLinePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimLinePoint", QVariant(typeId, &value));
}

inline QString MxDrawDimRotated::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRotated::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString MxDrawDimRotated::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRotated::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString MxDrawDimRotated::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawDimRotated::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRotated::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool MxDrawDimRotated::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double MxDrawDimRotated::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRotated::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString MxDrawDimRotated::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRotated::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawDimRotated::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDimRotated::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimRotated::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRotated::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawDimRotated::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRotated::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawDimRotated::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRotated::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawDimRotated::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawDimRotated::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawDimRotated::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawDimRotated::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawDimRotated::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimRotated::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawDimRotated::Oblique() const
{
    QVariant qax_result = property("Oblique");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRotated::SetOblique(double value){ setProperty("Oblique", QVariant(value)); }

inline qlonglong MxDrawDimRotated::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double MxDrawDimRotated::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRotated::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline MxDrawXLib::McAttachmentPoint MxDrawDimRotated::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void MxDrawDimRotated::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimRotated::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimRotated::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double MxDrawDimRotated::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRotated::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString MxDrawDimRotated::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRotated::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawDimRotated::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawDimRotated::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawDimRotated::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimRotated::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool MxDrawDimRotated::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimRotated::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimRotated::XLine1Point() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine1Point");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimRotated::SetXLine1Point(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine1Point", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* MxDrawDimRotated::XLine2Point() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("XLine2Point");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimRotated::SetXLine2Point(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("XLine2Point", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor MxDrawDimRotated::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawDimRotated::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawDimRotated::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawDimRotated::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDimRotated::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawDimRotated::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawDimRotated::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawDimRotated::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawDimRotated::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimRotated::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawDimRotated::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimRotated::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double MxDrawDimRotated::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int MxDrawDimRotated::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong MxDrawDimRotated::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString MxDrawDimRotated::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDimRotated::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimRotated::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimRotated::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawDimRotated::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawDimRotated::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawDimRotated::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int MxDrawDimRotated::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawDimRotated::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString MxDrawDimRotated::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void MxDrawDimRotated::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimRotated::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void MxDrawDimRotated::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawDimRotated::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void MxDrawDimRotated::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void MxDrawDimRotated::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void MxDrawDimRotated::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void MxDrawDimRotated::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void MxDrawDimRotated::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void MxDrawDimRotated::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void MxDrawDimRotated::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool MxDrawDimRotated::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline void MxDrawDimRotated::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline bool MxDrawDimRotated::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool MxDrawDimRotated::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool MxDrawDimRotated::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline void MxDrawDimRotated::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawDimOrdinate::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawDimOrdinate::DefiningPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DefiningPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetDefiningPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DefiningPoint", QVariant(typeId, &value));
}

inline qlonglong MxDrawDimOrdinate::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimOrdinate::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double MxDrawDimOrdinate::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double MxDrawDimOrdinate::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline QString MxDrawDimOrdinate::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString MxDrawDimOrdinate::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString MxDrawDimOrdinate::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawDimOrdinate::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline bool MxDrawDimOrdinate::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double MxDrawDimOrdinate::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString MxDrawDimOrdinate::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawDimOrdinate::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDimOrdinate::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool MxDrawDimOrdinate::IsUsingXAxis() const
{
    QVariant qax_result = property("IsUsingXAxis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetIsUsingXAxis(bool value){ setProperty("IsUsingXAxis", QVariant(value)); }

inline bool MxDrawDimOrdinate::IsUsingYAxis() const
{
    QVariant qax_result = property("IsUsingYAxis");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetIsUsingYAxis(bool value){ setProperty("IsUsingYAxis", QVariant(value)); }

inline QString MxDrawDimOrdinate::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimOrdinate::LeaderEndPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("LeaderEndPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetLeaderEndPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("LeaderEndPoint", QVariant(typeId, &value));
}

inline QString MxDrawDimOrdinate::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawDimOrdinate::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawDimOrdinate::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawDimOrdinate::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawDimOrdinate::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimOrdinate::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawDimOrdinate::Origin() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Origin");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetOrigin(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Origin", QVariant(typeId, &value));
}

inline qlonglong MxDrawDimOrdinate::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint MxDrawDimOrdinate::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimOrdinate::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double MxDrawDimOrdinate::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString MxDrawDimOrdinate::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawDimOrdinate::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawDimOrdinate::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool MxDrawDimOrdinate::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimOrdinate::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawDimOrdinate::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawDimOrdinate::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawDimOrdinate::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawDimOrdinate::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDimOrdinate::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawDimOrdinate::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawDimOrdinate::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawDimOrdinate::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawDimOrdinate::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimOrdinate::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawDimOrdinate::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimOrdinate::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double MxDrawDimOrdinate::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int MxDrawDimOrdinate::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong MxDrawDimOrdinate::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString MxDrawDimOrdinate::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDimOrdinate::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimOrdinate::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimOrdinate::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawDimOrdinate::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawDimOrdinate::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawDimOrdinate::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int MxDrawDimOrdinate::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawDimOrdinate::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString MxDrawDimOrdinate::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void MxDrawDimOrdinate::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimOrdinate::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void MxDrawDimOrdinate::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawDimOrdinate::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void MxDrawDimOrdinate::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void MxDrawDimOrdinate::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void MxDrawDimOrdinate::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void MxDrawDimOrdinate::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void MxDrawDimOrdinate::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void MxDrawDimOrdinate::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void MxDrawDimOrdinate::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool MxDrawDimOrdinate::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void MxDrawDimOrdinate::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline bool MxDrawDimOrdinate::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool MxDrawDimOrdinate::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool MxDrawDimOrdinate::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline void MxDrawDimOrdinate::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}


inline MxDrawXLib::IMxDrawPoint* MxDrawDimRadial::Center() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Center");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimRadial::SetCenter(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Center", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawPoint* MxDrawDimRadial::ChordPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("ChordPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimRadial::SetChordPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("ChordPoint", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawDimRadial::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline qlonglong MxDrawDimRadial::DimBlockId() const
{
    QVariant qax_result = property("DimBlockId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void MxDrawDimRadial::SetDimBlockId(qlonglong value){ setProperty("DimBlockId", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimRadial::DimBlockPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DimBlockPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimRadial::SetDimBlockPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DimBlockPosition", QVariant(typeId, &value));
}

inline double MxDrawDimRadial::DimBlockRotation() const
{
    QVariant qax_result = property("DimBlockRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRadial::SetDimBlockRotation(double value){ setProperty("DimBlockRotation", QVariant(value)); }

inline double MxDrawDimRadial::DimBlockScale() const
{
    QVariant qax_result = property("DimBlockScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRadial::SetDimBlockScale(double value){ setProperty("DimBlockScale", QVariant(value)); }

inline QString MxDrawDimRadial::DimensionStyle() const
{
    QVariant qax_result = property("DimensionStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRadial::SetDimensionStyle(const QString& value){ setProperty("DimensionStyle", QVariant(value)); }

inline QString MxDrawDimRadial::DimensionText() const
{
    QVariant qax_result = property("DimensionText");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRadial::SetDimensionText(const QString& value){ setProperty("DimensionText", QVariant(value)); }

inline QString MxDrawDimRadial::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawDimRadial::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRadial::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline double MxDrawDimRadial::ExtArcEndAngle() const
{
    QVariant qax_result = property("ExtArcEndAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRadial::SetExtArcEndAngle(double value){ setProperty("ExtArcEndAngle", QVariant(value)); }

inline double MxDrawDimRadial::ExtArcStartAngle() const
{
    QVariant qax_result = property("ExtArcStartAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRadial::SetExtArcStartAngle(double value){ setProperty("ExtArcStartAngle", QVariant(value)); }

inline bool MxDrawDimRadial::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double MxDrawDimRadial::HorizontalRotation() const
{
    QVariant qax_result = property("HorizontalRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRadial::SetHorizontalRotation(double value){ setProperty("HorizontalRotation", QVariant(value)); }

inline QString MxDrawDimRadial::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRadial::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawDimRadial::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDimRadial::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimRadial::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRadial::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline double MxDrawDimRadial::LeaderLength() const
{
    QVariant qax_result = property("LeaderLength");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRadial::SetLeaderLength(double value){ setProperty("LeaderLength", QVariant(value)); }

inline QString MxDrawDimRadial::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRadial::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawDimRadial::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRadial::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawDimRadial::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawDimRadial::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawDimRadial::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawDimRadial::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawDimRadial::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimRadial::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawDimRadial::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::McAttachmentPoint MxDrawDimRadial::TextAttachment() const
{
    QVariant qax_result = property("TextAttachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void MxDrawDimRadial::SetTextAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("TextAttachment", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawDimRadial::TextPosition() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("TextPosition");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawDimRadial::SetTextPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("TextPosition", QVariant(typeId, &value));
}

inline double MxDrawDimRadial::TextRotation() const
{
    QVariant qax_result = property("TextRotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawDimRadial::SetTextRotation(double value){ setProperty("TextRotation", QVariant(value)); }

inline QString MxDrawDimRadial::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimRadial::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawDimRadial::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawDimRadial::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawDimRadial::UsingDefaultTextPosition() const
{
    QVariant qax_result = property("UsingDefaultTextPosition");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimRadial::SetUsingDefaultTextPosition(bool value){ setProperty("UsingDefaultTextPosition", QVariant(value)); }

inline bool MxDrawDimRadial::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawDimRadial::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawDimRadial::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawDimRadial::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawDimRadial::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawDimRadial::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDimRadial::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawDimRadial::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawDimRadial::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawDimRadial::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawDimRadial::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimRadial::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawDimRadial::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimRadial::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double MxDrawDimRadial::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int MxDrawDimRadial::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline qlonglong MxDrawDimRadial::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString MxDrawDimRadial::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDimRadial::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimRadial::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimRadial::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawDimRadial::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawDimRadial::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawDimRadial::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int MxDrawDimRadial::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawDimRadial::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString MxDrawDimRadial::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void MxDrawDimRadial::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawDimRadial::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void MxDrawDimRadial::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawDimRadial::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void MxDrawDimRadial::RecomputeDimBlock(bool forceUpdate)
{
    void *_a[] = {0, (void*)&forceUpdate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void MxDrawDimRadial::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void MxDrawDimRadial::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void MxDrawDimRadial::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void MxDrawDimRadial::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void MxDrawDimRadial::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void MxDrawDimRadial::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool MxDrawDimRadial::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void MxDrawDimRadial::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline bool MxDrawDimRadial::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool MxDrawDimRadial::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool MxDrawDimRadial::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline void MxDrawDimRadial::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}


inline MxDrawXLib::IMxDrawPoint* MxDrawEllipse::Center() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Center");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawEllipse::SetCenter(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Center", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawEllipse::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawEllipse::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawEllipse::EndAngle() const
{
    QVariant qax_result = property("EndAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawEllipse::SetEndAngle(double value){ setProperty("EndAngle", QVariant(value)); }

inline bool MxDrawEllipse::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawEllipse::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEllipse::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawEllipse::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawEllipse::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawEllipse::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEllipse::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawEllipse::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEllipse::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawEllipse::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawEllipse::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawEllipse::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawEllipse::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawEllipse::MajorAxis() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("MajorAxis");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawEllipse::SetMajorAxis(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("MajorAxis", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawEllipse::MinorAxis() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("MinorAxis");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawEllipse::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawEllipse::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawEllipse::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawEllipse::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawEllipse::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double MxDrawEllipse::RadiusRatio() const
{
    QVariant qax_result = property("RadiusRatio");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawEllipse::SetRadiusRatio(double value){ setProperty("RadiusRatio", QVariant(value)); }

inline double MxDrawEllipse::StartAngle() const
{
    QVariant qax_result = property("StartAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawEllipse::SetStartAngle(double value){ setProperty("StartAngle", QVariant(value)); }

inline QString MxDrawEllipse::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEllipse::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawEllipse::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawEllipse::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawEllipse::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawEllipse::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawEllipse::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawEllipse::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawEllipse::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawEllipse::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawEllipse::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawEllipse::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawEllipse::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawEllipse::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawEllipse::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawEllipse::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double MxDrawEllipse::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawEllipse::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawEllipse::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawEllipse::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double MxDrawEllipse::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double MxDrawEllipse::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawEllipse::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawEllipse::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawEllipse::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawEllipse::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawEllipse::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double MxDrawEllipse::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double MxDrawEllipse::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double MxDrawEllipse::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawEllipse::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawEllipse::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawEllipse::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* MxDrawEllipse::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawEllipse::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double MxDrawEllipse::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawEllipse::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawEllipse::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double MxDrawEllipse::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int MxDrawEllipse::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool MxDrawEllipse::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString MxDrawEllipse::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void MxDrawEllipse::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawEllipse::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool MxDrawEllipse::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void MxDrawEllipse::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void MxDrawEllipse::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool MxDrawEllipse::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawEllipse::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void MxDrawEllipse::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void MxDrawEllipse::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool MxDrawEllipse::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline void MxDrawEllipse::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline bool MxDrawEllipse::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline bool MxDrawEllipse::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline bool MxDrawEllipse::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline bool MxDrawEllipse::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawEllipse::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
    return qax_result;
}

inline void MxDrawEllipse::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}


inline MxDrawXLib::McAttachmentPoint MxDrawMText::Attachment() const
{
    QVariant qax_result = property("Attachment");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McAttachmentPoint*)qax_result.constData();
}
inline void MxDrawMText::SetAttachment(MxDrawXLib::McAttachmentPoint value){ setProperty("Attachment", QVariant(value)); }

inline QString MxDrawMText::Contents() const
{
    QVariant qax_result = property("Contents");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawMText::SetContents(const QString& value){ setProperty("Contents", QVariant(value)); }

inline MxDrawXLib::IMxDrawDatabase* MxDrawMText::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawMText::Direction() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Direction");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawMText::SetDirection(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Direction", QVariant(typeId, &value));
}

inline QString MxDrawMText::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::McDrawingDirection MxDrawMText::FlowDirection() const
{
    QVariant qax_result = property("FlowDirection");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McDrawingDirection*)qax_result.constData();
}
inline void MxDrawMText::SetFlowDirection(MxDrawXLib::McDrawingDirection value){ setProperty("FlowDirection", QVariant(value)); }

inline bool MxDrawMText::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawMText::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawMText::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawMText::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawMText::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawMText::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawMText::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline double MxDrawMText::LineSpacingFactor() const
{
    QVariant qax_result = property("LineSpacingFactor");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawMText::SetLineSpacingFactor(double value){ setProperty("LineSpacingFactor", QVariant(value)); }

inline QString MxDrawMText::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawMText::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawMText::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawMText::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawMText::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawMText::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawMText::Location() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Location");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawMText::SetLocation(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Location", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawMText::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawMText::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawMText::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawMText::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawMText::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double MxDrawMText::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawMText::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline double MxDrawMText::TextHeight() const
{
    QVariant qax_result = property("TextHeight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawMText::SetTextHeight(double value){ setProperty("TextHeight", QVariant(value)); }

inline QString MxDrawMText::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawMText::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawMText::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawMText::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawMText::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawMText::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double MxDrawMText::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawMText::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawMText::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawMText::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawMText::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawMText::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawMText::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawMText::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawMText::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawMText::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawMText::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawMText::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawMText::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawMText::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawMText::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawMText::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawMText::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawMText::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double MxDrawMText::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawMText::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int MxDrawMText::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawMText::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString MxDrawMText::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void MxDrawMText::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawMText::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawMText::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void MxDrawMText::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawMText::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawMText::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawMText::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline void MxDrawMText::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline bool MxDrawMText::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline bool MxDrawMText::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline bool MxDrawMText::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawMText::ToCurves()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline void MxDrawMText::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawPointEntity::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawPointEntity::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawPointEntity::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawPointEntity::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPointEntity::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawPointEntity::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawPointEntity::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawPointEntity::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPointEntity::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawPointEntity::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPointEntity::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawPointEntity::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPointEntity::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawPointEntity::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawPointEntity::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawPointEntity::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawPointEntity::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawPointEntity::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawPointEntity::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawPointEntity::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawPointEntity::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawPointEntity::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline QString MxDrawPointEntity::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPointEntity::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawPointEntity::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawPointEntity::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawPointEntity::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawPointEntity::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawPointEntity::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawPointEntity::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawPointEntity::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawPointEntity::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawPointEntity::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawPointEntity::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawPointEntity::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawPointEntity::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawPointEntity::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawPointEntity::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawPointEntity::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawPointEntity::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawPointEntity::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawPointEntity::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawPointEntity::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawPointEntity::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double MxDrawPointEntity::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawPointEntity::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int MxDrawPointEntity::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawPointEntity::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString MxDrawPointEntity::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void MxDrawPointEntity::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawPointEntity::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawPointEntity::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void MxDrawPointEntity::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawPointEntity::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawPointEntity::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawPointEntity::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline void MxDrawPointEntity::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline bool MxDrawPointEntity::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool MxDrawPointEntity::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool MxDrawPointEntity::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline void MxDrawPointEntity::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawRay::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawRay::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawRay::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawRay::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawRay::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawRay::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawRay::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawRay::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawRay::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawRay::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawRay::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawRay::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawRay::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawRay::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawRay::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawRay::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawRay::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawRay::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawRay::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawRay::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawRay::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawRay::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawRay::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawRay::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawRay::UnitDir() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("UnitDir");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawRay::SetUnitDir(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("UnitDir", QVariant(typeId, &value));
}

inline bool MxDrawRay::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawRay::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawRay::basePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawRay::setBasePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePoint", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor MxDrawRay::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawRay::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawRay::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawRay::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawRay::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawRay::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawRay::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawRay::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawRay::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawRay::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawRay::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double MxDrawRay::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawRay::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawRay::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool MxDrawRay::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawRay::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool MxDrawRay::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double MxDrawRay::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool MxDrawRay::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double MxDrawRay::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawRay::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawRay::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawRay::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawRay::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawRay::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawRay::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool MxDrawRay::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double MxDrawRay::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool MxDrawRay::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double MxDrawRay::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool MxDrawRay::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double MxDrawRay::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool MxDrawRay::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawRay::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool MxDrawRay::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawRay::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawRay::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* MxDrawRay::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool MxDrawRay::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawRay::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double MxDrawRay::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawRay::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawRay::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool MxDrawRay::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double MxDrawRay::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool MxDrawRay::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int MxDrawRay::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool MxDrawRay::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString MxDrawRay::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void MxDrawRay::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawRay::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool MxDrawRay::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void MxDrawRay::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void MxDrawRay::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool MxDrawRay::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawRay::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void MxDrawRay::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void MxDrawRay::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool MxDrawRay::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline void MxDrawRay::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline bool MxDrawRay::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool MxDrawRay::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool MxDrawRay::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool MxDrawRay::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawRay::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline void MxDrawRay::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawSolid::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawSolid::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawSolid::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawSolid::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawSolid::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawSolid::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawSolid::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawSolid::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawSolid::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawSolid::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawSolid::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawSolid::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawSolid::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawSolid::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawSolid::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawSolid::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawSolid::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawSolid::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawSolid::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawSolid::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawSolid::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawSolid::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawSolid::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawSolid::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawSolid::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawSolid::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawSolid::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawSolid::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawSolid::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawSolid::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawSolid::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawSolid::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawSolid::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawSolid::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawSolid::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSolid::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawSolid::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawSolid::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawSolid::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawSolid::GetPointAt(int index)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSolid::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSolid::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool MxDrawSolid::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double MxDrawSolid::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool MxDrawSolid::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline int MxDrawSolid::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool MxDrawSolid::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QString MxDrawSolid::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void MxDrawSolid::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawSolid::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void MxDrawSolid::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawSolid::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawSolid::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void MxDrawSolid::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawSolid::SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&index, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline bool MxDrawSolid::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void MxDrawSolid::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline bool MxDrawSolid::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool MxDrawSolid::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline bool MxDrawSolid::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void MxDrawSolid::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawSpline::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawSpline::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawSpline::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawSpline::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawSpline::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawSpline::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawSpline::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawSpline::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawSpline::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawSpline::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawSpline::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawSpline::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawSpline::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawSpline::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawSpline::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawSpline::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawSpline::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawSpline::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawSpline::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawSpline::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawSpline::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawSpline::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawSpline::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawSpline::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawSpline::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawSpline::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawSpline::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawSpline::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawSpline::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawSpline::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawSpline::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawSpline::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawSpline::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawSpline::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawSpline::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSpline::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double MxDrawSpline::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawSpline::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawSpline::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawSpline::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* MxDrawSpline::GetControlPoints()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline double MxDrawSpline::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawSpline::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline double MxDrawSpline::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawSpline::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawSpline::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawSpline::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawSpline::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void MxDrawSpline::GetFitData(MxDrawXLib::IMxDrawPoints** pPoints, int& degree, double& fitTolerance, bool& tangentsExist, MxDrawXLib::IMxDrawVector3d** startTangent, MxDrawXLib::IMxDrawVector3d** endTangent)
{
    void *_a[] = {0, (void*)&pPoints, (void*)&degree, (void*)&fitTolerance, (void*)&tangentsExist, (void*)&startTangent, (void*)&endTangent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSpline::GetFitParam()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* MxDrawSpline::GetFitPoints()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSpline::GetKnots()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline double MxDrawSpline::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline void MxDrawSpline::GetNurbsData(int& degree, bool& rational, bool& closed, bool& periodic, MxDrawXLib::IMxDrawPoints** controlPoints, MxDrawXLib::IMxDrawResbuf** knots, MxDrawXLib::IMxDrawResbuf** weights, double& controlPtTol, double& knotTol)
{
    void *_a[] = {0, (void*)&degree, (void*)&rational, (void*)&closed, (void*)&periodic, (void*)&controlPoints, (void*)&knots, (void*)&weights, (void*)&controlPtTol, (void*)&knotTol};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSpline::GetParam()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline double MxDrawSpline::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline double MxDrawSpline::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawSpline::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawSpline::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSpline::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* MxDrawSpline::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawSpline::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline double MxDrawSpline::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawSpline::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSpline::GetWeights()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSpline::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline double MxDrawSpline::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline int MxDrawSpline::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool MxDrawSpline::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline QString MxDrawSpline::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline void MxDrawSpline::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawSpline::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline bool MxDrawSpline::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline void MxDrawSpline::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void MxDrawSpline::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline bool MxDrawSpline::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSpline::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline void MxDrawSpline::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void MxDrawSpline::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void MxDrawSpline::SetFitData(MxDrawXLib::IMxDrawPoints* points, int degree, double fitTolerance, MxDrawXLib::IMxDrawVector3d* startTangent, MxDrawXLib::IMxDrawVector3d* endTangent)
{
    void *_a[] = {0, (void*)&points, (void*)&degree, (void*)&fitTolerance, (void*)&startTangent, (void*)&endTangent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void MxDrawSpline::SetNurbsData(int degree, bool rational, bool closed, bool periodic, MxDrawXLib::IMxDrawPoints* controlPoints, MxDrawXLib::IMxDrawResbuf* knots, MxDrawXLib::IMxDrawResbuf* weights, double controlPtTol, double knotTol)
{
    void *_a[] = {0, (void*)&degree, (void*)&rational, (void*)&closed, (void*)&periodic, (void*)&controlPoints, (void*)&knots, (void*)&weights, (void*)&controlPtTol, (void*)&knotTol};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline bool MxDrawSpline::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline void MxDrawSpline::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline bool MxDrawSpline::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline bool MxDrawSpline::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}

inline bool MxDrawSpline::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline bool MxDrawSpline::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSpline::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline void MxDrawSpline::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawTolerance::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawTolerance::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawTolerance::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawTolerance::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawTolerance::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawTolerance::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawTolerance::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawTolerance::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawTolerance::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawTolerance::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawTolerance::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawTolerance::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawTolerance::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawTolerance::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawTolerance::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawTolerance::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawTolerance::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawTolerance::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawTolerance::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawTolerance::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawTolerance::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawTolerance::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawTolerance::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawTolerance::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawTolerance::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawTolerance::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawTolerance::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawTolerance::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawTolerance::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawTolerance::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawTolerance::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawTolerance::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawTolerance::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawTolerance::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawTolerance::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawTolerance::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawTolerance::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawTolerance::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawTolerance::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawTolerance::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawTolerance::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawTolerance::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double MxDrawTolerance::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawTolerance::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int MxDrawTolerance::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawTolerance::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString MxDrawTolerance::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void MxDrawTolerance::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawTolerance::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawTolerance::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void MxDrawTolerance::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawTolerance::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawTolerance::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawTolerance::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void MxDrawTolerance::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool MxDrawTolerance::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool MxDrawTolerance::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool MxDrawTolerance::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void MxDrawTolerance::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawTrace::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawTrace::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawTrace::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawTrace::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawTrace::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawTrace::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawTrace::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawTrace::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawTrace::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawTrace::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawTrace::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawTrace::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawTrace::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawTrace::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawTrace::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawTrace::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawTrace::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawTrace::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawTrace::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawTrace::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawTrace::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawTrace::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawTrace::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawTrace::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawTrace::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawTrace::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawTrace::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawTrace::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawTrace::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawTrace::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawTrace::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawTrace::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawTrace::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawTrace::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawTrace::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawTrace::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawTrace::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawTrace::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawTrace::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawTrace::GetPointAt(int index)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawTrace::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawTrace::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool MxDrawTrace::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double MxDrawTrace::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool MxDrawTrace::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline int MxDrawTrace::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool MxDrawTrace::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QString MxDrawTrace::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void MxDrawTrace::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawTrace::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void MxDrawTrace::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawTrace::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawTrace::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void MxDrawTrace::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawTrace::SetPointAt(int index, MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&index, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline bool MxDrawTrace::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline void MxDrawTrace::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline bool MxDrawTrace::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool MxDrawTrace::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline bool MxDrawTrace::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void MxDrawTrace::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawXline::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawXline::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawXline::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawXline::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawXline::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawXline::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawXline::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawXline::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawXline::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawXline::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawXline::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawXline::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawXline::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawXline::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawXline::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawXline::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawXline::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawXline::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawXline::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawXline::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawXline::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawXline::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawXline::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawXline::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawXline::UnitDir() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("UnitDir");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawXline::SetUnitDir(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("UnitDir", QVariant(typeId, &value));
}

inline bool MxDrawXline::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawXline::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawXline::basePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawXline::setBasePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePoint", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor MxDrawXline::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawXline::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawXline::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawXline::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawXline::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawXline::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawXline::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawXline::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawXline::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawXline::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawXline::GetArea(double& pArea)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pArea};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double MxDrawXline::GetArea2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawXline::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawXline::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool MxDrawXline::GetClosestPointTo(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend, MxDrawXLib::IMxDrawPoint** pPointOnCurve)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend, (void*)&pPointOnCurve};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawXline::GetClosestPointTo2(MxDrawXLib::IMxDrawPoint* givenPnt, bool isExtend)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&givenPnt, (void*)&isExtend};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool MxDrawXline::GetDistAtParam(double dParam, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double MxDrawXline::GetDistAtParam2(double dParam)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool MxDrawXline::GetDistAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pDis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double MxDrawXline::GetDistAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawXline::GetEndParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawXline::GetEndPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawXline::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawXline::GetFirstDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pFirstDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pFirstDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawXline::GetFirstDeriv2(double dParam)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawXline::GetFirstDerivEx(MxDrawXLib::IMxDrawPoint* pPoint)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool MxDrawXline::GetLength(double& Length)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Length};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline double MxDrawXline::GetLength2()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool MxDrawXline::GetParamAtDist(double dDis, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline double MxDrawXline::GetParamAtDist2(double dDis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool MxDrawXline::GetParamAtPoint(MxDrawXLib::IMxDrawPoint* point, double& pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline double MxDrawXline::GetParamAtPoint2(MxDrawXLib::IMxDrawPoint* point)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool MxDrawXline::GetPointAtDist(double dDis, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dDis, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawXline::GetPointAtDist2(double dDis)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dDis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool MxDrawXline::GetPointAtParam(double dParam, MxDrawXLib::IMxDrawPoint** pPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawXline::GetPointAtParam2(double dParam)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawXline::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoints* MxDrawXline::GetSamplePoints(double dApproxEps)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dApproxEps};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool MxDrawXline::GetSecondDeriv(double dParam, MxDrawXLib::IMxDrawVector3d** pSecDeriv)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dParam, (void*)&pSecDeriv};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawXline::GetSecondDeriv2(MxDrawXLib::IMxDrawPoint* point)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline double MxDrawXline::GetStartParam()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawXline::GetStartPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawXline::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool MxDrawXline::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline double MxDrawXline::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool MxDrawXline::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int MxDrawXline::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool MxDrawXline::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline QString MxDrawXline::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void MxDrawXline::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawXline::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool MxDrawXline::IsClosed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline void MxDrawXline::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void MxDrawXline::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool MxDrawXline::OffsetCurves(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawXline::OffsetCurves2(double dOffsetDist, MxDrawXLib::IMxDrawPoint* ptOffsetRef)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&dOffsetDist, (void*)&ptOffsetRef};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void MxDrawXline::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void MxDrawXline::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline bool MxDrawXline::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline void MxDrawXline::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline bool MxDrawXline::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool MxDrawXline::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool MxDrawXline::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool MxDrawXline::SplitCurves(MxDrawXLib::IMxDrawResbuf* aryParam, MxDrawXLib::IMxDrawResbuf** aryNewId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&aryParam, (void*)&aryNewId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawXline::SplitCurves2(MxDrawXLib::IMxDrawResbuf* aryParam)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&aryParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline void MxDrawXline::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}


inline int MxDrawBlockReference::AttributeCount() const
{
    QVariant qax_result = property("AttributeCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawBlockTableRecord* MxDrawBlockReference::BlockTableRecord() const
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_pointer);
    QVariant qax_result = property("BlockTableRecord");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawBlockTableRecord**)qax_result.constData();
}
inline void MxDrawBlockReference::SetBlockTableRecord(MxDrawXLib::IMxDrawBlockTableRecord* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("MxDrawXLib::IMxDrawBlockTableRecord*", &value);
    setProperty("BlockTableRecord", QVariant(typeId, &value));
}

inline qlonglong MxDrawBlockReference::BlockTableRecordId() const
{
    QVariant qax_result = property("BlockTableRecordId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void MxDrawBlockReference::SetBlockTableRecordId(qlonglong value){ setProperty("BlockTableRecordId", QVariant(value)); }

inline MxDrawXLib::IMxDrawMatrix3d* MxDrawBlockReference::BlockTransform() const
{
    MxDrawXLib::IMxDrawMatrix3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMatrix3d*>("IMxDrawMatrix3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMatrix3d>("IMxDrawMatrix3d", qax_pointer);
    QVariant qax_result = property("BlockTransform");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMatrix3d**)qax_result.constData();
}
inline void MxDrawBlockReference::SetBlockTransform(MxDrawXLib::IMxDrawMatrix3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMatrix3d*>("MxDrawXLib::IMxDrawMatrix3d*", &value);
    setProperty("BlockTransform", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawBlockReference::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawBlockReference::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawBlockReference::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawBlockReference::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawBlockReference::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawBlockReference::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawBlockReference::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawBlockReference::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawBlockReference::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawBlockReference::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawBlockReference::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawBlockReference::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawBlockReference::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawBlockReference::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawBlockReference::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawBlockReference::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawBlockReference::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawBlockReference::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawBlockReference::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawBlockReference::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawBlockReference::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawBlockReference::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline double MxDrawBlockReference::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawBlockReference::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline MxDrawXLib::IMxDrawScale3d* MxDrawBlockReference::ScaleFactors() const
{
    MxDrawXLib::IMxDrawScale3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawScale3d*>("IMxDrawScale3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawScale3d>("IMxDrawScale3d", qax_pointer);
    QVariant qax_result = property("ScaleFactors");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawScale3d**)qax_result.constData();
}
inline void MxDrawBlockReference::SetScaleFactors(MxDrawXLib::IMxDrawScale3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawScale3d*>("MxDrawXLib::IMxDrawScale3d*", &value);
    setProperty("ScaleFactors", QVariant(typeId, &value));
}

inline QString MxDrawBlockReference::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawBlockReference::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawBlockReference::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawBlockReference::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawBlockReference::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawBlockReference::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawBlockReference::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawBlockReference::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawBlockReference::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawAttribute* MxDrawBlockReference::AppendAttribute()
{
    MxDrawXLib::IMxDrawAttribute* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute*>("IMxDrawAttribute*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute>("IMxDrawAttribute", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MxDrawBlockReference::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline MxDrawXLib::IMxDrawAttribute* MxDrawBlockReference::AttributeItem(int lItem)
{
    MxDrawXLib::IMxDrawAttribute* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute*>("IMxDrawAttribute*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute>("IMxDrawAttribute", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawBlockReference::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void MxDrawBlockReference::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline IDispatch* MxDrawBlockReference::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool MxDrawBlockReference::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawBlockReference::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawBlockReference::Explode()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawBlockReference::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline QString MxDrawBlockReference::GetBlockName()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void MxDrawBlockReference::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawBlockReference::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawBlockReference::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawBlockReference::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawBlockReference::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawBlockReference::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double MxDrawBlockReference::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawBlockReference::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int MxDrawBlockReference::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawBlockReference::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString MxDrawBlockReference::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void MxDrawBlockReference::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawBlockReference::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void MxDrawBlockReference::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawBlockReference::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void MxDrawBlockReference::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void MxDrawBlockReference::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline bool MxDrawBlockReference::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline void MxDrawBlockReference::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline bool MxDrawBlockReference::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline bool MxDrawBlockReference::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline bool MxDrawBlockReference::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline void MxDrawBlockReference::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawHatch::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawHatch::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double MxDrawHatch::Elevation() const
{
    QVariant qax_result = property("Elevation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawHatch::SetElevation(double value){ setProperty("Elevation", QVariant(value)); }

inline double MxDrawHatch::GradientAngle() const
{
    QVariant qax_result = property("GradientAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawHatch::SetGradientAngle(double value){ setProperty("GradientAngle", QVariant(value)); }

inline QString MxDrawHatch::GradientName() const
{
    QVariant qax_result = property("GradientName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawHatch::SetGradientName(const QString& value){ setProperty("GradientName", QVariant(value)); }

inline bool MxDrawHatch::GradientOneColorMode() const
{
    QVariant qax_result = property("GradientOneColorMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawHatch::SetGradientOneColorMode(bool value){ setProperty("GradientOneColorMode", QVariant(value)); }

inline MxDrawXLib::GradientPatternType MxDrawHatch::GradientType() const
{
    QVariant qax_result = property("GradientType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::GradientPatternType*)qax_result.constData();
}
inline void MxDrawHatch::SetGradientType(MxDrawXLib::GradientPatternType value){ setProperty("GradientType", QVariant(value)); }

inline bool MxDrawHatch::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline MxDrawXLib::HatchObjectType MxDrawHatch::HatchObjectType() const
{
    QVariant qax_result = property("HatchObjectType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::HatchObjectType*)qax_result.constData();
}
inline void MxDrawHatch::SetHatchObjectType(MxDrawXLib::HatchObjectType value){ setProperty("HatchObjectType", QVariant(value)); }

inline MxDrawXLib::HatchStyle MxDrawHatch::HatchStyle() const
{
    QVariant qax_result = property("HatchStyle");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::HatchStyle*)qax_result.constData();
}
inline void MxDrawHatch::SetHatchStyle(MxDrawXLib::HatchStyle value){ setProperty("HatchStyle", QVariant(value)); }

inline QString MxDrawHatch::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawHatch::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawHatch::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawHatch::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawHatch::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawHatch::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawHatch::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawHatch::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawHatch::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawHatch::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawHatch::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawHatch::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawHatch::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawHatch::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline int MxDrawHatch::NumLoops() const
{
    QVariant qax_result = property("NumLoops");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline qlonglong MxDrawHatch::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawHatch::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawHatch::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double MxDrawHatch::PatternAngle() const
{
    QVariant qax_result = property("PatternAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawHatch::SetPatternAngle(double value){ setProperty("PatternAngle", QVariant(value)); }

inline bool MxDrawHatch::PatternDouble() const
{
    QVariant qax_result = property("PatternDouble");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawHatch::SetPatternDouble(bool value){ setProperty("PatternDouble", QVariant(value)); }

inline QString MxDrawHatch::PatternName() const
{
    QVariant qax_result = property("PatternName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawHatch::SetPatternName(const QString& value){ setProperty("PatternName", QVariant(value)); }

inline double MxDrawHatch::PatternScale() const
{
    QVariant qax_result = property("PatternScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawHatch::SetPatternScale(double value){ setProperty("PatternScale", QVariant(value)); }

inline double MxDrawHatch::PatternSpace() const
{
    QVariant qax_result = property("PatternSpace");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawHatch::SetPatternSpace(double value){ setProperty("PatternSpace", QVariant(value)); }

inline MxDrawXLib::HatchPatternType MxDrawHatch::PatternType() const
{
    QVariant qax_result = property("PatternType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::HatchPatternType*)qax_result.constData();
}
inline void MxDrawHatch::SetPatternType(MxDrawXLib::HatchPatternType value){ setProperty("PatternType", QVariant(value)); }

inline double MxDrawHatch::ShadeTintValue() const
{
    QVariant qax_result = property("ShadeTintValue");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawHatch::SetShadeTintValue(double value){ setProperty("ShadeTintValue", QVariant(value)); }

inline QString MxDrawHatch::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawHatch::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawHatch::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawHatch::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawHatch::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawHatch::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawHatch::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawHatch::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawHatch::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawHatch::AddPatternDefinition(double Angle, double baseX, double baseY, double offsetX, double offsetY, MxDrawXLib::IMxDrawResbuf* dashes)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Angle, (void*)&baseX, (void*)&baseY, (void*)&offsetX, (void*)&offsetY, (void*)&dashes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool MxDrawHatch::AddPatternDefinitionEx(const QString& pszDefinitionData, double dScale)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszDefinitionData, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool MxDrawHatch::AppendLoop(int loopType, MxDrawXLib::IMxDrawResbuf* pData)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&loopType, (void*)&pData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void MxDrawHatch::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawHatch::ClearPatternDefinition()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawHatch::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawHatch::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline IDispatch* MxDrawHatch::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool MxDrawHatch::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawHatch::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline bool MxDrawHatch::EvaluateHatch(bool bUnderestimateNumLines)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bUnderestimateNumLines};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawHatch::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline void MxDrawHatch::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawHatch::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawHatch::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawHatch::GetLoopAt(int loopIndex)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&loopIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawHatch::GetPatternDefinitionAt(int index, double& Angle, double& baseX, double& baseY, double& offsetX, double& offsetY)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index, (void*)&Angle, (void*)&baseX, (void*)&baseY, (void*)&offsetX, (void*)&offsetY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawHatch::GetPolylines()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawHatch::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawHatch::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawHatch::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline double MxDrawHatch::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool MxDrawHatch::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline int MxDrawHatch::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline bool MxDrawHatch::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline QString MxDrawHatch::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline void MxDrawHatch::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawHatch::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool MxDrawHatch::IsGradient()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool MxDrawHatch::IsHatch()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline bool MxDrawHatch::IsSolid()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool MxDrawHatch::LoadPatternDefinition(const QString& pszFileName, const QString& pszName, double dPatternScale, double dPatternAngel)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFileName, (void*)&pszName, (void*)&dPatternScale, (void*)&dPatternAngel};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline int MxDrawHatch::LoopTypeAt(int loopIndex)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&loopIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline bool MxDrawHatch::LoopTypeIsPolyline(int loopIndex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&loopIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline void MxDrawHatch::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void MxDrawHatch::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline int MxDrawHatch::NumPatternDefinitions()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline void MxDrawHatch::RemoveAllLoop()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool MxDrawHatch::RemoveLoopAt(int loopIndex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&loopIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline void MxDrawHatch::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void MxDrawHatch::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline bool MxDrawHatch::ScalePattern(double dScale)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool MxDrawHatch::SetLoopAt(int loopIndex, int loopType, MxDrawXLib::IMxDrawResbuf* pData)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&loopIndex, (void*)&loopType, (void*)&pData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline bool MxDrawHatch::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline void MxDrawHatch::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline bool MxDrawHatch::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool MxDrawHatch::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool MxDrawHatch::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline void MxDrawHatch::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawHatch::getGradientColors(MxDrawXLib::IMxDrawResbuf** mxColors)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&mxColors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline bool MxDrawHatch::setGradientColors(MxDrawXLib::IMxDrawResbuf* mxColors, MxDrawXLib::IMxDrawResbuf* mxValues)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&mxColors, (void*)&mxValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawRasterImage::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawRasterImage::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawRasterImage::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawRasterImage::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawRasterImage::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawRasterImage::ImageDefId() const
{
    QVariant qax_result = property("ImageDefId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void MxDrawRasterImage::SetImageDefId(qlonglong value){ setProperty("ImageDefId", QVariant(value)); }

inline qlonglong MxDrawRasterImage::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawRasterImage::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawRasterImage::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawRasterImage::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawRasterImage::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawRasterImage::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawRasterImage::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawRasterImage::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawRasterImage::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawRasterImage::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawRasterImage::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawRasterImage::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawRasterImage::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawRasterImage::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawRasterImage::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawRasterImage::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawRasterImage::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawRasterImage::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawRasterImage::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawRasterImage::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawRasterImage::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawRasterImage::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawRasterImage::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawRasterImage::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawRasterImage::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawRasterImage::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawRasterImage::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawRasterImage::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawRasterImage::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawRasterImage::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawRasterImage::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawRasterImage::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawRasterImage::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawRasterImage::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void MxDrawRasterImage::GetOrientation(MxDrawXLib::IMxDrawPoint** Origin, MxDrawXLib::IMxDrawVector3d** uCorner, MxDrawXLib::IMxDrawVector3d** vOnPlane)
{
    void *_a[] = {0, (void*)&Origin, (void*)&uCorner, (void*)&vOnPlane};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawRasterImage::GetOrientation2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawRasterImage::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawRasterImage::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawRasterImage::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline double MxDrawRasterImage::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawRasterImage::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int MxDrawRasterImage::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawRasterImage::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline QString MxDrawRasterImage::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawRasterImage::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawRasterImage::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void MxDrawRasterImage::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawRasterImage::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void MxDrawRasterImage::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawRasterImage::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void MxDrawRasterImage::SetOrientation(MxDrawXLib::IMxDrawPoint* Origin, MxDrawXLib::IMxDrawVector3d* uCorner, MxDrawXLib::IMxDrawVector3d* vOnPlane)
{
    void *_a[] = {0, (void*)&Origin, (void*)&uCorner, (void*)&vOnPlane};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline bool MxDrawRasterImage::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline void MxDrawRasterImage::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool MxDrawRasterImage::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool MxDrawRasterImage::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline bool MxDrawRasterImage::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline void MxDrawRasterImage::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawLayout::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawLayout::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawLayout::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawLayout::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawLayout::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLayout::LayoutName() const
{
    QVariant qax_result = property("LayoutName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawLayout::SetLayoutName(const QString& value){ setProperty("LayoutName", QVariant(value)); }

inline qlonglong MxDrawLayout::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLayout::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawLayout::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLayout::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawLayout::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MxDrawLayout::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawLayout::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawLayout::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawLayout::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool MxDrawLayout::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawSymbolTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawSymbolTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawSymbolTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawSymbolTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawSymbolTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawSymbolTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawSymbolTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawSymbolTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawSymbolTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawSymbolTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MxDrawSymbolTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawSymbolTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawSymbolTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawSymbolTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool MxDrawSymbolTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawBlockTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawBlockTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawBlockTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawBlockTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawBlockTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawBlockTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawBlockTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawBlockTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawBlockTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawBlockTableRecord* MxDrawBlockTable::Add(const QString& pszName)
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawBlockTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawBlockTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawBlockTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawBlockTableRecord* MxDrawBlockTable::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockTableRecord* MxDrawBlockTable::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawBlockTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawBlockTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool MxDrawBlockTable::Has(const QString& pName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockTableIterator* MxDrawBlockTable::NewIterator()
{
    MxDrawXLib::IMxDrawBlockTableIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableIterator*>("IMxDrawBlockTableIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableIterator>("IMxDrawBlockTableIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool MxDrawBlockTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawLayerTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawLayerTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawLayerTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawLayerTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawLayerTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawLayerTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLayerTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawLayerTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLayerTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawLayerTableRecord* MxDrawLayerTable::Add(const QString& pszName)
{
    MxDrawXLib::IMxDrawLayerTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord*>("IMxDrawLayerTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord>("IMxDrawLayerTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawLayerTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawLayerTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawLayerTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawLayerTableRecord* MxDrawLayerTable::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawLayerTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord*>("IMxDrawLayerTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord>("IMxDrawLayerTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLayerTableRecord* MxDrawLayerTable::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawLayerTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord*>("IMxDrawLayerTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord>("IMxDrawLayerTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawLayerTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawLayerTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool MxDrawLayerTable::Has(const QString& pName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLayerTableIterator* MxDrawLayerTable::NewIterator()
{
    MxDrawXLib::IMxDrawLayerTableIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableIterator*>("IMxDrawLayerTableIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableIterator>("IMxDrawLayerTableIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool MxDrawLayerTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawLinetypeTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawLinetypeTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawLinetypeTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawLinetypeTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawLinetypeTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawLinetypeTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLinetypeTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawLinetypeTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLinetypeTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawLinetypeTableRecord* MxDrawLinetypeTable::Add(const QString& pszName)
{
    MxDrawXLib::IMxDrawLinetypeTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord*>("IMxDrawLinetypeTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord>("IMxDrawLinetypeTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawLinetypeTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawLinetypeTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawLinetypeTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawLinetypeTableRecord* MxDrawLinetypeTable::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawLinetypeTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord*>("IMxDrawLinetypeTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord>("IMxDrawLinetypeTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLinetypeTableRecord* MxDrawLinetypeTable::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawLinetypeTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord*>("IMxDrawLinetypeTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord>("IMxDrawLinetypeTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawLinetypeTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawLinetypeTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool MxDrawLinetypeTable::Has(const QString& pName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLinetypeTableIterator* MxDrawLinetypeTable::NewIterator()
{
    MxDrawXLib::IMxDrawLinetypeTableIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableIterator*>("IMxDrawLinetypeTableIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableIterator>("IMxDrawLinetypeTableIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool MxDrawLinetypeTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawTextStyleTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawTextStyleTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawTextStyleTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawTextStyleTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawTextStyleTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawTextStyleTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawTextStyleTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawTextStyleTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawTextStyleTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawTextStyleTableRecord* MxDrawTextStyleTable::Add(const QString& pszName)
{
    MxDrawXLib::IMxDrawTextStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord*>("IMxDrawTextStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord>("IMxDrawTextStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawTextStyleTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawTextStyleTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawTextStyleTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawTextStyleTableRecord* MxDrawTextStyleTable::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawTextStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord*>("IMxDrawTextStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord>("IMxDrawTextStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTextStyleTableRecord* MxDrawTextStyleTable::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawTextStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord*>("IMxDrawTextStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord>("IMxDrawTextStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawTextStyleTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawTextStyleTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool MxDrawTextStyleTable::Has(const QString& pName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTextStyleTableIterator* MxDrawTextStyleTable::NewIterator()
{
    MxDrawXLib::IMxDrawTextStyleTableIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableIterator*>("IMxDrawTextStyleTableIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableIterator>("IMxDrawTextStyleTableIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool MxDrawTextStyleTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline int MxDrawIdMapping::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline qlonglong MxDrawIdMapping::Find(qlonglong lKeyId)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lKeyId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline qlonglong MxDrawIdMapping::Item(int index, qlonglong& lId1)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index, (void*)&lId1};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline qlonglong MxDrawIdMapping::ItemKey(int index)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline qlonglong MxDrawIdMapping::ItemValue(int index)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}



inline MxDrawXLib::IMxDrawDatabase* MxDrawTextStyleTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawTextStyleTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawTextStyleTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawTextStyleTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawTextStyleTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawTextStyleTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawTextStyleTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline qlonglong MxDrawTextStyleTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawTextStyleTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawTextStyleTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawTextStyleTableRecord::bigFontFileName() const
{
    QVariant qax_result = property("bigFontFileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawTextStyleTableRecord::setBigFontFileName(const QString& value){ setProperty("bigFontFileName", QVariant(value)); }

inline QString MxDrawTextStyleTableRecord::fileName() const
{
    QVariant qax_result = property("fileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawTextStyleTableRecord::setFileName(const QString& value){ setProperty("fileName", QVariant(value)); }

inline int MxDrawTextStyleTableRecord::flagBits() const
{
    QVariant qax_result = property("flagBits");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawTextStyleTableRecord::setFlagBits(int value){ setProperty("flagBits", QVariant(value)); }

inline QString MxDrawTextStyleTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawTextStyleTableRecord::isShapeFile() const
{
    QVariant qax_result = property("isShapeFile");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawTextStyleTableRecord::setIsShapeFile(bool value){ setProperty("isShapeFile", QVariant(value)); }

inline bool MxDrawTextStyleTableRecord::isVertical() const
{
    QVariant qax_result = property("isVertical");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawTextStyleTableRecord::setIsVertical(bool value){ setProperty("isVertical", QVariant(value)); }

inline double MxDrawTextStyleTableRecord::obliquingAngle() const
{
    QVariant qax_result = property("obliquingAngle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawTextStyleTableRecord::setObliquingAngle(double value){ setProperty("obliquingAngle", QVariant(value)); }

inline double MxDrawTextStyleTableRecord::priorSize() const
{
    QVariant qax_result = property("priorSize");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawTextStyleTableRecord::setPriorSize(double value){ setProperty("priorSize", QVariant(value)); }

inline double MxDrawTextStyleTableRecord::textSize() const
{
    QVariant qax_result = property("textSize");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawTextStyleTableRecord::setTextSize(double value){ setProperty("textSize", QVariant(value)); }

inline double MxDrawTextStyleTableRecord::xScale() const
{
    QVariant qax_result = property("xScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawTextStyleTableRecord::setXScale(double value){ setProperty("xScale", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawTextStyleTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MxDrawTextStyleTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawTextStyleTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawTextStyleTableRecord::Font(QString& pTypeface, bool& bold, bool& italic, int& charset, int& pitchAndFamily)
{
    void *_a[] = {0, (void*)&pTypeface, (void*)&bold, (void*)&italic, (void*)&charset, (void*)&pitchAndFamily};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawTextStyleTableRecord::Font2()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawTextStyleTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawTextStyleTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawTextStyleTableRecord::SetFont(const QString& pTypeface, bool bold, bool italic, int charset, int pitchAndFamily)
{
    void *_a[] = {0, (void*)&pTypeface, (void*)&bold, (void*)&italic, (void*)&charset, (void*)&pitchAndFamily};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline bool MxDrawTextStyleTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawMcCmColor* MxDrawLayerTableRecord::Color() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("Color");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawLayerTableRecord::SetColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("Color", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawLayerTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawLayerTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawLayerTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawLayerTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawLayerTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool MxDrawLayerTableRecord::IsFrozen() const
{
    QVariant qax_result = property("IsFrozen");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawLayerTableRecord::SetIsFrozen(bool value){ setProperty("IsFrozen", QVariant(value)); }

inline bool MxDrawLayerTableRecord::IsLocked() const
{
    QVariant qax_result = property("IsLocked");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawLayerTableRecord::SetIsLocked(bool value){ setProperty("IsLocked", QVariant(value)); }

inline bool MxDrawLayerTableRecord::IsOff() const
{
    QVariant qax_result = property("IsOff");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawLayerTableRecord::SetIsOff(bool value){ setProperty("IsOff", QVariant(value)); }

inline qlonglong MxDrawLayerTableRecord::LinetypeObjectId() const
{
    QVariant qax_result = property("LinetypeObjectId");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}
inline void MxDrawLayerTableRecord::SetLinetypeObjectId(qlonglong value){ setProperty("LinetypeObjectId", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawLayerTableRecord::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawLayerTableRecord::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline QString MxDrawLayerTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawLayerTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline qlonglong MxDrawLayerTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLayerTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawLayerTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLayerTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawLayerTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MxDrawLayerTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawLayerTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawLayerTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawLayerTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool MxDrawLayerTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}


inline QString MxDrawLinetypeTableRecord::Comments() const
{
    QVariant qax_result = property("Comments");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawLinetypeTableRecord::SetComments(const QString& value){ setProperty("Comments", QVariant(value)); }

inline MxDrawXLib::IMxDrawDatabase* MxDrawLinetypeTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawLinetypeTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawLinetypeTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawLinetypeTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawLinetypeTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool MxDrawLinetypeTableRecord::IsScaledToFit() const
{
    QVariant qax_result = property("IsScaledToFit");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawLinetypeTableRecord::SetIsScaledToFit(bool value){ setProperty("IsScaledToFit", QVariant(value)); }

inline QString MxDrawLinetypeTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawLinetypeTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline int MxDrawLinetypeTableRecord::NumDashes() const
{
    QVariant qax_result = property("NumDashes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawLinetypeTableRecord::SetNumDashes(int value){ setProperty("NumDashes", QVariant(value)); }

inline qlonglong MxDrawLinetypeTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawLinetypeTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawLinetypeTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double MxDrawLinetypeTableRecord::PatternLength() const
{
    QVariant qax_result = property("PatternLength");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawLinetypeTableRecord::SetPatternLength(double value){ setProperty("PatternLength", QVariant(value)); }

inline QString MxDrawLinetypeTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawLinetypeTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MxDrawLinetypeTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline double MxDrawLinetypeTableRecord::DashLengthAt(int index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void MxDrawLinetypeTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawLinetypeTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawLinetypeTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawLinetypeTableRecord::SetDashLengthAt(int index, double dLen)
{
    void *_a[] = {0, (void*)&index, (void*)&dLen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline bool MxDrawLinetypeTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void MxDrawLinetypeTableRecord::SetShapeIsUcsOrientedAt(int index, bool isUcsOriented)
{
    void *_a[] = {0, (void*)&index, (void*)&isUcsOriented};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void MxDrawLinetypeTableRecord::SetShapeNumberAt(int index, int lNumber)
{
    void *_a[] = {0, (void*)&index, (void*)&lNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void MxDrawLinetypeTableRecord::SetShapeOffsetAt(int index, MxDrawXLib::IMxDrawVector3d* offset)
{
    void *_a[] = {0, (void*)&index, (void*)&offset};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void MxDrawLinetypeTableRecord::SetShapeRotationAt(int index, double dRotation)
{
    void *_a[] = {0, (void*)&index, (void*)&dRotation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void MxDrawLinetypeTableRecord::SetTextAt(int index, const QString& pszText)
{
    void *_a[] = {0, (void*)&index, (void*)&pszText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline bool MxDrawLinetypeTableRecord::ShapeIsUcsOrientedAt(int index)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int MxDrawLinetypeTableRecord::ShapeNumberAt(int index)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawLinetypeTableRecord::ShapeOffsetAt(int index)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline double MxDrawLinetypeTableRecord::ShapeRotationAt(int index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline qlonglong MxDrawLinetypeTableRecord::ShapeStyleAt(int index)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline QString MxDrawLinetypeTableRecord::TextAt(int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void MxDrawLinetypeTableRecord::setShapeStyleAt(int index, qlonglong lId)
{
    void *_a[] = {0, (void*)&index, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}


inline double MxDrawUtility::GetAngle(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawUtility::GetCorner(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline double MxDrawUtility::GetDimAngle(double dAng)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline double MxDrawUtility::GetDistance(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEntity* MxDrawUtility::GetEntity(MxDrawXLib::IMxDrawPoint** pPickPoint, const QString& Prompt)
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPickPoint, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawUtility::GetImageSize(const QString& sImageFile)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sImageFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline int MxDrawUtility::GetInteger(const QString& Prompt)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline QString MxDrawUtility::GetKeyword(const QString& Prompt, const QString& keyWordList)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Prompt, (void*)&keyWordList};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawUtility::GetPoint(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double MxDrawUtility::GetReal(const QString& Prompt)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline McUiPrStatus MxDrawUtility::GetStatus()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline QString MxDrawUtility::GetString(const QString& pormpt, const QString& defval)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pormpt, (void*)&defval};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawCustomEntity* MxDrawUtility::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void MxDrawUtility::InitializeUserInput(int bits, const QString& keyWordList)
{
    void *_a[] = {0, (void*)&bits, (void*)&keyWordList};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline bool MxDrawUtility::PointInPolyline(MxDrawXLib::IMxDrawPoints* pPointArray, double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pPointArray, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline void MxDrawUtility::Prompt(const QString& message)
{
    void *_a[] = {0, (void*)&message};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawUtility::TableSearch(const QString& pszSpaceName, const QString& pszTableHead)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszSpaceName, (void*)&pszTableHead};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawUtility::UcsToWcs(MxDrawXLib::IMxDrawPoint* pIn)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawUtility::WcsToUcs(MxDrawXLib::IMxDrawPoint* pIn)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}


inline double IMxDrawUtility::GetAngle(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawUtility::GetCorner(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline double IMxDrawUtility::GetDimAngle(double dAng)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline double IMxDrawUtility::GetDistance(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEntity* IMxDrawUtility::GetEntity(MxDrawXLib::IMxDrawPoint** pPickPoint, const QString& Prompt)
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pPickPoint, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawUtility::GetImageSize(const QString& sImageFile)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sImageFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline int IMxDrawUtility::GetInteger(const QString& Prompt)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline QString IMxDrawUtility::GetKeyword(const QString& Prompt, const QString& keyWordList)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Prompt, (void*)&keyWordList};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawUtility::GetPoint(MxDrawXLib::IMxDrawPoint* point, const QString& Prompt)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&point, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double IMxDrawUtility::GetReal(const QString& Prompt)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Prompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline McUiPrStatus IMxDrawUtility::GetStatus()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline QString IMxDrawUtility::GetString(const QString& pormpt, const QString& defval)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pormpt, (void*)&defval};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawCustomEntity* IMxDrawUtility::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void IMxDrawUtility::InitializeUserInput(int bits, const QString& keyWordList)
{
    void *_a[] = {0, (void*)&bits, (void*)&keyWordList};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline bool IMxDrawUtility::PointInPolyline(MxDrawXLib::IMxDrawPoints* pPointArray, double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pPointArray, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline void IMxDrawUtility::Prompt(const QString& message)
{
    void *_a[] = {0, (void*)&message};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawUtility::TableSearch(const QString& pszSpaceName, const QString& pszTableHead)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszSpaceName, (void*)&pszTableHead};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawUtility::UcsToWcs(MxDrawXLib::IMxDrawPoint* pIn)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawUtility::WcsToUcs(MxDrawXLib::IMxDrawPoint* pIn)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawCustomEntity::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCustomEntity::DragPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DragPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawCustomEntity::SetDragPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DragPoint", QVariant(typeId, &value));
}

inline QString IMxDrawCustomEntity::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IMxDrawCustomEntity::Guid() const
{
    QVariant qax_result = property("Guid");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCustomEntity::SetGuid(const QString& value){ setProperty("Guid", QVariant(value)); }

inline bool IMxDrawCustomEntity::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawCustomEntity::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCustomEntity::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawCustomEntity::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawCustomEntity::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawCustomEntity::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCustomEntity::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawCustomEntity::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCustomEntity::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawCustomEntity::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawCustomEntity::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawCustomEntity::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawCustomEntity::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawCustomEntity::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawCustomEntity::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawCustomEntity::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawCustomEntity::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawCustomEntity::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawCustomEntity::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawCustomEntity::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawCustomEntity::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawCustomEntity::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawCustomEntity::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawCustomEntity::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawCustomEntity::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawCustomEntity::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawCustomEntity::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawCustomEntity::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IMxDrawCustomEntity::BeginSetValue()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawCustomEntity::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IMxDrawCustomEntity::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline IDispatch* IMxDrawCustomEntity::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IMxDrawCustomEntity::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCustomEntity::Draw()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawCustomEntity::EntSetValue()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IMxDrawCustomEntity::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCustomEntity::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IMxDrawCustomEntity::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawCustomEntity::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline double IMxDrawCustomEntity::GetDouble(const QString& pszName)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawCustomEntity::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline int IMxDrawCustomEntity::GetLong(const QString& pszName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline qlonglong IMxDrawCustomEntity::GetLongPtr(const QString& pszName)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCustomEntity::GetPoint(const QString& pszName)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCustomEntity::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QString IMxDrawCustomEntity::GetString(const QString& pszName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCustomEntity::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawCustomEntity::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline double IMxDrawCustomEntity::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool IMxDrawCustomEntity::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline int IMxDrawCustomEntity::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline bool IMxDrawCustomEntity::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline QString IMxDrawCustomEntity::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline void IMxDrawCustomEntity::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawCustomEntity::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool IMxDrawCustomEntity::IsHave(const QString& pszName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline void IMxDrawCustomEntity::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void IMxDrawCustomEntity::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void IMxDrawCustomEntity::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void IMxDrawCustomEntity::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void IMxDrawCustomEntity::SetDouble(const QString& pszName, double dV)
{
    void *_a[] = {0, (void*)&pszName, (void*)&dV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void IMxDrawCustomEntity::SetLong(const QString& pszName, int lV)
{
    void *_a[] = {0, (void*)&pszName, (void*)&lV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void IMxDrawCustomEntity::SetLongPtr(const QString& pszName, qlonglong lV)
{
    void *_a[] = {0, (void*)&pszName, (void*)&lV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void IMxDrawCustomEntity::SetPoint(const QString& pszName, MxDrawXLib::IMxDrawPoint* pPoint)
{
    void *_a[] = {0, (void*)&pszName, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline bool IMxDrawCustomEntity::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IMxDrawCustomEntity::SetString(const QString& pszName, const QString& pszV)
{
    void *_a[] = {0, (void*)&pszName, (void*)&pszV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IMxDrawCustomEntity::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool IMxDrawCustomEntity::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool IMxDrawCustomEntity::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline bool IMxDrawCustomEntity::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline void IMxDrawCustomEntity::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}


inline int MxDrawSelectionSet::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void MxDrawSelectionSet::AllSelect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void MxDrawSelectionSet::AllSelect(MxDrawXLib::IMxDrawResbuf* filterData)
{
    void *_a[] = {0, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawSelectionSet::CurrentSelect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawSelectionSet::CurrentSelect(MxDrawXLib::IMxDrawResbuf* pFilter)
{
    void *_a[] = {0, (void*)&pFilter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawEntity* MxDrawSelectionSet::Item(int index)
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawSelectionSet::Select(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&mode, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void MxDrawSelectionSet::Select(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2, MxDrawXLib::IMxDrawResbuf* filterData)
{
    void *_a[] = {0, (void*)&mode, (void*)&point1, (void*)&point2, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawSelectionSet::Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2)
{
    void *_a[] = {0, (void*)&mode, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void MxDrawSelectionSet::Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2, const QVariant& filterType)
{
    void *_a[] = {0, (void*)&mode, (void*)&point1, (void*)&point2, (void*)&filterType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void MxDrawSelectionSet::Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2, const QVariant& filterType, const QVariant& filterData)
{
    void *_a[] = {0, (void*)&mode, (void*)&point1, (void*)&point2, (void*)&filterType, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void MxDrawSelectionSet::SelectAtPoint(MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void MxDrawSelectionSet::SelectAtPoint(MxDrawXLib::IMxDrawPoint* point, MxDrawXLib::IMxDrawResbuf* filterData)
{
    void *_a[] = {0, (void*)&point, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void MxDrawSelectionSet::SelectByPolygon(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoints* points)
{
    void *_a[] = {0, (void*)&mode, (void*)&points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void MxDrawSelectionSet::SelectByPolygon(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* filterData)
{
    void *_a[] = {0, (void*)&mode, (void*)&points, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline int IMxDrawSelectionSet::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void IMxDrawSelectionSet::AllSelect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IMxDrawSelectionSet::AllSelect(MxDrawXLib::IMxDrawResbuf* filterData)
{
    void *_a[] = {0, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawSelectionSet::CurrentSelect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IMxDrawSelectionSet::CurrentSelect(MxDrawXLib::IMxDrawResbuf* pFilter)
{
    void *_a[] = {0, (void*)&pFilter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawEntity* IMxDrawSelectionSet::Item(int index)
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawSelectionSet::Select(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&mode, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IMxDrawSelectionSet::Select(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2, MxDrawXLib::IMxDrawResbuf* filterData)
{
    void *_a[] = {0, (void*)&mode, (void*)&point1, (void*)&point2, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawSelectionSet::Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2)
{
    void *_a[] = {0, (void*)&mode, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IMxDrawSelectionSet::Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2, const QVariant& filterType)
{
    void *_a[] = {0, (void*)&mode, (void*)&point1, (void*)&point2, (void*)&filterType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IMxDrawSelectionSet::Select2(MxDrawXLib::McSelect mode, const QVariant& point1, const QVariant& point2, const QVariant& filterType, const QVariant& filterData)
{
    void *_a[] = {0, (void*)&mode, (void*)&point1, (void*)&point2, (void*)&filterType, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IMxDrawSelectionSet::SelectAtPoint(MxDrawXLib::IMxDrawPoint* point)
{
    void *_a[] = {0, (void*)&point};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IMxDrawSelectionSet::SelectAtPoint(MxDrawXLib::IMxDrawPoint* point, MxDrawXLib::IMxDrawResbuf* filterData)
{
    void *_a[] = {0, (void*)&point, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IMxDrawSelectionSet::SelectByPolygon(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoints* points)
{
    void *_a[] = {0, (void*)&mode, (void*)&points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IMxDrawSelectionSet::SelectByPolygon(MxDrawXLib::McSelect mode, MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* filterData)
{
    void *_a[] = {0, (void*)&mode, (void*)&points, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawXRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawXRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawXRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawXRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawXRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool MxDrawXRecord::IsXlateReferences() const
{
    QVariant qax_result = property("IsXlateReferences");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawXRecord::SetIsXlateReferences(bool value){ setProperty("IsXlateReferences", QVariant(value)); }

inline qlonglong MxDrawXRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawXRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawXRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawXRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawXRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MxDrawXRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawXRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawXRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawXRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawXRecord::GetXRecordData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool MxDrawXRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void MxDrawXRecord::SetXRecordData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawRasterImageDef::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawRasterImageDef::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawRasterImageDef::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawRasterImageDef::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawRasterImageDef::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawRasterImageDef::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawRasterImageDef::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawRasterImageDef::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawRasterImageDef::SourceFileName() const
{
    QVariant qax_result = property("SourceFileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawRasterImageDef::SetSourceFileName(const QString& value){ setProperty("SourceFileName", QVariant(value)); }

inline QString MxDrawRasterImageDef::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawRasterImageDef::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MxDrawRasterImageDef::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawRasterImageDef::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawRasterImageDef::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawRasterImageDef::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool MxDrawRasterImageDef::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawRasterImageDef::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawRasterImageDef::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawRasterImageDef::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong IMxDrawRasterImageDef::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawRasterImageDef::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawRasterImageDef::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawRasterImageDef::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawRasterImageDef::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawRasterImageDef::SourceFileName() const
{
    QVariant qax_result = property("SourceFileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawRasterImageDef::SetSourceFileName(const QString& value){ setProperty("SourceFileName", QVariant(value)); }

inline QString IMxDrawRasterImageDef::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawRasterImageDef::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMxDrawRasterImageDef::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawRasterImageDef::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawRasterImageDef::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawRasterImageDef::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IMxDrawRasterImageDef::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}


inline double MxDrawVector3d::x() const
{
    QVariant qax_result = property("x");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawVector3d::setX(double value){ setProperty("x", QVariant(value)); }

inline double MxDrawVector3d::y() const
{
    QVariant qax_result = property("y");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawVector3d::setY(double value){ setProperty("y", QVariant(value)); }

inline double MxDrawVector3d::z() const
{
    QVariant qax_result = property("z");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawVector3d::setZ(double value){ setProperty("z", QVariant(value)); }

inline void MxDrawVector3d::Add(MxDrawXLib::IMxDrawVector3d* pVector)
{
    void *_a[] = {0, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline double MxDrawVector3d::Angle()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline double MxDrawVector3d::AngleTo(MxDrawXLib::IMxDrawVector3d* pVector)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline double MxDrawVector3d::AngleTo(MxDrawXLib::IMxDrawVector3d* pVector, MxDrawXLib::IMxDrawVector3d* pRefVec)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVector, (void*)&pRefVec};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline double MxDrawVector3d::AngleToXyPlan(MxDrawXLib::IMxDrawVector3d* pVector)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawVector3d* MxDrawVector3d::CrossProduct(MxDrawXLib::IMxDrawVector3d* pVector)
{
    MxDrawXLib::IMxDrawVector3d* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline double MxDrawVector3d::DotProduct(MxDrawXLib::IMxDrawVector3d* pVector)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawVector3d::IsEqualTo(MxDrawXLib::IMxDrawVector3d* pVector)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool MxDrawVector3d::IsZeroLength()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double MxDrawVector3d::Length()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void MxDrawVector3d::MakeXAxis()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void MxDrawVector3d::MakeYAxis()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void MxDrawVector3d::MakeZAxis()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void MxDrawVector3d::Mult(double dScl)
{
    void *_a[] = {0, (void*)&dScl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void MxDrawVector3d::Negate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void MxDrawVector3d::Normalize()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void MxDrawVector3d::RotateBy(double dAng)
{
    void *_a[] = {0, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void MxDrawVector3d::RotateBy(double dAng, MxDrawXLib::IMxDrawVector3d* pAxis)
{
    void *_a[] = {0, (void*)&dAng, (void*)&pAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void MxDrawVector3d::RotateByXyPlan(double dAng)
{
    void *_a[] = {0, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void MxDrawVector3d::Sub(MxDrawXLib::IMxDrawVector3d* pVector)
{
    void *_a[] = {0, (void*)&pVector};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void MxDrawVector3d::TransformBy(MxDrawXLib::IMxDrawMatrix3d* pMat)
{
    void *_a[] = {0, (void*)&pMat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}


inline double MxDrawScale3d::sx() const
{
    QVariant qax_result = property("sx");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawScale3d::setSx(double value){ setProperty("sx", QVariant(value)); }

inline double MxDrawScale3d::sy() const
{
    QVariant qax_result = property("sy");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawScale3d::setSy(double value){ setProperty("sy", QVariant(value)); }

inline double MxDrawScale3d::sz() const
{
    QVariant qax_result = property("sz");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawScale3d::setSz(double value){ setProperty("sz", QVariant(value)); }


inline bool MxDrawBlockTableRecordIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEntity* MxDrawBlockTableRecordIterator::GetEntity()
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawBlockTableRecordIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawBlockTableRecordIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawBlockTableRecordIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void MxDrawBlockTableRecordIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void MxDrawBlockTableRecordIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawBlockTableRecordIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline bool MxDrawBlockTableIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockTableRecord* MxDrawBlockTableIterator::GetRecord()
{
    MxDrawXLib::IMxDrawBlockTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord*>("IMxDrawBlockTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockTableRecord>("IMxDrawBlockTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawBlockTableIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawBlockTableIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawBlockTableIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void MxDrawBlockTableIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void MxDrawBlockTableIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawBlockTableIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline bool MxDrawLayerTableIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLayerTableRecord* MxDrawLayerTableIterator::GetRecord()
{
    MxDrawXLib::IMxDrawLayerTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord*>("IMxDrawLayerTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLayerTableRecord>("IMxDrawLayerTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawLayerTableIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawLayerTableIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawLayerTableIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void MxDrawLayerTableIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void MxDrawLayerTableIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawLayerTableIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline bool MxDrawLinetypeTableIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLinetypeTableRecord* MxDrawLinetypeTableIterator::GetRecord()
{
    MxDrawXLib::IMxDrawLinetypeTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord*>("IMxDrawLinetypeTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLinetypeTableRecord>("IMxDrawLinetypeTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawLinetypeTableIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawLinetypeTableIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawLinetypeTableIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void MxDrawLinetypeTableIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void MxDrawLinetypeTableIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawLinetypeTableIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline bool MxDrawTextStyleTableIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawTextStyleTableRecord* MxDrawTextStyleTableIterator::GetRecord()
{
    MxDrawXLib::IMxDrawTextStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord*>("IMxDrawTextStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawTextStyleTableRecord>("IMxDrawTextStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawTextStyleTableIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawTextStyleTableIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawTextStyleTableIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void MxDrawTextStyleTableIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void MxDrawTextStyleTableIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawTextStyleTableIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline int MxDrawResbuf::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void MxDrawResbuf::AddAppName(const QString& pszAppName)
{
    void *_a[] = {0, (void*)&pszAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void MxDrawResbuf::AddDouble(double dVal)
{
    void *_a[] = {0, (void*)&dVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawResbuf::AddDoubleEx(double dVal)
{
    void *_a[] = {0, (void*)&dVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawResbuf::AddDoubleEx(double dVal, int lDataType)
{
    void *_a[] = {0, (void*)&dVal, (void*)&lDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawResbuf::AddLong(int lVal)
{
    void *_a[] = {0, (void*)&lVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void MxDrawResbuf::AddLongEx(int lVal)
{
    void *_a[] = {0, (void*)&lVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void MxDrawResbuf::AddLongEx(int lVal, int lDataType)
{
    void *_a[] = {0, (void*)&lVal, (void*)&lDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawResbuf::AddObjectId(qlonglong lVal)
{
    void *_a[] = {0, (void*)&lVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void MxDrawResbuf::AddObjectIdEx(qlonglong lVal)
{
    void *_a[] = {0, (void*)&lVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void MxDrawResbuf::AddObjectIdEx(qlonglong lVal, int lDataType)
{
    void *_a[] = {0, (void*)&lVal, (void*)&lDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void MxDrawResbuf::AddPoint(MxDrawXLib::IMxDrawPoint* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void MxDrawResbuf::AddPointEx(MxDrawXLib::IMxDrawPoint* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void MxDrawResbuf::AddPointEx(MxDrawXLib::IMxDrawPoint* pVal, int lDataType)
{
    void *_a[] = {0, (void*)&pVal, (void*)&lDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void MxDrawResbuf::AddString(const QString& pszVal)
{
    void *_a[] = {0, (void*)&pszVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void MxDrawResbuf::AddStringEx(const QString& pszVal)
{
    void *_a[] = {0, (void*)&pszVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void MxDrawResbuf::AddStringEx(const QString& pszVal, int lDataType)
{
    void *_a[] = {0, (void*)&pszVal, (void*)&lDataType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline double MxDrawResbuf::AtDouble(int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int MxDrawResbuf::AtLong(int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawResbuf::AtObject(int lItem)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline qlonglong MxDrawResbuf::AtObjectId(int lItem)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawResbuf::AtPoint(int lItem)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QString MxDrawResbuf::AtString(int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline int MxDrawResbuf::ItemDataType(int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline void MxDrawResbuf::PrintData()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void MxDrawResbuf::Remove(int lItem)
{
    void *_a[] = {0, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void MxDrawResbuf::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}


inline bool MxDrawDictionaryIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDictionaryIterator::GetObject()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QString MxDrawDictionaryIterator::Name()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void MxDrawDictionaryIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline double MxDrawMatrix3d::Det()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline double MxDrawMatrix3d::Get(int iRow, int iCol)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iRow, (void*)&iCol};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawMatrix3d::GetCoordSystem(MxDrawXLib::IMxDrawPoint** ppOrigin, MxDrawXLib::IMxDrawVector3d** ppXAxis, MxDrawXLib::IMxDrawVector3d** ppYAxis, MxDrawXLib::IMxDrawVector3d** ppZAxis)
{
    void *_a[] = {0, (void*)&ppOrigin, (void*)&ppXAxis, (void*)&ppYAxis, (void*)&ppZAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawMatrix3d::GetCoordSystem2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void MxDrawMatrix3d::Invert()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline bool MxDrawMatrix3d::IsEqualTo(MxDrawXLib::IMxDrawMatrix3d* pMat)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pMat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool MxDrawMatrix3d::IsScaledOrtho()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawMatrix3d::IsSingular(double dTol)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dTol};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool MxDrawMatrix3d::IsUniScaledOrtho()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawMatrix3d::Mirroring(MxDrawXLib::IMxDrawPoint* pPt1, MxDrawXLib::IMxDrawPoint* pPt2)
{
    void *_a[] = {0, (void*)&pPt1, (void*)&pPt2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void MxDrawMatrix3d::PostMultBy(MxDrawXLib::IMxDrawMatrix3d* pRightSide)
{
    void *_a[] = {0, (void*)&pRightSide};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void MxDrawMatrix3d::PreMultBy(MxDrawXLib::IMxDrawMatrix3d* pLeftSide)
{
    void *_a[] = {0, (void*)&pLeftSide};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void MxDrawMatrix3d::Rotation(double dAng, MxDrawXLib::IMxDrawVector3d* pAxis, MxDrawXLib::IMxDrawPoint* pCenter)
{
    void *_a[] = {0, (void*)&dAng, (void*)&pAxis, (void*)&pCenter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void MxDrawMatrix3d::Scaling(double dScaleAll, MxDrawXLib::IMxDrawPoint* pCenter)
{
    void *_a[] = {0, (void*)&dScaleAll, (void*)&pCenter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void MxDrawMatrix3d::Set(int iRow, int iCol, double dVal)
{
    void *_a[] = {0, (void*)&iRow, (void*)&iCol, (void*)&dVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void MxDrawMatrix3d::SetCoordSystem(MxDrawXLib::IMxDrawPoint* pOrigin, MxDrawXLib::IMxDrawVector3d* pXAxis, MxDrawXLib::IMxDrawVector3d* pYAxis, MxDrawXLib::IMxDrawVector3d* pZAxis)
{
    void *_a[] = {0, (void*)&pOrigin, (void*)&pXAxis, (void*)&pYAxis, (void*)&pZAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void MxDrawMatrix3d::SetToIdentity()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void MxDrawMatrix3d::Translation(MxDrawXLib::IMxDrawVector3d* pVector3d)
{
    void *_a[] = {0, (void*)&pVector3d};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void MxDrawMatrix3d::TransposeIt()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawDimStyleTable::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawDimStyleTable::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawDimStyleTable::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawDimStyleTable::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDimStyleTable::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDimStyleTable::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimStyleTable::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawDimStyleTable::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimStyleTable::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawDimStyleTableRecord* MxDrawDimStyleTable::Add(const QString& pszName)
{
    MxDrawXLib::IMxDrawDimStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord*>("IMxDrawDimStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord>("IMxDrawDimStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDimStyleTable::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawDimStyleTable::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawDimStyleTable::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline MxDrawXLib::IMxDrawDimStyleTableRecord* MxDrawDimStyleTable::GetAt(const QString& pName)
{
    MxDrawXLib::IMxDrawDimStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord*>("IMxDrawDimStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord>("IMxDrawDimStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimStyleTableRecord* MxDrawDimStyleTable::GetAt(const QString& pName, bool isGetErased)
{
    MxDrawXLib::IMxDrawDimStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord*>("IMxDrawDimStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord>("IMxDrawDimStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pName, (void*)&isGetErased};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDimStyleTable::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimStyleTable::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool MxDrawDimStyleTable::Has(const QString& pName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimStyleTableIterator* MxDrawDimStyleTable::NewIterator()
{
    MxDrawXLib::IMxDrawDimStyleTableIterator* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableIterator*>("IMxDrawDimStyleTableIterator*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableIterator>("IMxDrawDimStyleTableIterator", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool MxDrawDimStyleTable::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawDimStyleTableRecord::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawDimStyleTableRecord::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawDimStyleTableRecord::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline qlonglong MxDrawDimStyleTableRecord::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawDimStyleTableRecord::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimStyleTableRecord::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawDimStyleTableRecord::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline qlonglong MxDrawDimStyleTableRecord::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimStyleTableRecord::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawDimStyleTableRecord::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawDimStyleTableRecord::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawDimStyleTableRecord::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MxDrawDimStyleTableRecord::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawDimStyleTableRecord::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline double MxDrawDimStyleTableRecord::GetDimVarDouble(int iType)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int MxDrawDimStyleTableRecord::GetDimVarInt(int iType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline qlonglong MxDrawDimStyleTableRecord::GetDimVarObjectId(int iType)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QString MxDrawDimStyleTableRecord::GetDimVarString(int iType)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawDimStyleTableRecord::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawDimStyleTableRecord::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawDimStyleTableRecord::SetDimVarDouble(int iType, double dValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&dValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void MxDrawDimStyleTableRecord::SetDimVarInt(int iType, int iValue)
{
    void *_a[] = {0, (void*)&iType, (void*)&iValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void MxDrawDimStyleTableRecord::SetDimVarObjectId(int iType, qlonglong lId)
{
    void *_a[] = {0, (void*)&iType, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void MxDrawDimStyleTableRecord::SetDimVarString(int iType, const QString& value)
{
    void *_a[] = {0, (void*)&iType, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline bool MxDrawDimStyleTableRecord::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}


inline bool MxDrawDimStyleTableIterator::Done()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimStyleTableRecord* MxDrawDimStyleTableIterator::GetRecord()
{
    MxDrawXLib::IMxDrawDimStyleTableRecord* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord*>("IMxDrawDimStyleTableRecord*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimStyleTableRecord>("IMxDrawDimStyleTableRecord", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawDimStyleTableIterator::Start()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void MxDrawDimStyleTableIterator::Start(bool atBeginning)
{
    void *_a[] = {0, (void*)&atBeginning};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawDimStyleTableIterator::Start(bool atBeginning, bool skipDeleted)
{
    void *_a[] = {0, (void*)&atBeginning, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void MxDrawDimStyleTableIterator::Step()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void MxDrawDimStyleTableIterator::Step(bool forward)
{
    void *_a[] = {0, (void*)&forward};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawDimStyleTableIterator::Step(bool forward, bool skipDeleted)
{
    void *_a[] = {0, (void*)&forward, (void*)&skipDeleted};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawEntityImp::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawEntityImp::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawEntityImp::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawEntityImp::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEntityImp::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawEntityImp::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawEntityImp::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawEntityImp::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEntityImp::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawEntityImp::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEntityImp::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawEntityImp::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawEntityImp::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawEntityImp::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawEntityImp::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawEntityImp::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawEntityImp::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawEntityImp::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawEntityImp::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawEntityImp::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawEntityImp::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawEntityImp::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawEntityImp::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawEntityImp::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawEntityImp::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawEntityImp::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawEntityImp::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawEntityImp::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawEntityImp::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawEntityImp::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawEntityImp::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawEntityImp::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawEntityImp::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawEntityImp::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawEntityImp::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawEntityImp::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawEntityImp::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawEntityImp::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawEntityImp::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawEntityImp::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawEntityImp::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawEntityImp::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double MxDrawEntityImp::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawEntityImp::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int MxDrawEntityImp::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawEntityImp::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString MxDrawEntityImp::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void MxDrawEntityImp::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawEntityImp::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawEntityImp::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void MxDrawEntityImp::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawEntityImp::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawEntityImp::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawEntityImp::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void MxDrawEntityImp::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool MxDrawEntityImp::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool MxDrawEntityImp::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool MxDrawEntityImp::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void MxDrawEntityImp::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawEntityImp::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawEntityImp::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawEntityImp::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawEntityImp::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEntityImp::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawEntityImp::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawEntityImp::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawEntityImp::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEntityImp::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawEntityImp::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEntityImp::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawEntityImp::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawEntityImp::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawEntityImp::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawEntityImp::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawEntityImp::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawEntityImp::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawEntityImp::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawEntityImp::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawEntityImp::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawEntityImp::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawEntityImp::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawEntityImp::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawEntityImp::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawEntityImp::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawEntityImp::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawEntityImp::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawEntityImp::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawEntityImp::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawEntityImp::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawEntityImp::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawEntityImp::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawEntityImp::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawEntityImp::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawEntityImp::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawEntityImp::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawEntityImp::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawEntityImp::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawEntityImp::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawEntityImp::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawEntityImp::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawEntityImp::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double IMxDrawEntityImp::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawEntityImp::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IMxDrawEntityImp::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawEntityImp::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString IMxDrawEntityImp::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IMxDrawEntityImp::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawEntityImp::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawEntityImp::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IMxDrawEntityImp::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawEntityImp::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawEntityImp::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawEntityImp::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void IMxDrawEntityImp::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool IMxDrawEntityImp::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool IMxDrawEntityImp::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool IMxDrawEntityImp::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void IMxDrawEntityImp::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}


inline QString MxDrawBinStream::ExParam() const
{
    QVariant qax_result = property("ExParam");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawBinStream::SetExParam(const QString& value){ setProperty("ExParam", QVariant(value)); }

inline void MxDrawBinStream::FreeMemory()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline uint MxDrawBinStream::GetByte(int lIndex)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int MxDrawBinStream::GetCount()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void MxDrawBinStream::MallocMemory(int lLen)
{
    void *_a[] = {0, (void*)&lLen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MxDrawBinStream::SetByte(int lIndex, uint value)
{
    void *_a[] = {0, (void*)&lIndex, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline QString IMxDrawBinStream::ExParam() const
{
    QVariant qax_result = property("ExParam");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawBinStream::SetExParam(const QString& value){ setProperty("ExParam", QVariant(value)); }

inline void IMxDrawBinStream::FreeMemory()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline uint IMxDrawBinStream::GetByte(int lIndex)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int IMxDrawBinStream::GetCount()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void IMxDrawBinStream::MallocMemory(int lLen)
{
    void *_a[] = {0, (void*)&lLen};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IMxDrawBinStream::SetByte(int lIndex, uint value)
{
    void *_a[] = {0, (void*)&lIndex, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline void MxDrawService::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline qlonglong MxDrawService::DrawImage(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFilePath)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&dScale, (void*)&dAng, (void*)&pszFilePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QString MxDrawService::GetCurrentLayout()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawService::GetDatabase()
{
    MxDrawXLib::IMxDrawDatabase* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void MxDrawService::MakeCurrent()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline bool MxDrawService::Open(const QString& pszFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool MxDrawService::SaveDwgFile(const QString& pFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawService::SetCurrentLayout(const QString& pszLayoutName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszLayoutName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void MxDrawService::SetViewColor(uint red, uint green, uint blue)
{
    void *_a[] = {0, (void*)&red, (void*)&green, (void*)&blue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline bool MxDrawService::WriteJpg(const QString& pszFileName, int lWidth, int lHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFileName, (void*)&lWidth, (void*)&lHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}


inline void IMxDrawService::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline qlonglong IMxDrawService::DrawImage(double dPosX, double dPosY, double dScale, double dAng, const QString& pszFilePath)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&dScale, (void*)&dAng, (void*)&pszFilePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QString IMxDrawService::GetCurrentLayout()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawService::GetDatabase()
{
    MxDrawXLib::IMxDrawDatabase* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void IMxDrawService::MakeCurrent()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline bool IMxDrawService::Open(const QString& pszFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool IMxDrawService::SaveDwgFile(const QString& pFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawService::SetCurrentLayout(const QString& pszLayoutName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszLayoutName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void IMxDrawService::SetViewColor(uint red, uint green, uint blue)
{
    void *_a[] = {0, (void*)&red, (void*)&green, (void*)&blue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline bool IMxDrawService::WriteJpg(const QString& pszFileName, int lWidth, int lHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFileName, (void*)&lWidth, (void*)&lHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType MxDrawUiPrString::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void MxDrawUiPrString::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline QString MxDrawUiPrString::defValue() const
{
    QVariant qax_result = property("defValue");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrString::setDefValue(const QString& value){ setProperty("defValue", QVariant(value)); }

inline bool MxDrawUiPrString::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrString::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString MxDrawUiPrString::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrString::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString MxDrawUiPrString::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrString::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* MxDrawUiPrString::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawUiPrString::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus MxDrawUiPrString::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawUiPrString::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString MxDrawUiPrString::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawUiPrString::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline QString MxDrawUiPrString::value()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType IMxDrawUiPrString::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void IMxDrawUiPrString::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline QString IMxDrawUiPrString::defValue() const
{
    QVariant qax_result = property("defValue");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrString::setDefValue(const QString& value){ setProperty("defValue", QVariant(value)); }

inline bool IMxDrawUiPrString::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrString::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString IMxDrawUiPrString::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrString::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString IMxDrawUiPrString::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrString::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* IMxDrawUiPrString::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawUiPrString::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus IMxDrawUiPrString::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawUiPrString::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString IMxDrawUiPrString::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawUiPrString::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline QString IMxDrawUiPrString::value()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType IMxDrawUiPrBase::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void IMxDrawUiPrBase::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline bool IMxDrawUiPrBase::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrBase::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString IMxDrawUiPrBase::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrBase::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString IMxDrawUiPrBase::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrBase::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* IMxDrawUiPrBase::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawUiPrBase::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus IMxDrawUiPrBase::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawUiPrBase::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString IMxDrawUiPrBase::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawUiPrBase::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline MxDrawXLib::McUiPrDynamicInputType MxDrawUiPrPoint::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void MxDrawUiPrPoint::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawUiPrPoint::basePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawUiPrPoint::setBasePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePoint", QVariant(typeId, &value));
}

inline bool MxDrawUiPrPoint::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrPoint::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString MxDrawUiPrPoint::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrPoint::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString MxDrawUiPrPoint::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrPoint::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* MxDrawUiPrPoint::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawUiPrPoint::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus MxDrawUiPrPoint::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawUiPrPoint::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString MxDrawUiPrPoint::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawUiPrPoint::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void MxDrawUiPrPoint::setUseBasePt(bool isUse)
{
    void *_a[] = {0, (void*)&isUse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline MxDrawXLib::IMxDrawPoint* MxDrawUiPrPoint::value()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType IMxDrawUiPrPoint::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void IMxDrawUiPrPoint::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawUiPrPoint::basePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawUiPrPoint::setBasePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePoint", QVariant(typeId, &value));
}

inline bool IMxDrawUiPrPoint::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrPoint::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString IMxDrawUiPrPoint::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrPoint::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString IMxDrawUiPrPoint::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrPoint::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* IMxDrawUiPrPoint::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawUiPrPoint::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus IMxDrawUiPrPoint::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawUiPrPoint::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString IMxDrawUiPrPoint::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawUiPrPoint::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IMxDrawUiPrPoint::setUseBasePt(bool isUse)
{
    void *_a[] = {0, (void*)&isUse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawUiPrPoint::value()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawCustomEntity::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCustomEntity::DragPoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("DragPoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawCustomEntity::SetDragPoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("DragPoint", QVariant(typeId, &value));
}

inline QString MxDrawCustomEntity::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString MxDrawCustomEntity::Guid() const
{
    QVariant qax_result = property("Guid");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCustomEntity::SetGuid(const QString& value){ setProperty("Guid", QVariant(value)); }

inline bool MxDrawCustomEntity::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawCustomEntity::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCustomEntity::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawCustomEntity::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawCustomEntity::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawCustomEntity::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCustomEntity::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawCustomEntity::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCustomEntity::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawCustomEntity::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawCustomEntity::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawCustomEntity::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawCustomEntity::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawCustomEntity::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawCustomEntity::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawCustomEntity::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawCustomEntity::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawCustomEntity::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawCustomEntity::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawCustomEntity::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawCustomEntity::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawCustomEntity::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawCustomEntity::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawCustomEntity::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawCustomEntity::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawCustomEntity::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawCustomEntity::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawCustomEntity::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void MxDrawCustomEntity::BeginSetValue()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawCustomEntity::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void MxDrawCustomEntity::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline IDispatch* MxDrawCustomEntity::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool MxDrawCustomEntity::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCustomEntity::Draw()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawCustomEntity::EntSetValue()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void MxDrawCustomEntity::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCustomEntity::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void MxDrawCustomEntity::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawCustomEntity::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline double MxDrawCustomEntity::GetDouble(const QString& pszName)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawCustomEntity::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline int MxDrawCustomEntity::GetLong(const QString& pszName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline qlonglong MxDrawCustomEntity::GetLongPtr(const QString& pszName)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCustomEntity::GetPoint(const QString& pszName)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCustomEntity::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline QString MxDrawCustomEntity::GetString(const QString& pszName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCustomEntity::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawCustomEntity::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline double MxDrawCustomEntity::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool MxDrawCustomEntity::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline int MxDrawCustomEntity::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline bool MxDrawCustomEntity::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline QString MxDrawCustomEntity::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline void MxDrawCustomEntity::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawCustomEntity::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool MxDrawCustomEntity::IsHave(const QString& pszName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline void MxDrawCustomEntity::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void MxDrawCustomEntity::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void MxDrawCustomEntity::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void MxDrawCustomEntity::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void MxDrawCustomEntity::SetDouble(const QString& pszName, double dV)
{
    void *_a[] = {0, (void*)&pszName, (void*)&dV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void MxDrawCustomEntity::SetLong(const QString& pszName, int lV)
{
    void *_a[] = {0, (void*)&pszName, (void*)&lV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void MxDrawCustomEntity::SetLongPtr(const QString& pszName, qlonglong lV)
{
    void *_a[] = {0, (void*)&pszName, (void*)&lV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void MxDrawCustomEntity::SetPoint(const QString& pszName, MxDrawXLib::IMxDrawPoint* pPoint)
{
    void *_a[] = {0, (void*)&pszName, (void*)&pPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline bool MxDrawCustomEntity::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void MxDrawCustomEntity::SetString(const QString& pszName, const QString& pszV)
{
    void *_a[] = {0, (void*)&pszName, (void*)&pszV};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void MxDrawCustomEntity::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline bool MxDrawCustomEntity::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool MxDrawCustomEntity::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline bool MxDrawCustomEntity::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline void MxDrawCustomEntity::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}


inline int MxDrawWorldDraw::Color() const
{
    QVariant qax_result = property("Color");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawWorldDraw::SetColor(int value){ setProperty("Color", QVariant(value)); }

inline QString MxDrawWorldDraw::DimStyle() const
{
    QVariant qax_result = property("DimStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawWorldDraw::SetDimStyle(const QString& value){ setProperty("DimStyle", QVariant(value)); }

inline int MxDrawWorldDraw::Draworder() const
{
    QVariant qax_result = property("Draworder");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawWorldDraw::SetDraworder(int value){ setProperty("Draworder", QVariant(value)); }

inline QString MxDrawWorldDraw::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawWorldDraw::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawWorldDraw::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawWorldDraw::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawWorldDraw::LineWidth() const
{
    QVariant qax_result = property("LineWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawWorldDraw::SetLineWidth(double value){ setProperty("LineWidth", QVariant(value)); }

inline double MxDrawWorldDraw::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawWorldDraw::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline QString MxDrawWorldDraw::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawWorldDraw::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline bool MxDrawWorldDraw::DrawArc(double dCenX, double dCenY, double dRadius, double dStartAng, double dEndAng)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dRadius, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawArc2(double dStartPointX, double dStartPointY, double dX, double dY, double dEndPointX, double dEndPointY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dX, (void*)&dY, (void*)&dEndPointX, (void*)&dEndPointY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dEndPointX, (void*)&dEndPointY, (void*)&dBulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawBlockReference(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale, double dAng)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dInsertPointX, (void*)&dInsertPointY, (void*)&psxBlkName, (void*)&dScale, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawCircle(double dCenX, double dCenY, double dRadius)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dRadius};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawEntity(MxDrawXLib::IMxDrawEntity* pEntity)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pEntity};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawImage(double dOriginX, double dOriginY, double dScale, double dAng, const QString& pszImageFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOriginX, (void*)&dOriginY, (void*)&dScale, (void*)&dAng, (void*)&pszImageFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawWorldDraw::DrawLine(double dX1, double dY1, double dX2, double dY2)
{
    void *_a[] = {0, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline bool MxDrawWorldDraw::DrawLines(MxDrawXLib::IMxDrawPoints* points)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawMText(double dInsertionPointX, double dInsertionPointY, double dHeight, const QString& pszText)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dInsertionPointX, (void*)&dInsertionPointY, (void*)&dHeight, (void*)&pszText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawPoint(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawPolyline(MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* sWdiths, MxDrawXLib::IMxDrawResbuf* eWidths, MxDrawXLib::IMxDrawResbuf* bulges)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&sWdiths, (void*)&eWidths, (void*)&bulges};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawPolyline2(MxDrawXLib::IMxDrawPoints* points, double dWidth)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&dWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawRay(double dX1, double dY1, double dX2, double dY2)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2, (void*)&dX3, (void*)&dY3, (void*)&dX4, (void*)&dY4};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawSpline(MxDrawXLib::IMxDrawPoints* points, double dStartTangentX, double dStartTangentY, double dEndTangentX, double dEndTangentY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&dStartTangentX, (void*)&dStartTangentY, (void*)&dEndTangentX, (void*)&dEndTangentY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation, (void*)&horizontalMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode, MxDrawXLib::McVerticalAlignment verticalMode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation, (void*)&horizontalMode, (void*)&verticalMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawWipeout(MxDrawXLib::IMxDrawPoints* points)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool MxDrawWorldDraw::DrawXline(double dX1, double dY1, double dX2, double dY2)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void MxDrawWorldDraw::SetColorIndex(int lIndex)
{
    void *_a[] = {0, (void*)&lIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}


inline int IMxDrawWorldDraw::Color() const
{
    QVariant qax_result = property("Color");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawWorldDraw::SetColor(int value){ setProperty("Color", QVariant(value)); }

inline QString IMxDrawWorldDraw::DimStyle() const
{
    QVariant qax_result = property("DimStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawWorldDraw::SetDimStyle(const QString& value){ setProperty("DimStyle", QVariant(value)); }

inline int IMxDrawWorldDraw::Draworder() const
{
    QVariant qax_result = property("Draworder");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawWorldDraw::SetDraworder(int value){ setProperty("Draworder", QVariant(value)); }

inline QString IMxDrawWorldDraw::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawWorldDraw::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawWorldDraw::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawWorldDraw::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawWorldDraw::LineWidth() const
{
    QVariant qax_result = property("LineWidth");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawWorldDraw::SetLineWidth(double value){ setProperty("LineWidth", QVariant(value)); }

inline double IMxDrawWorldDraw::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawWorldDraw::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline QString IMxDrawWorldDraw::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawWorldDraw::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline bool IMxDrawWorldDraw::DrawArc(double dCenX, double dCenY, double dRadius, double dStartAng, double dEndAng)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dRadius, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawArc2(double dStartPointX, double dStartPointY, double dX, double dY, double dEndPointX, double dEndPointY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dX, (void*)&dY, (void*)&dEndPointX, (void*)&dEndPointY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawArc3(double dStartPointX, double dStartPointY, double dEndPointX, double dEndPointY, double dBulge)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dStartPointX, (void*)&dStartPointY, (void*)&dEndPointX, (void*)&dEndPointY, (void*)&dBulge};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawBlockReference(double dInsertPointX, double dInsertPointY, const QString& psxBlkName, double dScale, double dAng)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dInsertPointX, (void*)&dInsertPointY, (void*)&psxBlkName, (void*)&dScale, (void*)&dAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawCircle(double dCenX, double dCenY, double dRadius)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dRadius};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawEllipse(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawEllipseArc(double dCenterX, double dCenterY, double dMajorAxisX, double dMajorAxisY, double dRadiusRatio, double dStartAng, double dEndAng)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenterX, (void*)&dCenterY, (void*)&dMajorAxisX, (void*)&dMajorAxisY, (void*)&dRadiusRatio, (void*)&dStartAng, (void*)&dEndAng};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawEntity(MxDrawXLib::IMxDrawEntity* pEntity)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pEntity};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawImage(double dOriginX, double dOriginY, double dScale, double dAng, const QString& pszImageFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dOriginX, (void*)&dOriginY, (void*)&dScale, (void*)&dAng, (void*)&pszImageFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawWorldDraw::DrawLine(double dX1, double dY1, double dX2, double dY2)
{
    void *_a[] = {0, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline bool IMxDrawWorldDraw::DrawLines(MxDrawXLib::IMxDrawPoints* points)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawMText(double dInsertionPointX, double dInsertionPointY, double dHeight, const QString& pszText)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dInsertionPointX, (void*)&dInsertionPointY, (void*)&dHeight, (void*)&pszText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawPoint(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawPolyline(MxDrawXLib::IMxDrawPoints* points, MxDrawXLib::IMxDrawResbuf* sWdiths, MxDrawXLib::IMxDrawResbuf* eWidths, MxDrawXLib::IMxDrawResbuf* bulges)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&sWdiths, (void*)&eWidths, (void*)&bulges};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawPolyline2(MxDrawXLib::IMxDrawPoints* points, double dWidth)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&dWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawRay(double dX1, double dY1, double dX2, double dY2)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawSolid(double dX1, double dY1, double dX2, double dY2, double dX3, double dY3, double dX4, double dY4)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2, (void*)&dX3, (void*)&dY3, (void*)&dX4, (void*)&dY4};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawSpline(MxDrawXLib::IMxDrawPoints* points, double dStartTangentX, double dStartTangentY, double dEndTangentX, double dEndTangentY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&points, (void*)&dStartTangentX, (void*)&dStartTangentY, (void*)&dEndTangentX, (void*)&dEndTangentY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation, (void*)&horizontalMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawText(double dPosX, double dPosY, const QString& pszText, double dHeight, double dRotation, MxDrawXLib::McHorizontalAlignment horizontalMode, MxDrawXLib::McVerticalAlignment verticalMode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dPosX, (void*)&dPosY, (void*)&pszText, (void*)&dHeight, (void*)&dRotation, (void*)&horizontalMode, (void*)&verticalMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawWipeout(MxDrawXLib::IMxDrawPoints* points)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&points};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool IMxDrawWorldDraw::DrawXline(double dX1, double dY1, double dX2, double dY2)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IMxDrawWorldDraw::SetColorIndex(int lIndex)
{
    void *_a[] = {0, (void*)&lIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}


inline bool MxDrawPrint::CorrectPrintPageMargin() const
{
    QVariant qax_result = property("CorrectPrintPageMargin");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawPrint::SetCorrectPrintPageMargin(bool value){ setProperty("CorrectPrintPageMargin", QVariant(value)); }

inline QString MxDrawPrint::DocName() const
{
    QVariant qax_result = property("DocName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPrint::SetDocName(const QString& value){ setProperty("DocName", QVariant(value)); }

inline int MxDrawPrint::Flag() const
{
    QVariant qax_result = property("Flag");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawPrint::SetFlag(int value){ setProperty("Flag", QVariant(value)); }

inline QString MxDrawPrint::LayoutName() const
{
    QVariant qax_result = property("LayoutName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPrint::SetLayoutName(const QString& value){ setProperty("LayoutName", QVariant(value)); }

inline QString MxDrawPrint::PaperName() const
{
    QVariant qax_result = property("PaperName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPrint::SetPaperName(const QString& value){ setProperty("PaperName", QVariant(value)); }

inline QString MxDrawPrint::PrintConfig() const
{
    QVariant qax_result = property("PrintConfig");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPrint::SetPrintConfig(const QString& value){ setProperty("PrintConfig", QVariant(value)); }

inline int MxDrawPrint::PrintDirection() const
{
    QVariant qax_result = property("PrintDirection");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawPrint::SetPrintDirection(int value){ setProperty("PrintDirection", QVariant(value)); }

inline bool MxDrawPrint::PrintLineWidth() const
{
    QVariant qax_result = property("PrintLineWidth");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawPrint::SetPrintLineWidth(bool value){ setProperty("PrintLineWidth", QVariant(value)); }

inline QString MxDrawPrint::PrintName() const
{
    QVariant qax_result = property("PrintName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawPrint::SetPrintName(const QString& value){ setProperty("PrintName", QVariant(value)); }

inline double MxDrawPrint::dBottomPageMargin() const
{
    QVariant qax_result = property("dBottomPageMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPrint::setDBottomPageMargin(double value){ setProperty("dBottomPageMargin", QVariant(value)); }

inline double MxDrawPrint::dLeftPageMargin() const
{
    QVariant qax_result = property("dLeftPageMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPrint::setDLeftPageMargin(double value){ setProperty("dLeftPageMargin", QVariant(value)); }

inline double MxDrawPrint::dRightPageMargin() const
{
    QVariant qax_result = property("dRightPageMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPrint::setDRightPageMargin(double value){ setProperty("dRightPageMargin", QVariant(value)); }

inline double MxDrawPrint::dTopPageMargin() const
{
    QVariant qax_result = property("dTopPageMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawPrint::setDTopPageMargin(double value){ setProperty("dTopPageMargin", QVariant(value)); }

inline bool MxDrawPrint::AddPageComment(const QString& sText, const QString& sFont, double iFontSize, int pos)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sText, (void*)&sFont, (void*)&iFontSize, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool MxDrawPrint::BatchPrintDialog(MxDrawXLib::IMxDrawResbuf* pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool MxDrawPrint::BeginNestedPrint()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline bool MxDrawPrint::EndNestedPrint()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawPrint::Print(double dX1, double dY1, double dX2, double dY2)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool MxDrawPrint::Print2(double dCenX, double dCenY, double dScale)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool MxDrawPrint::PrintAll()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawPrint::PrintDialog()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline bool MxDrawPrint::PrintHtml(bool isShowPrintDialog)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&isShowPrintDialog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline bool MxDrawPrint::PrintScreen()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void MxDrawPrint::SetData(MxDrawXLib::IMxDrawResbuf* pData)
{
    void *_a[] = {0, (void*)&pData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline bool MxDrawPrint::UseDefaultPageMargin(bool isUse)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&isUse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}


inline bool IMxDrawPrint::CorrectPrintPageMargin() const
{
    QVariant qax_result = property("CorrectPrintPageMargin");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawPrint::SetCorrectPrintPageMargin(bool value){ setProperty("CorrectPrintPageMargin", QVariant(value)); }

inline QString IMxDrawPrint::DocName() const
{
    QVariant qax_result = property("DocName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPrint::SetDocName(const QString& value){ setProperty("DocName", QVariant(value)); }

inline int IMxDrawPrint::Flag() const
{
    QVariant qax_result = property("Flag");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawPrint::SetFlag(int value){ setProperty("Flag", QVariant(value)); }

inline QString IMxDrawPrint::LayoutName() const
{
    QVariant qax_result = property("LayoutName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPrint::SetLayoutName(const QString& value){ setProperty("LayoutName", QVariant(value)); }

inline QString IMxDrawPrint::PaperName() const
{
    QVariant qax_result = property("PaperName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPrint::SetPaperName(const QString& value){ setProperty("PaperName", QVariant(value)); }

inline QString IMxDrawPrint::PrintConfig() const
{
    QVariant qax_result = property("PrintConfig");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPrint::SetPrintConfig(const QString& value){ setProperty("PrintConfig", QVariant(value)); }

inline int IMxDrawPrint::PrintDirection() const
{
    QVariant qax_result = property("PrintDirection");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawPrint::SetPrintDirection(int value){ setProperty("PrintDirection", QVariant(value)); }

inline bool IMxDrawPrint::PrintLineWidth() const
{
    QVariant qax_result = property("PrintLineWidth");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawPrint::SetPrintLineWidth(bool value){ setProperty("PrintLineWidth", QVariant(value)); }

inline QString IMxDrawPrint::PrintName() const
{
    QVariant qax_result = property("PrintName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawPrint::SetPrintName(const QString& value){ setProperty("PrintName", QVariant(value)); }

inline double IMxDrawPrint::dBottomPageMargin() const
{
    QVariant qax_result = property("dBottomPageMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPrint::setDBottomPageMargin(double value){ setProperty("dBottomPageMargin", QVariant(value)); }

inline double IMxDrawPrint::dLeftPageMargin() const
{
    QVariant qax_result = property("dLeftPageMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPrint::setDLeftPageMargin(double value){ setProperty("dLeftPageMargin", QVariant(value)); }

inline double IMxDrawPrint::dRightPageMargin() const
{
    QVariant qax_result = property("dRightPageMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPrint::setDRightPageMargin(double value){ setProperty("dRightPageMargin", QVariant(value)); }

inline double IMxDrawPrint::dTopPageMargin() const
{
    QVariant qax_result = property("dTopPageMargin");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawPrint::setDTopPageMargin(double value){ setProperty("dTopPageMargin", QVariant(value)); }

inline bool IMxDrawPrint::AddPageComment(const QString& sText, const QString& sFont, double iFontSize, int pos)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sText, (void*)&sFont, (void*)&iFontSize, (void*)&pos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool IMxDrawPrint::BatchPrintDialog(MxDrawXLib::IMxDrawResbuf* pParam)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool IMxDrawPrint::BeginNestedPrint()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline bool IMxDrawPrint::EndNestedPrint()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawPrint::Print(double dX1, double dY1, double dX2, double dY2)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX1, (void*)&dY1, (void*)&dX2, (void*)&dY2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IMxDrawPrint::Print2(double dCenX, double dCenY, double dScale)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dCenX, (void*)&dCenY, (void*)&dScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool IMxDrawPrint::PrintAll()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawPrint::PrintDialog()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline bool IMxDrawPrint::PrintHtml(bool isShowPrintDialog)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&isShowPrintDialog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline bool IMxDrawPrint::PrintScreen()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IMxDrawPrint::SetData(MxDrawXLib::IMxDrawResbuf* pData)
{
    void *_a[] = {0, (void*)&pData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline bool IMxDrawPrint::UseDefaultPageMargin(bool isUse)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&isUse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}


inline double MxDrawImageMark::Angle() const
{
    QVariant qax_result = property("Angle");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawImageMark::SetAngle(double value){ setProperty("Angle", QVariant(value)); }

inline MxDrawXLib::IMxDrawDatabase* MxDrawImageMark::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawImageMark::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawImageMark::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double MxDrawImageMark::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawImageMark::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline QString MxDrawImageMark::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawImageMark::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline QString MxDrawImageMark::ImageFile() const
{
    QVariant qax_result = property("ImageFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawImageMark::SetImageFile(const QString& value){ setProperty("ImageFile", QVariant(value)); }

inline qlonglong MxDrawImageMark::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawImageMark::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline bool MxDrawImageMark::IsCDCDraw() const
{
    QVariant qax_result = property("IsCDCDraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawImageMark::SetIsCDCDraw(bool value){ setProperty("IsCDCDraw", QVariant(value)); }

inline bool MxDrawImageMark::IsDrawFlag() const
{
    QVariant qax_result = property("IsDrawFlag");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawImageMark::SetIsDrawFlag(bool value){ setProperty("IsDrawFlag", QVariant(value)); }

inline QString MxDrawImageMark::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawImageMark::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawImageMark::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawImageMark::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawImageMark::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawImageMark::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawImageMark::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawImageMark::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawImageMark::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawImageMark::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawImageMark::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawImageMark::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawImageMark::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawImageMark::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawImageMark::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline double MxDrawImageMark::Scale() const
{
    QVariant qax_result = property("Scale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawImageMark::SetScale(double value){ setProperty("Scale", QVariant(value)); }

inline QString MxDrawImageMark::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawImageMark::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline double MxDrawImageMark::TextHeight() const
{
    QVariant qax_result = property("TextHeight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawImageMark::SetTextHeight(double value){ setProperty("TextHeight", QVariant(value)); }

inline QString MxDrawImageMark::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawImageMark::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawImageMark::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawImageMark::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline QString MxDrawImageMark::TwinkeImageFile() const
{
    QVariant qax_result = property("TwinkeImageFile");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawImageMark::SetTwinkeImageFile(const QString& value){ setProperty("TwinkeImageFile", QVariant(value)); }

inline bool MxDrawImageMark::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawImageMark::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline double MxDrawImageMark::Width() const
{
    QVariant qax_result = property("Width");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawImageMark::SetWidth(double value){ setProperty("Width", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawImageMark::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawImageMark::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawImageMark::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawImageMark::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void MxDrawImageMark::ClearImageData()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawImageMark::ClearTwinkeImageData()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawImageMark::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void MxDrawImageMark::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline IDispatch* MxDrawImageMark::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool MxDrawImageMark::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawImageMark::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawImageMark::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawImageMark::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawImageMark::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawImageMark::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawImageMark::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawImageMark::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawImageMark::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline double MxDrawImageMark::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawImageMark::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int MxDrawImageMark::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawImageMark::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline QString MxDrawImageMark::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawImageMark::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawImageMark::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void MxDrawImageMark::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawImageMark::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawImageMark::ReadImageData(const QString& pszFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool MxDrawImageMark::ReadTwinkeImageData(const QString& pszFiles)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszFiles};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline void MxDrawImageMark::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void MxDrawImageMark::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline bool MxDrawImageMark::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline void MxDrawImageMark::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline bool MxDrawImageMark::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline bool MxDrawImageMark::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool MxDrawImageMark::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void MxDrawImageMark::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}


inline MxDrawXLib::McUiPrDynamicInputType MxDrawUiPrBase::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void MxDrawUiPrBase::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline bool MxDrawUiPrBase::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrBase::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString MxDrawUiPrBase::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrBase::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString MxDrawUiPrBase::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrBase::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* MxDrawUiPrBase::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawUiPrBase::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus MxDrawUiPrBase::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawUiPrBase::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString MxDrawUiPrBase::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawUiPrBase::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline MxDrawXLib::McUiPrDynamicInputType MxDrawUiPrAngle::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void MxDrawUiPrAngle::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline MxDrawXLib::McUiPrMcUiPrAngleType MxDrawUiPrAngle::angleType() const
{
    QVariant qax_result = property("angleType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrMcUiPrAngleType*)qax_result.constData();
}
inline void MxDrawUiPrAngle::setAngleType(MxDrawXLib::McUiPrMcUiPrAngleType value){ setProperty("angleType", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawUiPrAngle::basePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawUiPrAngle::setBasePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePoint", QVariant(typeId, &value));
}

inline bool MxDrawUiPrAngle::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrAngle::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString MxDrawUiPrAngle::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrAngle::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString MxDrawUiPrAngle::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrAngle::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline int MxDrawUiPrAngle::precision() const
{
    QVariant qax_result = property("precision");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawUiPrAngle::setPrecision(int value){ setProperty("precision", QVariant(value)); }

inline int MxDrawUiPrAngle::unit() const
{
    QVariant qax_result = property("unit");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawUiPrAngle::setUnit(int value){ setProperty("unit", QVariant(value)); }

inline bool MxDrawUiPrAngle::useBasePt() const
{
    QVariant qax_result = property("useBasePt");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrAngle::setUseBasePt(bool value){ setProperty("useBasePt", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* MxDrawUiPrAngle::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawUiPrAngle::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus MxDrawUiPrAngle::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawUiPrAngle::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString MxDrawUiPrAngle::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawUiPrAngle::setDefault(double def, const QString& pszDefAngPrompt)
{
    void *_a[] = {0, (void*)&def, (void*)&pszDefAngPrompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void MxDrawUiPrAngle::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline double MxDrawUiPrAngle::value()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType IMxDrawUiPrAngle::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void IMxDrawUiPrAngle::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline MxDrawXLib::McUiPrMcUiPrAngleType IMxDrawUiPrAngle::angleType() const
{
    QVariant qax_result = property("angleType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrMcUiPrAngleType*)qax_result.constData();
}
inline void IMxDrawUiPrAngle::setAngleType(MxDrawXLib::McUiPrMcUiPrAngleType value){ setProperty("angleType", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawUiPrAngle::basePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawUiPrAngle::setBasePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePoint", QVariant(typeId, &value));
}

inline bool IMxDrawUiPrAngle::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrAngle::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString IMxDrawUiPrAngle::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrAngle::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString IMxDrawUiPrAngle::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrAngle::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline int IMxDrawUiPrAngle::precision() const
{
    QVariant qax_result = property("precision");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawUiPrAngle::setPrecision(int value){ setProperty("precision", QVariant(value)); }

inline int IMxDrawUiPrAngle::unit() const
{
    QVariant qax_result = property("unit");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawUiPrAngle::setUnit(int value){ setProperty("unit", QVariant(value)); }

inline bool IMxDrawUiPrAngle::useBasePt() const
{
    QVariant qax_result = property("useBasePt");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrAngle::setUseBasePt(bool value){ setProperty("useBasePt", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* IMxDrawUiPrAngle::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawUiPrAngle::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus IMxDrawUiPrAngle::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawUiPrAngle::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString IMxDrawUiPrAngle::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawUiPrAngle::setDefault(double def, const QString& pszDefAngPrompt)
{
    void *_a[] = {0, (void*)&def, (void*)&pszDefAngPrompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IMxDrawUiPrAngle::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline double IMxDrawUiPrAngle::value()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType MxDrawUiPrDist::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void MxDrawUiPrDist::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawUiPrDist::basePt() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePt");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawUiPrDist::setBasePt(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePt", QVariant(typeId, &value));
}

inline MxDrawXLib::McUiPrMcUiPrDoubleType MxDrawUiPrDist::distType() const
{
    QVariant qax_result = property("distType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrMcUiPrDoubleType*)qax_result.constData();
}
inline void MxDrawUiPrDist::setDistType(MxDrawXLib::McUiPrMcUiPrDoubleType value){ setProperty("distType", QVariant(value)); }

inline bool MxDrawUiPrDist::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrDist::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString MxDrawUiPrDist::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrDist::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString MxDrawUiPrDist::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrDist::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline int MxDrawUiPrDist::precision() const
{
    QVariant qax_result = property("precision");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawUiPrDist::setPrecision(int value){ setProperty("precision", QVariant(value)); }

inline bool MxDrawUiPrDist::useBasePt() const
{
    QVariant qax_result = property("useBasePt");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrDist::setUseBasePt(bool value){ setProperty("useBasePt", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* MxDrawUiPrDist::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawUiPrDist::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus MxDrawUiPrDist::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawUiPrDist::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString MxDrawUiPrDist::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawUiPrDist::setDefault(double def)
{
    void *_a[] = {0, (void*)&def};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void MxDrawUiPrDist::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void MxDrawUiPrDist::setRange(double dMin, double dMax)
{
    void *_a[] = {0, (void*)&dMin, (void*)&dMax};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline double MxDrawUiPrDist::value()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType IMxDrawUiPrDist::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void IMxDrawUiPrDist::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawUiPrDist::basePt() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePt");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawUiPrDist::setBasePt(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePt", QVariant(typeId, &value));
}

inline MxDrawXLib::McUiPrMcUiPrDoubleType IMxDrawUiPrDist::distType() const
{
    QVariant qax_result = property("distType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrMcUiPrDoubleType*)qax_result.constData();
}
inline void IMxDrawUiPrDist::setDistType(MxDrawXLib::McUiPrMcUiPrDoubleType value){ setProperty("distType", QVariant(value)); }

inline bool IMxDrawUiPrDist::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrDist::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString IMxDrawUiPrDist::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrDist::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString IMxDrawUiPrDist::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrDist::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline int IMxDrawUiPrDist::precision() const
{
    QVariant qax_result = property("precision");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawUiPrDist::setPrecision(int value){ setProperty("precision", QVariant(value)); }

inline bool IMxDrawUiPrDist::useBasePt() const
{
    QVariant qax_result = property("useBasePt");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrDist::setUseBasePt(bool value){ setProperty("useBasePt", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* IMxDrawUiPrDist::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawUiPrDist::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus IMxDrawUiPrDist::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawUiPrDist::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString IMxDrawUiPrDist::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawUiPrDist::setDefault(double def)
{
    void *_a[] = {0, (void*)&def};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IMxDrawUiPrDist::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IMxDrawUiPrDist::setRange(double dMin, double dMax)
{
    void *_a[] = {0, (void*)&dMin, (void*)&dMax};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline double IMxDrawUiPrDist::value()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType MxDrawUiPrDouble::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void MxDrawUiPrDouble::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline MxDrawXLib::McUiPrMcUiPrDoubleType MxDrawUiPrDouble::doubleType() const
{
    QVariant qax_result = property("doubleType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrMcUiPrDoubleType*)qax_result.constData();
}
inline void MxDrawUiPrDouble::setDoubleType(MxDrawXLib::McUiPrMcUiPrDoubleType value){ setProperty("doubleType", QVariant(value)); }

inline bool MxDrawUiPrDouble::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrDouble::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString MxDrawUiPrDouble::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrDouble::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString MxDrawUiPrDouble::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrDouble::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline int MxDrawUiPrDouble::precision() const
{
    QVariant qax_result = property("precision");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawUiPrDouble::setPrecision(int value){ setProperty("precision", QVariant(value)); }

inline int MxDrawUiPrDouble::unit() const
{
    QVariant qax_result = property("unit");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawUiPrDouble::setUnit(int value){ setProperty("unit", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* MxDrawUiPrDouble::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawUiPrDouble::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus MxDrawUiPrDouble::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawUiPrDouble::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString MxDrawUiPrDouble::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawUiPrDouble::setDefault(double def)
{
    void *_a[] = {0, (void*)&def};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawUiPrDouble::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void MxDrawUiPrDouble::setRange(double dMin, double dMax)
{
    void *_a[] = {0, (void*)&dMin, (void*)&dMax};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline double MxDrawUiPrDouble::value()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType IMxDrawUiPrDouble::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void IMxDrawUiPrDouble::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline MxDrawXLib::McUiPrMcUiPrDoubleType IMxDrawUiPrDouble::doubleType() const
{
    QVariant qax_result = property("doubleType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrMcUiPrDoubleType*)qax_result.constData();
}
inline void IMxDrawUiPrDouble::setDoubleType(MxDrawXLib::McUiPrMcUiPrDoubleType value){ setProperty("doubleType", QVariant(value)); }

inline bool IMxDrawUiPrDouble::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrDouble::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString IMxDrawUiPrDouble::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrDouble::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString IMxDrawUiPrDouble::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrDouble::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline int IMxDrawUiPrDouble::precision() const
{
    QVariant qax_result = property("precision");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawUiPrDouble::setPrecision(int value){ setProperty("precision", QVariant(value)); }

inline int IMxDrawUiPrDouble::unit() const
{
    QVariant qax_result = property("unit");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawUiPrDouble::setUnit(int value){ setProperty("unit", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* IMxDrawUiPrDouble::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawUiPrDouble::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus IMxDrawUiPrDouble::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawUiPrDouble::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString IMxDrawUiPrDouble::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawUiPrDouble::setDefault(double def)
{
    void *_a[] = {0, (void*)&def};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawUiPrDouble::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IMxDrawUiPrDouble::setRange(double dMin, double dMax)
{
    void *_a[] = {0, (void*)&dMin, (void*)&dMax};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline double IMxDrawUiPrDouble::value()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType MxDrawUiPrEntity::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void MxDrawUiPrEntity::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline bool MxDrawUiPrEntity::filterLockedLayers() const
{
    QVariant qax_result = property("filterLockedLayers");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrEntity::setFilterLockedLayers(bool value){ setProperty("filterLockedLayers", QVariant(value)); }

inline bool MxDrawUiPrEntity::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrEntity::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString MxDrawUiPrEntity::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrEntity::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString MxDrawUiPrEntity::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrEntity::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawEntity* MxDrawUiPrEntity::Entity()
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawCustomEntity* MxDrawUiPrEntity::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawUiPrEntity::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline McUiPrStatus MxDrawUiPrEntity::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool MxDrawUiPrEntity::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QString MxDrawUiPrEntity::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawUiPrEntity::pickPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void MxDrawUiPrEntity::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void MxDrawUiPrEntity::setFilter(MxDrawXLib::IMxDrawResbuf* pFilter)
{
    void *_a[] = {0, (void*)&pFilter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}


inline MxDrawXLib::McUiPrDynamicInputType IMxDrawUiPrEntity::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void IMxDrawUiPrEntity::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline bool IMxDrawUiPrEntity::filterLockedLayers() const
{
    QVariant qax_result = property("filterLockedLayers");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrEntity::setFilterLockedLayers(bool value){ setProperty("filterLockedLayers", QVariant(value)); }

inline bool IMxDrawUiPrEntity::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrEntity::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString IMxDrawUiPrEntity::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrEntity::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString IMxDrawUiPrEntity::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrEntity::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawEntity* IMxDrawUiPrEntity::Entity()
{
    MxDrawXLib::IMxDrawEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity*>("IMxDrawEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEntity>("IMxDrawEntity", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawCustomEntity* IMxDrawUiPrEntity::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawUiPrEntity::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline McUiPrStatus IMxDrawUiPrEntity::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IMxDrawUiPrEntity::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QString IMxDrawUiPrEntity::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawUiPrEntity::pickPoint()
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void IMxDrawUiPrEntity::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IMxDrawUiPrEntity::setFilter(MxDrawXLib::IMxDrawResbuf* pFilter)
{
    void *_a[] = {0, (void*)&pFilter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}


inline MxDrawXLib::McUiPrDynamicInputType MxDrawUiPrInt::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void MxDrawUiPrInt::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline MxDrawXLib::McUiPrMcUiPrDoubleType MxDrawUiPrInt::intType() const
{
    QVariant qax_result = property("intType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrMcUiPrDoubleType*)qax_result.constData();
}
inline void MxDrawUiPrInt::setIntType(MxDrawXLib::McUiPrMcUiPrDoubleType value){ setProperty("intType", QVariant(value)); }

inline bool MxDrawUiPrInt::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrInt::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString MxDrawUiPrInt::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrInt::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString MxDrawUiPrInt::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrInt::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* MxDrawUiPrInt::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawUiPrInt::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus MxDrawUiPrInt::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawUiPrInt::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString MxDrawUiPrInt::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawUiPrInt::setDefault(int def)
{
    void *_a[] = {0, (void*)&def};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawUiPrInt::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void MxDrawUiPrInt::setRange(int lMin, int lMax)
{
    void *_a[] = {0, (void*)&lMin, (void*)&lMax};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline int MxDrawUiPrInt::value()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType IMxDrawUiPrInt::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void IMxDrawUiPrInt::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline MxDrawXLib::McUiPrMcUiPrDoubleType IMxDrawUiPrInt::intType() const
{
    QVariant qax_result = property("intType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrMcUiPrDoubleType*)qax_result.constData();
}
inline void IMxDrawUiPrInt::setIntType(MxDrawXLib::McUiPrMcUiPrDoubleType value){ setProperty("intType", QVariant(value)); }

inline bool IMxDrawUiPrInt::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrInt::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString IMxDrawUiPrInt::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrInt::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString IMxDrawUiPrInt::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrInt::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* IMxDrawUiPrInt::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawUiPrInt::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus IMxDrawUiPrInt::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawUiPrInt::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString IMxDrawUiPrInt::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawUiPrInt::setDefault(int def)
{
    void *_a[] = {0, (void*)&def};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawUiPrInt::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IMxDrawUiPrInt::setRange(int lMin, int lMax)
{
    void *_a[] = {0, (void*)&lMin, (void*)&lMax};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline int IMxDrawUiPrInt::value()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType MxDrawUiPrKeyWord::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void MxDrawUiPrKeyWord::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline bool MxDrawUiPrKeyWord::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawUiPrKeyWord::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString MxDrawUiPrKeyWord::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrKeyWord::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString MxDrawUiPrKeyWord::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawUiPrKeyWord::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* MxDrawUiPrKeyWord::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawUiPrKeyWord::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus MxDrawUiPrKeyWord::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawUiPrKeyWord::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString MxDrawUiPrKeyWord::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawUiPrKeyWord::setDefault(const QString& def, const QString& pszDefKeyPrompt)
{
    void *_a[] = {0, (void*)&def, (void*)&pszDefKeyPrompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void MxDrawUiPrKeyWord::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline QString MxDrawUiPrKeyWord::value()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}


inline MxDrawXLib::McUiPrDynamicInputType IMxDrawUiPrKeyWord::DynamicInputType() const
{
    QVariant qax_result = property("DynamicInputType");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McUiPrDynamicInputType*)qax_result.constData();
}
inline void IMxDrawUiPrKeyWord::SetDynamicInputType(MxDrawXLib::McUiPrDynamicInputType value){ setProperty("DynamicInputType", QVariant(value)); }

inline bool IMxDrawUiPrKeyWord::isAllowNone() const
{
    QVariant qax_result = property("isAllowNone");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawUiPrKeyWord::setIsAllowNone(bool value){ setProperty("isAllowNone", QVariant(value)); }

inline QString IMxDrawUiPrKeyWord::keyWords() const
{
    QVariant qax_result = property("keyWords");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrKeyWord::setKeyWords(const QString& value){ setProperty("keyWords", QVariant(value)); }

inline QString IMxDrawUiPrKeyWord::message() const
{
    QVariant qax_result = property("message");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawUiPrKeyWord::setMessage(const QString& value){ setProperty("message", QVariant(value)); }

inline MxDrawXLib::IMxDrawCustomEntity* IMxDrawUiPrKeyWord::InitUserDraw(const QString& sGuid)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&sGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawUiPrKeyWord::getExData()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline McUiPrStatus IMxDrawUiPrKeyWord::go()
{
    McUiPrStatus qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawUiPrKeyWord::isKeyWordPicked(const QString& matchKeyWord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&matchKeyWord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString IMxDrawUiPrKeyWord::keyWordPicked()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawUiPrKeyWord::setDefault(const QString& def, const QString& pszDefKeyPrompt)
{
    void *_a[] = {0, (void*)&def, (void*)&pszDefKeyPrompt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IMxDrawUiPrKeyWord::setExData(MxDrawXLib::IMxDrawResbuf* pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline QString IMxDrawUiPrKeyWord::value()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawPoints* MxDrawCompare::Bound() const
{
    MxDrawXLib::IMxDrawPoints* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_pointer);
    QVariant qax_result = property("Bound");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoints**)qax_result.constData();
}
inline void MxDrawCompare::SetBound(MxDrawXLib::IMxDrawPoints* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("MxDrawXLib::IMxDrawPoints*", &value);
    setProperty("Bound", QVariant(typeId, &value));
}

inline bool MxDrawCompare::Do(MxDrawXLib::IMxDrawDatabase* pSrc, MxDrawXLib::IMxDrawDatabase* pNew)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pSrc, (void*)&pNew};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool MxDrawCompare::Do(MxDrawXLib::IMxDrawDatabase* pSrc, MxDrawXLib::IMxDrawDatabase* pNew, MxDrawXLib::IMxDrawResbuf* filterData)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pSrc, (void*)&pNew, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawCompare::DrawFlag(double dScale, bool isNew)
{
    void *_a[] = {0, (void*)&dScale, (void*)&isNew};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawCompare::GetCurveIdsOfTheDifferent()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawCompare::GetIsErase(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawCompare::GetPos(qlonglong lId)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void MxDrawCompare::SetTheOffsetMatrix(MxDrawXLib::IMxDrawMatrix3d* pMatrix)
{
    void *_a[] = {0, (void*)&pMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline MxDrawXLib::IMxDrawPoints* IMxDrawCompare::Bound() const
{
    MxDrawXLib::IMxDrawPoints* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_pointer);
    QVariant qax_result = property("Bound");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoints**)qax_result.constData();
}
inline void IMxDrawCompare::SetBound(MxDrawXLib::IMxDrawPoints* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("MxDrawXLib::IMxDrawPoints*", &value);
    setProperty("Bound", QVariant(typeId, &value));
}

inline bool IMxDrawCompare::Do(MxDrawXLib::IMxDrawDatabase* pSrc, MxDrawXLib::IMxDrawDatabase* pNew)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pSrc, (void*)&pNew};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool IMxDrawCompare::Do(MxDrawXLib::IMxDrawDatabase* pSrc, MxDrawXLib::IMxDrawDatabase* pNew, MxDrawXLib::IMxDrawResbuf* filterData)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pSrc, (void*)&pNew, (void*)&filterData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawCompare::DrawFlag(double dScale, bool isNew)
{
    void *_a[] = {0, (void*)&dScale, (void*)&isNew};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawCompare::GetCurveIdsOfTheDifferent()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawCompare::GetIsErase(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawCompare::GetPos(qlonglong lId)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IMxDrawCompare::SetTheOffsetMatrix(MxDrawXLib::IMxDrawMatrix3d* pMatrix)
{
    void *_a[] = {0, (void*)&pMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline void MxDrawModifyTheColor::Do(MxDrawXLib::IMxDrawDatabase* pDatabase, int lRGB)
{
    void *_a[] = {0, (void*)&pDatabase, (void*)&lRGB};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void MxDrawModifyTheColor::DoEntity(MxDrawXLib::IMxDrawResbuf* pEntitys, int lRGB)
{
    void *_a[] = {0, (void*)&pEntitys, (void*)&lRGB};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawModifyTheColor::Restore()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline void IMxDrawModifyTheColor::Do(MxDrawXLib::IMxDrawDatabase* pDatabase, int lRGB)
{
    void *_a[] = {0, (void*)&pDatabase, (void*)&lRGB};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IMxDrawModifyTheColor::DoEntity(MxDrawXLib::IMxDrawResbuf* pEntitys, int lRGB)
{
    void *_a[] = {0, (void*)&pEntitys, (void*)&lRGB};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawModifyTheColor::Restore()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline int MxDrawComment::ArrowType() const
{
    QVariant qax_result = property("ArrowType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawComment::SetArrowType(int value){ setProperty("ArrowType", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoints* MxDrawComment::Bounding() const
{
    MxDrawXLib::IMxDrawPoints* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_pointer);
    QVariant qax_result = property("Bounding");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoints**)qax_result.constData();
}
inline void MxDrawComment::SetBounding(MxDrawXLib::IMxDrawPoints* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("MxDrawXLib::IMxDrawPoints*", &value);
    setProperty("Bounding", QVariant(typeId, &value));
}

inline int MxDrawComment::BoundingBoxType() const
{
    QVariant qax_result = property("BoundingBoxType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawComment::SetBoundingBoxType(int value){ setProperty("BoundingBoxType", QVariant(value)); }

inline MxDrawXLib::IMxDrawDatabase* MxDrawComment::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawComment::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int MxDrawComment::EdgeNumber() const
{
    QVariant qax_result = property("EdgeNumber");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void MxDrawComment::SetEdgeNumber(int value){ setProperty("EdgeNumber", QVariant(value)); }

inline bool MxDrawComment::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawComment::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawComment::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawComment::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawComment::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawComment::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawComment::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawComment::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawComment::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawComment::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawComment::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawComment::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawComment::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawComment::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawComment::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawComment::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawComment::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawComment::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* MxDrawComment::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawComment::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline double MxDrawComment::ShapRadius() const
{
    QVariant qax_result = property("ShapRadius");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawComment::SetShapRadius(double value){ setProperty("ShapRadius", QVariant(value)); }

inline QString MxDrawComment::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawComment::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline double MxDrawComment::TextHeight() const
{
    QVariant qax_result = property("TextHeight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawComment::SetTextHeight(double value){ setProperty("TextHeight", QVariant(value)); }

inline QString MxDrawComment::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawComment::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawComment::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawComment::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawComment::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawComment::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* MxDrawComment::basePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawComment::setBasePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePoint", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor MxDrawComment::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawComment::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawComment::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawComment::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawComment::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawComment::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawComment::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawComment::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawComment::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawComment::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawComment::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawComment::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawComment::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawComment::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawComment::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawComment::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double MxDrawComment::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawComment::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int MxDrawComment::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawComment::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString MxDrawComment::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void MxDrawComment::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawComment::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawComment::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void MxDrawComment::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawComment::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawComment::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawComment::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline void MxDrawComment::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline bool MxDrawComment::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool MxDrawComment::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline bool MxDrawComment::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void MxDrawComment::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}


inline int IMxDrawComment::ArrowType() const
{
    QVariant qax_result = property("ArrowType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawComment::SetArrowType(int value){ setProperty("ArrowType", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoints* IMxDrawComment::Bounding() const
{
    MxDrawXLib::IMxDrawPoints* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_pointer);
    QVariant qax_result = property("Bounding");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoints**)qax_result.constData();
}
inline void IMxDrawComment::SetBounding(MxDrawXLib::IMxDrawPoints* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("MxDrawXLib::IMxDrawPoints*", &value);
    setProperty("Bounding", QVariant(typeId, &value));
}

inline int IMxDrawComment::BoundingBoxType() const
{
    QVariant qax_result = property("BoundingBoxType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawComment::SetBoundingBoxType(int value){ setProperty("BoundingBoxType", QVariant(value)); }

inline MxDrawXLib::IMxDrawDatabase* IMxDrawComment::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawComment::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IMxDrawComment::EdgeNumber() const
{
    QVariant qax_result = property("EdgeNumber");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IMxDrawComment::SetEdgeNumber(int value){ setProperty("EdgeNumber", QVariant(value)); }

inline bool IMxDrawComment::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawComment::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawComment::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawComment::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawComment::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawComment::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawComment::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawComment::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawComment::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawComment::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawComment::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawComment::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawComment::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawComment::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawComment::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawComment::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawComment::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawComment::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawComment::Position() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Position");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawComment::SetPosition(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Position", QVariant(typeId, &value));
}

inline double IMxDrawComment::ShapRadius() const
{
    QVariant qax_result = property("ShapRadius");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawComment::SetShapRadius(double value){ setProperty("ShapRadius", QVariant(value)); }

inline QString IMxDrawComment::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawComment::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline double IMxDrawComment::TextHeight() const
{
    QVariant qax_result = property("TextHeight");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawComment::SetTextHeight(double value){ setProperty("TextHeight", QVariant(value)); }

inline QString IMxDrawComment::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawComment::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawComment::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawComment::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawComment::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawComment::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::IMxDrawPoint* IMxDrawComment::basePoint() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("basePoint");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawComment::setBasePoint(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("basePoint", QVariant(typeId, &value));
}

inline MxDrawXLib::McColor IMxDrawComment::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawComment::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawComment::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawComment::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawComment::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawComment::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawComment::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawComment::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawComment::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawComment::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawComment::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawComment::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawComment::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawComment::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawComment::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawComment::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double IMxDrawComment::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawComment::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IMxDrawComment::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawComment::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString IMxDrawComment::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IMxDrawComment::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawComment::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawComment::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IMxDrawComment::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawComment::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawComment::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawComment::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline void IMxDrawComment::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline bool IMxDrawComment::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool IMxDrawComment::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline bool IMxDrawComment::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void IMxDrawComment::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}


inline MxDrawXLib::IMxDrawArc* MxDrawChange::ToArc(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawArc* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawArc*>("IMxDrawArc*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawArc>("IMxDrawArc", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawAttribute* MxDrawChange::ToAttribute(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawAttribute* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute*>("IMxDrawAttribute*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute>("IMxDrawAttribute", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockReference* MxDrawChange::ToBlockReference(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawBlockReference* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference*>("IMxDrawBlockReference*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference>("IMxDrawBlockReference", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawCircle* MxDrawChange::ToCircle(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawCircle* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCircle*>("IMxDrawCircle*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCircle>("IMxDrawCircle", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawCustomEntity* MxDrawChange::ToCustomEntity(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimAligned* MxDrawChange::ToDimAligned(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawDimAligned* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAligned*>("IMxDrawDimAligned*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAligned>("IMxDrawDimAligned", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimAngular* MxDrawChange::ToDimAngular(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawDimAngular* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAngular*>("IMxDrawDimAngular*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAngular>("IMxDrawDimAngular", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimDiametric* MxDrawChange::ToDimDiametric(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawDimDiametric* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimDiametric*>("IMxDrawDimDiametric*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimDiametric>("IMxDrawDimDiametric", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimRadial* MxDrawChange::ToDimRadial(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawDimRadial* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRadial*>("IMxDrawDimRadial*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRadial>("IMxDrawDimRadial", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimRotated* MxDrawChange::ToDimRotated(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawDimRotated* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRotated*>("IMxDrawDimRotated*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRotated>("IMxDrawDimRotated", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimension* MxDrawChange::ToDimension(MxDrawXLib::IMxDrawEntity* ppIn)
{
    MxDrawXLib::IMxDrawDimension* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimension*>("IMxDrawDimension*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimension>("IMxDrawDimension", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ppIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEllipse* MxDrawChange::ToEllipse(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawEllipse* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse*>("IMxDrawEllipse*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse>("IMxDrawEllipse", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawHatch* MxDrawChange::ToHatch(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawHatch* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawHatch*>("IMxDrawHatch*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawHatch>("IMxDrawHatch", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawImageMark* MxDrawChange::ToImageMark(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawImageMark* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawImageMark*>("IMxDrawImageMark*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawImageMark>("IMxDrawImageMark", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLine* MxDrawChange::ToLine(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawLine* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLine*>("IMxDrawLine*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLine>("IMxDrawLine", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMText* MxDrawChange::ToMText(MxDrawXLib::IMxDrawEntity* pEntity)
{
    MxDrawXLib::IMxDrawMText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMText*>("IMxDrawMText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMText>("IMxDrawMText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pEntity};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawComment* MxDrawChange::ToMxDrawComment(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawComment* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawComment*>("IMxDrawComment*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawComment>("IMxDrawComment", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPolyline* MxDrawChange::ToPolyline(MxDrawXLib::IMxDrawEntity* pEnt)
{
    MxDrawXLib::IMxDrawPolyline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline*>("IMxDrawPolyline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline>("IMxDrawPolyline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pEnt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawRasterImage* MxDrawChange::ToRasterImage(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawRasterImage* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage*>("IMxDrawRasterImage*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage>("IMxDrawRasterImage", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawRay* MxDrawChange::ToRay(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawRay* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawRay*>("IMxDrawRay*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawRay>("IMxDrawRay", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawSolid* MxDrawChange::ToSolid(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawSolid* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawSolid*>("IMxDrawSolid*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawSolid>("IMxDrawSolid", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawSpline* MxDrawChange::ToSpline(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawSpline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawSpline*>("IMxDrawSpline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawSpline>("IMxDrawSpline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawText* MxDrawChange::ToText(MxDrawXLib::IMxDrawEntity* pEntity)
{
    MxDrawXLib::IMxDrawText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawText*>("IMxDrawText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawText>("IMxDrawText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pEntity};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawXline* MxDrawChange::ToXline(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawXline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawXline*>("IMxDrawXline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawXline>("IMxDrawXline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* MxDrawChange::toPoint(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawArc* IMxDrawChange::ToArc(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawArc* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawArc*>("IMxDrawArc*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawArc>("IMxDrawArc", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawAttribute* IMxDrawChange::ToAttribute(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawAttribute* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute*>("IMxDrawAttribute*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawAttribute>("IMxDrawAttribute", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawBlockReference* IMxDrawChange::ToBlockReference(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawBlockReference* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference*>("IMxDrawBlockReference*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawBlockReference>("IMxDrawBlockReference", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawCircle* IMxDrawChange::ToCircle(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawCircle* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCircle*>("IMxDrawCircle*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCircle>("IMxDrawCircle", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawCustomEntity* IMxDrawChange::ToCustomEntity(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawCustomEntity* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity*>("IMxDrawCustomEntity*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawCustomEntity>("IMxDrawCustomEntity", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimAligned* IMxDrawChange::ToDimAligned(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawDimAligned* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAligned*>("IMxDrawDimAligned*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAligned>("IMxDrawDimAligned", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimAngular* IMxDrawChange::ToDimAngular(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawDimAngular* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAngular*>("IMxDrawDimAngular*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimAngular>("IMxDrawDimAngular", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimDiametric* IMxDrawChange::ToDimDiametric(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawDimDiametric* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimDiametric*>("IMxDrawDimDiametric*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimDiametric>("IMxDrawDimDiametric", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimRadial* IMxDrawChange::ToDimRadial(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawDimRadial* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRadial*>("IMxDrawDimRadial*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRadial>("IMxDrawDimRadial", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimRotated* IMxDrawChange::ToDimRotated(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawDimRotated* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRotated*>("IMxDrawDimRotated*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimRotated>("IMxDrawDimRotated", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDimension* IMxDrawChange::ToDimension(MxDrawXLib::IMxDrawEntity* ppIn)
{
    MxDrawXLib::IMxDrawDimension* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDimension*>("IMxDrawDimension*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDimension>("IMxDrawDimension", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ppIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawEllipse* IMxDrawChange::ToEllipse(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawEllipse* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse*>("IMxDrawEllipse*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawEllipse>("IMxDrawEllipse", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawHatch* IMxDrawChange::ToHatch(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawHatch* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawHatch*>("IMxDrawHatch*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawHatch>("IMxDrawHatch", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawImageMark* IMxDrawChange::ToImageMark(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawImageMark* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawImageMark*>("IMxDrawImageMark*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawImageMark>("IMxDrawImageMark", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawLine* IMxDrawChange::ToLine(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawLine* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawLine*>("IMxDrawLine*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawLine>("IMxDrawLine", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMText* IMxDrawChange::ToMText(MxDrawXLib::IMxDrawEntity* pEntity)
{
    MxDrawXLib::IMxDrawMText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMText*>("IMxDrawMText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMText>("IMxDrawMText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pEntity};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawComment* IMxDrawChange::ToMxDrawComment(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawComment* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawComment*>("IMxDrawComment*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawComment>("IMxDrawComment", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPolyline* IMxDrawChange::ToPolyline(MxDrawXLib::IMxDrawEntity* pEnt)
{
    MxDrawXLib::IMxDrawPolyline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline*>("IMxDrawPolyline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPolyline>("IMxDrawPolyline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pEnt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawRasterImage* IMxDrawChange::ToRasterImage(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawRasterImage* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage*>("IMxDrawRasterImage*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawRasterImage>("IMxDrawRasterImage", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawRay* IMxDrawChange::ToRay(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawRay* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawRay*>("IMxDrawRay*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawRay>("IMxDrawRay", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawSolid* IMxDrawChange::ToSolid(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawSolid* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawSolid*>("IMxDrawSolid*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawSolid>("IMxDrawSolid", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawSpline* IMxDrawChange::ToSpline(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawSpline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawSpline*>("IMxDrawSpline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawSpline>("IMxDrawSpline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawText* IMxDrawChange::ToText(MxDrawXLib::IMxDrawEntity* pEntity)
{
    MxDrawXLib::IMxDrawText* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawText*>("IMxDrawText*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawText>("IMxDrawText", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pEntity};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawXline* IMxDrawChange::ToXline(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawXline* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawXline*>("IMxDrawXline*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawXline>("IMxDrawXline", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawPoint* IMxDrawChange::toPoint(MxDrawXLib::IMxDrawEntity* pIn)
{
    MxDrawXLib::IMxDrawPoint* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawPoint* MxDrawQrCode::Center() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Center");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void MxDrawQrCode::SetCenter(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Center", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* MxDrawQrCode::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawQrCode::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawQrCode::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawQrCode::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawQrCode::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawQrCode::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawQrCode::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawQrCode::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawQrCode::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawQrCode::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawQrCode::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawQrCode::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawQrCode::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawQrCode::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawQrCode::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawQrCode::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawQrCode::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawQrCode::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawQrCode::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawQrCode::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double MxDrawQrCode::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawQrCode::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline double MxDrawQrCode::Scale() const
{
    QVariant qax_result = property("Scale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawQrCode::SetScale(double value){ setProperty("Scale", QVariant(value)); }

inline QString MxDrawQrCode::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawQrCode::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline QString MxDrawQrCode::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawQrCode::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawQrCode::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawQrCode::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawQrCode::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawQrCode::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawQrCode::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawQrCode::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawQrCode::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawQrCode::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawQrCode::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawQrCode::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawQrCode::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawQrCode::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawQrCode::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawQrCode::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawQrCode::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawQrCode::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawQrCode::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawQrCode::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawQrCode::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawQrCode::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double MxDrawQrCode::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawQrCode::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int MxDrawQrCode::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawQrCode::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString MxDrawQrCode::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void MxDrawQrCode::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawQrCode::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawQrCode::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void MxDrawQrCode::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawQrCode::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawQrCode::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawQrCode::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline void MxDrawQrCode::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool MxDrawQrCode::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool MxDrawQrCode::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline bool MxDrawQrCode::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline void MxDrawQrCode::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}


inline MxDrawXLib::IMxDrawPoint* IMxDrawQrCode::Center() const
{
    MxDrawXLib::IMxDrawPoint* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("IMxDrawPoint*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoint>("IMxDrawPoint", qax_pointer);
    QVariant qax_result = property("Center");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawPoint**)qax_result.constData();
}
inline void IMxDrawQrCode::SetCenter(MxDrawXLib::IMxDrawPoint* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawPoint*>("MxDrawXLib::IMxDrawPoint*", &value);
    setProperty("Center", QVariant(typeId, &value));
}

inline MxDrawXLib::IMxDrawDatabase* IMxDrawQrCode::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawQrCode::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawQrCode::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawQrCode::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawQrCode::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawQrCode::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawQrCode::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawQrCode::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawQrCode::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawQrCode::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawQrCode::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawQrCode::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawQrCode::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawQrCode::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawQrCode::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawQrCode::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawQrCode::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawQrCode::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawQrCode::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawQrCode::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline double IMxDrawQrCode::Rotation() const
{
    QVariant qax_result = property("Rotation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawQrCode::SetRotation(double value){ setProperty("Rotation", QVariant(value)); }

inline double IMxDrawQrCode::Scale() const
{
    QVariant qax_result = property("Scale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawQrCode::SetScale(double value){ setProperty("Scale", QVariant(value)); }

inline QString IMxDrawQrCode::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawQrCode::SetText(const QString& value){ setProperty("Text", QVariant(value)); }

inline QString IMxDrawQrCode::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawQrCode::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawQrCode::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawQrCode::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawQrCode::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawQrCode::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawQrCode::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawQrCode::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawQrCode::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawQrCode::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawQrCode::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawQrCode::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawQrCode::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawQrCode::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawQrCode::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawQrCode::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawQrCode::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawQrCode::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawQrCode::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawQrCode::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawQrCode::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawQrCode::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double IMxDrawQrCode::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawQrCode::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IMxDrawQrCode::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawQrCode::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString IMxDrawQrCode::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IMxDrawQrCode::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawQrCode::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawQrCode::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IMxDrawQrCode::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawQrCode::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawQrCode::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawQrCode::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline void IMxDrawQrCode::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool IMxDrawQrCode::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool IMxDrawQrCode::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline bool IMxDrawQrCode::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline void IMxDrawQrCode::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}


inline void MxDrawAnimation::Draw(qlonglong lId)
{
    void *_a[] = {0, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void MxDrawAnimation::Draw2(const QString& pszHandle)
{
    void *_a[] = {0, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MxDrawAnimation::EndDraw()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawAnimation::GetAnimationEntity(qlonglong lId)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawAnimation::GetAnimationEntity2(const QString& pszHandle)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawAnimation::InitAnimationEntity(MxDrawXLib::IMxDrawEntity* pEnt)
{
    void *_a[] = {0, (void*)&pEnt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void MxDrawAnimation::InitAnimationEntity2(const QString& pszHandle)
{
    void *_a[] = {0, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline bool MxDrawAnimation::Remove(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool MxDrawAnimation::Remove2(const QString& pszHandle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void MxDrawAnimation::SetTwinkeColor(MxDrawXLib::IMxDrawResbuf* colors)
{
    void *_a[] = {0, (void*)&colors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void MxDrawAnimation::SetTwinkeTime(int lTimer)
{
    void *_a[] = {0, (void*)&lTimer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void MxDrawAnimation::StartDraw()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline bool MxDrawAnimation::Stop(qlonglong lId, bool isStop)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&isStop};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool MxDrawAnimation::Stop2(const QString& pszHandle, bool isStop)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle, (void*)&isStop};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void MxDrawAnimation::StopAllTwinke()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline bool MxDrawAnimation::StopTwinke(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawAnimation::StopTwinke2(const QString& pszHandle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool MxDrawAnimation::Twinke(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool MxDrawAnimation::Twinke2(const QString& pszHandle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline bool MxDrawAnimation::TwinkeEx(qlonglong lId, int lCount)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&lCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool MxDrawAnimation::TwinkeEx2(const QString& pszHandle, int lCount)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle, (void*)&lCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}


inline void IMxDrawAnimation::Draw(qlonglong lId)
{
    void *_a[] = {0, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IMxDrawAnimation::Draw2(const QString& pszHandle)
{
    void *_a[] = {0, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IMxDrawAnimation::EndDraw()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawAnimation::GetAnimationEntity(qlonglong lId)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawAnimation::GetAnimationEntity2(const QString& pszHandle)
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawAnimation::InitAnimationEntity(MxDrawXLib::IMxDrawEntity* pEnt)
{
    void *_a[] = {0, (void*)&pEnt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IMxDrawAnimation::InitAnimationEntity2(const QString& pszHandle)
{
    void *_a[] = {0, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline bool IMxDrawAnimation::Remove(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IMxDrawAnimation::Remove2(const QString& pszHandle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IMxDrawAnimation::SetTwinkeColor(MxDrawXLib::IMxDrawResbuf* colors)
{
    void *_a[] = {0, (void*)&colors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IMxDrawAnimation::SetTwinkeTime(int lTimer)
{
    void *_a[] = {0, (void*)&lTimer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IMxDrawAnimation::StartDraw()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline bool IMxDrawAnimation::Stop(qlonglong lId, bool isStop)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&isStop};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool IMxDrawAnimation::Stop2(const QString& pszHandle, bool isStop)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle, (void*)&isStop};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void IMxDrawAnimation::StopAllTwinke()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline bool IMxDrawAnimation::StopTwinke(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawAnimation::StopTwinke2(const QString& pszHandle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool IMxDrawAnimation::Twinke(qlonglong lId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool IMxDrawAnimation::Twinke2(const QString& pszHandle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline bool IMxDrawAnimation::TwinkeEx(qlonglong lId, int lCount)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lId, (void*)&lCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool IMxDrawAnimation::TwinkeEx2(const QString& pszHandle, int lCount)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszHandle, (void*)&lCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}


inline MxDrawXLib::IMxDrawDatabase* MxDrawProxyEntity::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString MxDrawProxyEntity::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool MxDrawProxyEntity::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString MxDrawProxyEntity::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawProxyEntity::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong MxDrawProxyEntity::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong MxDrawProxyEntity::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawProxyEntity::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawProxyEntity::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString MxDrawProxyEntity::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawProxyEntity::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double MxDrawProxyEntity::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void MxDrawProxyEntity::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight MxDrawProxyEntity::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void MxDrawProxyEntity::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* MxDrawProxyEntity::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void MxDrawProxyEntity::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong MxDrawProxyEntity::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawProxyEntity::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong MxDrawProxyEntity::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString MxDrawProxyEntity::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void MxDrawProxyEntity::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* MxDrawProxyEntity::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void MxDrawProxyEntity::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool MxDrawProxyEntity::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void MxDrawProxyEntity::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor MxDrawProxyEntity::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void MxDrawProxyEntity::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString MxDrawProxyEntity::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString MxDrawProxyEntity::originalClassName() const
{
    QVariant qax_result = property("originalClassName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void MxDrawProxyEntity::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* MxDrawProxyEntity::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void MxDrawProxyEntity::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* MxDrawProxyEntity::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool MxDrawProxyEntity::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void MxDrawProxyEntity::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawProxyEntity::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void MxDrawProxyEntity::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawProxyEntity::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* MxDrawProxyEntity::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawProxyEntity::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* MxDrawProxyEntity::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool MxDrawProxyEntity::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double MxDrawProxyEntity::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool MxDrawProxyEntity::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int MxDrawProxyEntity::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool MxDrawProxyEntity::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString MxDrawProxyEntity::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void MxDrawProxyEntity::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* MxDrawProxyEntity::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void MxDrawProxyEntity::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void MxDrawProxyEntity::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void MxDrawProxyEntity::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void MxDrawProxyEntity::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool MxDrawProxyEntity::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void MxDrawProxyEntity::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool MxDrawProxyEntity::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool MxDrawProxyEntity::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool MxDrawProxyEntity::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void MxDrawProxyEntity::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}


inline MxDrawXLib::IMxDrawDatabase* IMxDrawProxyEntity::Database() const
{
    MxDrawXLib::IMxDrawDatabase* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase*>("IMxDrawDatabase*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawDatabase>("IMxDrawDatabase", qax_pointer);
    QVariant qax_result = property("Database");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawDatabase**)qax_result.constData();
}

inline QString IMxDrawProxyEntity::Dxf0() const
{
    QVariant qax_result = property("Dxf0");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IMxDrawProxyEntity::HasExtensionDictionary() const
{
    QVariant qax_result = property("HasExtensionDictionary");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IMxDrawProxyEntity::Hyperlinks() const
{
    QVariant qax_result = property("Hyperlinks");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawProxyEntity::SetHyperlinks(const QString& value){ setProperty("Hyperlinks", QVariant(value)); }

inline qlonglong IMxDrawProxyEntity::InteriorPoint() const
{
    QVariant qax_result = property("InteriorPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline qlonglong IMxDrawProxyEntity::InteriorTmpPoint() const
{
    QVariant qax_result = property("InteriorTmpPoint");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawProxyEntity::Layer() const
{
    QVariant qax_result = property("Layer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawProxyEntity::SetLayer(const QString& value){ setProperty("Layer", QVariant(value)); }

inline QString IMxDrawProxyEntity::LineType() const
{
    QVariant qax_result = property("LineType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawProxyEntity::SetLineType(const QString& value){ setProperty("LineType", QVariant(value)); }

inline double IMxDrawProxyEntity::LinetypeScale() const
{
    QVariant qax_result = property("LinetypeScale");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void IMxDrawProxyEntity::SetLinetypeScale(double value){ setProperty("LinetypeScale", QVariant(value)); }

inline MxDrawXLib::McLineWeight IMxDrawProxyEntity::Lineweight() const
{
    QVariant qax_result = property("Lineweight");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McLineWeight*)qax_result.constData();
}
inline void IMxDrawProxyEntity::SetLineweight(MxDrawXLib::McLineWeight value){ setProperty("Lineweight", QVariant(value)); }

inline MxDrawXLib::IMxDrawVector3d* IMxDrawProxyEntity::Normal() const
{
    MxDrawXLib::IMxDrawVector3d* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("IMxDrawVector3d*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawVector3d>("IMxDrawVector3d", qax_pointer);
    QVariant qax_result = property("Normal");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawVector3d**)qax_result.constData();
}
inline void IMxDrawProxyEntity::SetNormal(MxDrawXLib::IMxDrawVector3d* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawVector3d*>("MxDrawXLib::IMxDrawVector3d*", &value);
    setProperty("Normal", QVariant(typeId, &value));
}

inline qlonglong IMxDrawProxyEntity::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawProxyEntity::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline qlonglong IMxDrawProxyEntity::OwnerID() const
{
    QVariant qax_result = property("OwnerID");
    Q_ASSERT(qax_result.isValid());
    return *(qlonglong*)qax_result.constData();
}

inline QString IMxDrawProxyEntity::TextStyle() const
{
    QVariant qax_result = property("TextStyle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IMxDrawProxyEntity::SetTextStyle(const QString& value){ setProperty("TextStyle", QVariant(value)); }

inline MxDrawXLib::IMxDrawMcCmColor* IMxDrawProxyEntity::TrueColor() const
{
    MxDrawXLib::IMxDrawMcCmColor* qax_pointer = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("IMxDrawMcCmColor*", &qax_pointer);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor>("IMxDrawMcCmColor", qax_pointer);
    QVariant qax_result = property("TrueColor");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::IMxDrawMcCmColor**)qax_result.constData();
}
inline void IMxDrawProxyEntity::SetTrueColor(MxDrawXLib::IMxDrawMcCmColor* value){
    int typeId = qRegisterMetaType<MxDrawXLib::IMxDrawMcCmColor*>("MxDrawXLib::IMxDrawMcCmColor*", &value);
    setProperty("TrueColor", QVariant(typeId, &value));
}

inline bool IMxDrawProxyEntity::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IMxDrawProxyEntity::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline MxDrawXLib::McColor IMxDrawProxyEntity::colorIndex() const
{
    QVariant qax_result = property("colorIndex");
    Q_ASSERT(qax_result.isValid());
    return *(MxDrawXLib::McColor*)qax_result.constData();
}
inline void IMxDrawProxyEntity::setColorIndex(MxDrawXLib::McColor value){ setProperty("colorIndex", QVariant(value)); }

inline QString IMxDrawProxyEntity::handle() const
{
    QVariant qax_result = property("handle");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IMxDrawProxyEntity::originalClassName() const
{
    QVariant qax_result = property("originalClassName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void IMxDrawProxyEntity::AssertWriteEnabled()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline MxDrawXLib::IMxDrawMcDbObject* IMxDrawProxyEntity::Clone()
{
    MxDrawXLib::IMxDrawMcDbObject* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject*>("IMxDrawMcDbObject*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawMcDbObject>("IMxDrawMcDbObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IMxDrawProxyEntity::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IDispatch* IMxDrawProxyEntity::Copy()
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IMxDrawProxyEntity::DeleteXData(const QString& sAppName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IMxDrawProxyEntity::Erase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawProxyEntity::GetAllAppName()
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IMxDrawProxyEntity::GetBoundingBox(MxDrawXLib::IMxDrawPoint** minPoint, MxDrawXLib::IMxDrawPoint** maxPoint)
{
    void *_a[] = {0, (void*)&minPoint, (void*)&maxPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawProxyEntity::GetBoundingBox2()
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawDictionary* IMxDrawProxyEntity::GetExtensionDictionary()
{
    MxDrawXLib::IMxDrawDictionary* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary*>("IMxDrawDictionary*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawDictionary>("IMxDrawDictionary", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawProxyEntity::GetProp(const QString& pszName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pszName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline MxDrawXLib::IMxDrawResbuf* IMxDrawProxyEntity::GetXData(const QString& pAppName)
{
    MxDrawXLib::IMxDrawResbuf* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf*>("IMxDrawResbuf*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawResbuf>("IMxDrawResbuf", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pAppName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IMxDrawProxyEntity::GetxDataDouble(const QString& sAppName, int lItem, double& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double IMxDrawProxyEntity::GetxDataDouble2(const QString& sAppName, int lItem)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool IMxDrawProxyEntity::GetxDataLong(const QString& sAppName, int lItem, int& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IMxDrawProxyEntity::GetxDataLong2(const QString& sAppName, int lItem)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool IMxDrawProxyEntity::GetxDataString(const QString& sAppName, int lItem, QString& pRet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&pRet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QString IMxDrawProxyEntity::GetxDataString2(const QString& sAppName, int lItem)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void IMxDrawProxyEntity::Highlight(bool isHighlight)
{
    void *_a[] = {0, (void*)&isHighlight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline MxDrawXLib::IMxDrawPoints* IMxDrawProxyEntity::IntersectWith(IDispatch* pIntersectObject, MxDrawXLib::McExtendOption exOption)
{
    MxDrawXLib::IMxDrawPoints* qax_result = 0;
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints*>("IMxDrawPoints*", &qax_result);
    qRegisterMetaType<MxDrawXLib::IMxDrawPoints>("IMxDrawPoints", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pIntersectObject, (void*)&exOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void IMxDrawProxyEntity::Mirror(MxDrawXLib::IMxDrawPoint* point1, MxDrawXLib::IMxDrawPoint* point2)
{
    void *_a[] = {0, (void*)&point1, (void*)&point2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IMxDrawProxyEntity::Move(MxDrawXLib::IMxDrawPoint* fromPoint, MxDrawXLib::IMxDrawPoint* toPoint)
{
    void *_a[] = {0, (void*)&fromPoint, (void*)&toPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IMxDrawProxyEntity::Rotate(MxDrawXLib::IMxDrawPoint* basePoint, double dRotationAngle)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dRotationAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IMxDrawProxyEntity::ScaleEntity(MxDrawXLib::IMxDrawPoint* basePoint, double dScaleFactor)
{
    void *_a[] = {0, (void*)&basePoint, (void*)&dScaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline bool IMxDrawProxyEntity::SetProp(const QString& pszName, MxDrawXLib::IMxDrawResbuf* pVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pszName, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void IMxDrawProxyEntity::SetXData(MxDrawXLib::IMxDrawResbuf* pXData)
{
    void *_a[] = {0, (void*)&pXData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool IMxDrawProxyEntity::SetxDataDouble(const QString& sAppName, int lItem, double val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool IMxDrawProxyEntity::SetxDataLong(const QString& sAppName, int lItem, int val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool IMxDrawProxyEntity::SetxDataString(const QString& sAppName, int lItem, const QString& val)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sAppName, (void*)&lItem, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline void IMxDrawProxyEntity::TransformBy(MxDrawXLib::IMxDrawMatrix3d* transformationMatrix)
{
    void *_a[] = {0, (void*)&transformationMatrix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::_DMxDrawX, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::_DMxDrawX*>(t)->MxDrawXLib::_DMxDrawX::~_DMxDrawX();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::_DMxDrawX;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::_DMxDrawX*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::_DMxDrawX*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawX, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawX*>(t)->MxDrawXLib::MxDrawX::~MxDrawX();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawX;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawX*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawX*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawApplication, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawApplication*>(t)->MxDrawXLib::MxDrawApplication::~MxDrawApplication();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawApplication;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawApplication*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawApplication*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawApplication, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawApplication*>(t)->MxDrawXLib::IMxDrawApplication::~IMxDrawApplication();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawApplication;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawApplication*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawApplication*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDatabase, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDatabase*>(t)->MxDrawXLib::IMxDrawDatabase::~IMxDrawDatabase();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDatabase;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDatabase*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDatabase*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawMcRxObject, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawMcRxObject*>(t)->MxDrawXLib::IMxDrawMcRxObject::~IMxDrawMcRxObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawMcRxObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawMcRxObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawMcRxObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawResbuf, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawResbuf*>(t)->MxDrawXLib::IMxDrawResbuf::~IMxDrawResbuf();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawResbuf;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawResbuf*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawResbuf*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawPoint, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawPoint*>(t)->MxDrawXLib::IMxDrawPoint::~IMxDrawPoint();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawPoint;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawPoint*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawPoint*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawMatrix3d, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawMatrix3d*>(t)->MxDrawXLib::IMxDrawMatrix3d::~IMxDrawMatrix3d();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawMatrix3d;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawMatrix3d*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawMatrix3d*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawVector3d, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawVector3d*>(t)->MxDrawXLib::IMxDrawVector3d::~IMxDrawVector3d();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawVector3d;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawVector3d*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawVector3d*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawPoints, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawPoints*>(t)->MxDrawXLib::IMxDrawPoints::~IMxDrawPoints();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawPoints;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawPoints*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawPoints*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawMcDbObject, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawMcDbObject*>(t)->MxDrawXLib::IMxDrawMcDbObject::~IMxDrawMcDbObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawMcDbObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawMcDbObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawMcDbObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDictionary, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDictionary*>(t)->MxDrawXLib::IMxDrawDictionary::~IMxDrawDictionary();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDictionary;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDictionary*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDictionary*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawXRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawXRecord*>(t)->MxDrawXLib::IMxDrawXRecord::~IMxDrawXRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawXRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawXRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawXRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDictionaryIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDictionaryIterator*>(t)->MxDrawXLib::IMxDrawDictionaryIterator::~IMxDrawDictionaryIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDictionaryIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDictionaryIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDictionaryIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawBlockTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawBlockTableRecord*>(t)->MxDrawXLib::IMxDrawBlockTableRecord::~IMxDrawBlockTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawBlockTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawBlockTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawBlockTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawSymbolTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawSymbolTableRecord*>(t)->MxDrawXLib::IMxDrawSymbolTableRecord::~IMxDrawSymbolTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawSymbolTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawSymbolTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawSymbolTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawLine, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawLine*>(t)->MxDrawXLib::IMxDrawLine::~IMxDrawLine();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawLine;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawLine*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawLine*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawCurve, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawCurve*>(t)->MxDrawXLib::IMxDrawCurve::~IMxDrawCurve();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawCurve;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawCurve*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawCurve*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawEntity, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawEntity*>(t)->MxDrawXLib::IMxDrawEntity::~IMxDrawEntity();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawEntity;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawEntity*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawEntity*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawMcCmColor, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawMcCmColor*>(t)->MxDrawXLib::IMxDrawMcCmColor::~IMxDrawMcCmColor();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawMcCmColor;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawMcCmColor*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawMcCmColor*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawPolyline, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawPolyline*>(t)->MxDrawXLib::IMxDrawPolyline::~IMxDrawPolyline();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawPolyline;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawPolyline*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawPolyline*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawArc, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawArc*>(t)->MxDrawXLib::IMxDrawArc::~IMxDrawArc();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawArc;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawArc*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawArc*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawAttributeDefinition, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawAttributeDefinition*>(t)->MxDrawXLib::IMxDrawAttributeDefinition::~IMxDrawAttributeDefinition();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawAttributeDefinition;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawAttributeDefinition*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawAttributeDefinition*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawText, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawText*>(t)->MxDrawXLib::IMxDrawText::~IMxDrawText();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawText;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawText*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawText*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawCircle, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawCircle*>(t)->MxDrawXLib::IMxDrawCircle::~IMxDrawCircle();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawCircle;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawCircle*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawCircle*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDimAligned, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDimAligned*>(t)->MxDrawXLib::IMxDrawDimAligned::~IMxDrawDimAligned();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDimAligned;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDimAligned*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDimAligned*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDimension, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDimension*>(t)->MxDrawXLib::IMxDrawDimension::~IMxDrawDimension();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDimension;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDimension*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDimension*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDimAngular, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDimAngular*>(t)->MxDrawXLib::IMxDrawDimAngular::~IMxDrawDimAngular();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDimAngular;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDimAngular*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDimAngular*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDimDiametric, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDimDiametric*>(t)->MxDrawXLib::IMxDrawDimDiametric::~IMxDrawDimDiametric();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDimDiametric;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDimDiametric*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDimDiametric*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDimRotated, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDimRotated*>(t)->MxDrawXLib::IMxDrawDimRotated::~IMxDrawDimRotated();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDimRotated;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDimRotated*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDimRotated*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDimOrdinate, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDimOrdinate*>(t)->MxDrawXLib::IMxDrawDimOrdinate::~IMxDrawDimOrdinate();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDimOrdinate;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDimOrdinate*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDimOrdinate*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDimRadial, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDimRadial*>(t)->MxDrawXLib::IMxDrawDimRadial::~IMxDrawDimRadial();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDimRadial;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDimRadial*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDimRadial*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawEllipse, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawEllipse*>(t)->MxDrawXLib::IMxDrawEllipse::~IMxDrawEllipse();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawEllipse;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawEllipse*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawEllipse*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawMText, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawMText*>(t)->MxDrawXLib::IMxDrawMText::~IMxDrawMText();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawMText;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawMText*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawMText*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawPointEntity, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawPointEntity*>(t)->MxDrawXLib::IMxDrawPointEntity::~IMxDrawPointEntity();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawPointEntity;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawPointEntity*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawPointEntity*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawRay, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawRay*>(t)->MxDrawXLib::IMxDrawRay::~IMxDrawRay();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawRay;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawRay*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawRay*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawSolid, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawSolid*>(t)->MxDrawXLib::IMxDrawSolid::~IMxDrawSolid();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawSolid;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawSolid*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawSolid*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawSpline, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawSpline*>(t)->MxDrawXLib::IMxDrawSpline::~IMxDrawSpline();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawSpline;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawSpline*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawSpline*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawTolerance, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawTolerance*>(t)->MxDrawXLib::IMxDrawTolerance::~IMxDrawTolerance();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawTolerance;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawTolerance*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawTolerance*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawTrace, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawTrace*>(t)->MxDrawXLib::IMxDrawTrace::~IMxDrawTrace();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawTrace;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawTrace*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawTrace*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawXline, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawXline*>(t)->MxDrawXLib::IMxDrawXline::~IMxDrawXline();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawXline;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawXline*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawXline*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawBlockReference, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawBlockReference*>(t)->MxDrawXLib::IMxDrawBlockReference::~IMxDrawBlockReference();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawBlockReference;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawBlockReference*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawBlockReference*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawScale3d, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawScale3d*>(t)->MxDrawXLib::IMxDrawScale3d::~IMxDrawScale3d();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawScale3d;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawScale3d*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawScale3d*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawAttribute, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawAttribute*>(t)->MxDrawXLib::IMxDrawAttribute::~IMxDrawAttribute();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawAttribute;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawAttribute*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawAttribute*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawHatch, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawHatch*>(t)->MxDrawXLib::IMxDrawHatch::~IMxDrawHatch();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawHatch;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawHatch*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawHatch*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawLayout, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawLayout*>(t)->MxDrawXLib::IMxDrawLayout::~IMxDrawLayout();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawLayout;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawLayout*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawLayout*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawRasterImage, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawRasterImage*>(t)->MxDrawXLib::IMxDrawRasterImage::~IMxDrawRasterImage();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawRasterImage;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawRasterImage*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawRasterImage*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawBlockTableRecordIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawBlockTableRecordIterator*>(t)->MxDrawXLib::IMxDrawBlockTableRecordIterator::~IMxDrawBlockTableRecordIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawBlockTableRecordIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawBlockTableRecordIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawBlockTableRecordIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawImageMark, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawImageMark*>(t)->MxDrawXLib::IMxDrawImageMark::~IMxDrawImageMark();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawImageMark;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawImageMark*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawImageMark*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawBlockTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawBlockTable*>(t)->MxDrawXLib::IMxDrawBlockTable::~IMxDrawBlockTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawBlockTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawBlockTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawBlockTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawSymbolTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawSymbolTable*>(t)->MxDrawXLib::IMxDrawSymbolTable::~IMxDrawSymbolTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawSymbolTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawSymbolTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawSymbolTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawBlockTableIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawBlockTableIterator*>(t)->MxDrawXLib::IMxDrawBlockTableIterator::~IMxDrawBlockTableIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawBlockTableIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawBlockTableIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawBlockTableIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawLayerTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawLayerTable*>(t)->MxDrawXLib::IMxDrawLayerTable::~IMxDrawLayerTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawLayerTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawLayerTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawLayerTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawLayerTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawLayerTableRecord*>(t)->MxDrawXLib::IMxDrawLayerTableRecord::~IMxDrawLayerTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawLayerTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawLayerTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawLayerTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawLayerTableIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawLayerTableIterator*>(t)->MxDrawXLib::IMxDrawLayerTableIterator::~IMxDrawLayerTableIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawLayerTableIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawLayerTableIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawLayerTableIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawLinetypeTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawLinetypeTable*>(t)->MxDrawXLib::IMxDrawLinetypeTable::~IMxDrawLinetypeTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawLinetypeTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawLinetypeTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawLinetypeTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawLinetypeTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawLinetypeTableRecord*>(t)->MxDrawXLib::IMxDrawLinetypeTableRecord::~IMxDrawLinetypeTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawLinetypeTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawLinetypeTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawLinetypeTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawLinetypeTableIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawLinetypeTableIterator*>(t)->MxDrawXLib::IMxDrawLinetypeTableIterator::~IMxDrawLinetypeTableIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawLinetypeTableIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawLinetypeTableIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawLinetypeTableIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawTextStyleTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawTextStyleTable*>(t)->MxDrawXLib::IMxDrawTextStyleTable::~IMxDrawTextStyleTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawTextStyleTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawTextStyleTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawTextStyleTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawTextStyleTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawTextStyleTableRecord*>(t)->MxDrawXLib::IMxDrawTextStyleTableRecord::~IMxDrawTextStyleTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawTextStyleTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawTextStyleTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawTextStyleTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawTextStyleTableIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawTextStyleTableIterator*>(t)->MxDrawXLib::IMxDrawTextStyleTableIterator::~IMxDrawTextStyleTableIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawTextStyleTableIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawTextStyleTableIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawTextStyleTableIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawIdMapping, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawIdMapping*>(t)->MxDrawXLib::IMxDrawIdMapping::~IMxDrawIdMapping();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawIdMapping;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawIdMapping*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawIdMapping*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawUcs, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawUcs*>(t)->MxDrawXLib::IMxDrawUcs::~IMxDrawUcs();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawUcs;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawUcs*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawUcs*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDimStyleTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDimStyleTable*>(t)->MxDrawXLib::IMxDrawDimStyleTable::~IMxDrawDimStyleTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDimStyleTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDimStyleTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDimStyleTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDimStyleTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDimStyleTableRecord*>(t)->MxDrawXLib::IMxDrawDimStyleTableRecord::~IMxDrawDimStyleTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDimStyleTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDimStyleTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDimStyleTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawDimStyleTableIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawDimStyleTableIterator*>(t)->MxDrawXLib::IMxDrawDimStyleTableIterator::~IMxDrawDimStyleTableIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawDimStyleTableIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawDimStyleTableIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawDimStyleTableIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDatabase, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDatabase*>(t)->MxDrawXLib::MxDrawDatabase::~MxDrawDatabase();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDatabase;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDatabase*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDatabase*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawMcRxObject, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawMcRxObject*>(t)->MxDrawXLib::MxDrawMcRxObject::~MxDrawMcRxObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawMcRxObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawMcRxObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawMcRxObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawMcDbObject, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawMcDbObject*>(t)->MxDrawXLib::MxDrawMcDbObject::~MxDrawMcDbObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawMcDbObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawMcDbObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawMcDbObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawSymbolTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawSymbolTableRecord*>(t)->MxDrawXLib::MxDrawSymbolTableRecord::~MxDrawSymbolTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawSymbolTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawSymbolTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawSymbolTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawBlockTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawBlockTableRecord*>(t)->MxDrawXLib::MxDrawBlockTableRecord::~MxDrawBlockTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawBlockTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawBlockTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawBlockTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawEntity, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawEntity*>(t)->MxDrawXLib::MxDrawEntity::~MxDrawEntity();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawEntity;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawEntity*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawEntity*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawLine, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawLine*>(t)->MxDrawXLib::MxDrawLine::~MxDrawLine();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawLine;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawLine*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawLine*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDictionary, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDictionary*>(t)->MxDrawXLib::MxDrawDictionary::~MxDrawDictionary();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDictionary;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDictionary*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDictionary*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawMcCmColor, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawMcCmColor*>(t)->MxDrawXLib::MxDrawMcCmColor::~MxDrawMcCmColor();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawMcCmColor;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawMcCmColor*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawMcCmColor*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawCurve, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawCurve*>(t)->MxDrawXLib::MxDrawCurve::~MxDrawCurve();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawCurve;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawCurve*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawCurve*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawPoint, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawPoint*>(t)->MxDrawXLib::MxDrawPoint::~MxDrawPoint();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawPoint;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawPoint*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawPoint*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawPoints, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawPoints*>(t)->MxDrawXLib::MxDrawPoints::~MxDrawPoints();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawPoints;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawPoints*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawPoints*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawPolyline, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawPolyline*>(t)->MxDrawXLib::MxDrawPolyline::~MxDrawPolyline();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawPolyline;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawPolyline*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawPolyline*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawArc, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawArc*>(t)->MxDrawXLib::MxDrawArc::~MxDrawArc();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawArc;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawArc*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawArc*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawText, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawText*>(t)->MxDrawXLib::MxDrawText::~MxDrawText();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawText;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawText*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawText*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawAttributeDefinition, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawAttributeDefinition*>(t)->MxDrawXLib::MxDrawAttributeDefinition::~MxDrawAttributeDefinition();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawAttributeDefinition;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawAttributeDefinition*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawAttributeDefinition*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawAttribute, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawAttribute*>(t)->MxDrawXLib::MxDrawAttribute::~MxDrawAttribute();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawAttribute;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawAttribute*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawAttribute*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawCircle, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawCircle*>(t)->MxDrawXLib::MxDrawCircle::~MxDrawCircle();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawCircle;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawCircle*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawCircle*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDimension, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDimension*>(t)->MxDrawXLib::MxDrawDimension::~MxDrawDimension();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDimension;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDimension*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDimension*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDimAligned, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDimAligned*>(t)->MxDrawXLib::MxDrawDimAligned::~MxDrawDimAligned();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDimAligned;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDimAligned*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDimAligned*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDimAngular, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDimAngular*>(t)->MxDrawXLib::MxDrawDimAngular::~MxDrawDimAngular();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDimAngular;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDimAngular*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDimAngular*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDimDiametric, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDimDiametric*>(t)->MxDrawXLib::MxDrawDimDiametric::~MxDrawDimDiametric();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDimDiametric;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDimDiametric*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDimDiametric*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDimRotated, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDimRotated*>(t)->MxDrawXLib::MxDrawDimRotated::~MxDrawDimRotated();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDimRotated;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDimRotated*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDimRotated*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDimOrdinate, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDimOrdinate*>(t)->MxDrawXLib::MxDrawDimOrdinate::~MxDrawDimOrdinate();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDimOrdinate;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDimOrdinate*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDimOrdinate*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDimRadial, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDimRadial*>(t)->MxDrawXLib::MxDrawDimRadial::~MxDrawDimRadial();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDimRadial;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDimRadial*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDimRadial*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawEllipse, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawEllipse*>(t)->MxDrawXLib::MxDrawEllipse::~MxDrawEllipse();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawEllipse;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawEllipse*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawEllipse*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawMText, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawMText*>(t)->MxDrawXLib::MxDrawMText::~MxDrawMText();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawMText;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawMText*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawMText*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawPointEntity, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawPointEntity*>(t)->MxDrawXLib::MxDrawPointEntity::~MxDrawPointEntity();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawPointEntity;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawPointEntity*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawPointEntity*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawRay, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawRay*>(t)->MxDrawXLib::MxDrawRay::~MxDrawRay();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawRay;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawRay*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawRay*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawSolid, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawSolid*>(t)->MxDrawXLib::MxDrawSolid::~MxDrawSolid();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawSolid;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawSolid*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawSolid*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawSpline, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawSpline*>(t)->MxDrawXLib::MxDrawSpline::~MxDrawSpline();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawSpline;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawSpline*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawSpline*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawTolerance, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawTolerance*>(t)->MxDrawXLib::MxDrawTolerance::~MxDrawTolerance();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawTolerance;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawTolerance*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawTolerance*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawTrace, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawTrace*>(t)->MxDrawXLib::MxDrawTrace::~MxDrawTrace();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawTrace;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawTrace*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawTrace*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawXline, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawXline*>(t)->MxDrawXLib::MxDrawXline::~MxDrawXline();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawXline;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawXline*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawXline*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawBlockReference, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawBlockReference*>(t)->MxDrawXLib::MxDrawBlockReference::~MxDrawBlockReference();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawBlockReference;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawBlockReference*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawBlockReference*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawHatch, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawHatch*>(t)->MxDrawXLib::MxDrawHatch::~MxDrawHatch();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawHatch;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawHatch*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawHatch*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawRasterImage, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawRasterImage*>(t)->MxDrawXLib::MxDrawRasterImage::~MxDrawRasterImage();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawRasterImage;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawRasterImage*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawRasterImage*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawLayout, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawLayout*>(t)->MxDrawXLib::MxDrawLayout::~MxDrawLayout();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawLayout;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawLayout*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawLayout*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawSymbolTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawSymbolTable*>(t)->MxDrawXLib::MxDrawSymbolTable::~MxDrawSymbolTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawSymbolTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawSymbolTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawSymbolTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawBlockTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawBlockTable*>(t)->MxDrawXLib::MxDrawBlockTable::~MxDrawBlockTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawBlockTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawBlockTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawBlockTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawLayerTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawLayerTable*>(t)->MxDrawXLib::MxDrawLayerTable::~MxDrawLayerTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawLayerTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawLayerTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawLayerTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawLinetypeTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawLinetypeTable*>(t)->MxDrawXLib::MxDrawLinetypeTable::~MxDrawLinetypeTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawLinetypeTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawLinetypeTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawLinetypeTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawTextStyleTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawTextStyleTable*>(t)->MxDrawXLib::MxDrawTextStyleTable::~MxDrawTextStyleTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawTextStyleTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawTextStyleTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawTextStyleTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawIdMapping, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawIdMapping*>(t)->MxDrawXLib::MxDrawIdMapping::~MxDrawIdMapping();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawIdMapping;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawIdMapping*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawIdMapping*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawUcs, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawUcs*>(t)->MxDrawXLib::MxDrawUcs::~MxDrawUcs();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawUcs;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawUcs*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawUcs*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawTextStyleTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawTextStyleTableRecord*>(t)->MxDrawXLib::MxDrawTextStyleTableRecord::~MxDrawTextStyleTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawTextStyleTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawTextStyleTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawTextStyleTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawLayerTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawLayerTableRecord*>(t)->MxDrawXLib::MxDrawLayerTableRecord::~MxDrawLayerTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawLayerTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawLayerTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawLayerTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawLinetypeTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawLinetypeTableRecord*>(t)->MxDrawXLib::MxDrawLinetypeTableRecord::~MxDrawLinetypeTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawLinetypeTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawLinetypeTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawLinetypeTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawUtility, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawUtility*>(t)->MxDrawXLib::MxDrawUtility::~MxDrawUtility();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawUtility;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawUtility*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawUtility*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawUtility, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawUtility*>(t)->MxDrawXLib::IMxDrawUtility::~IMxDrawUtility();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawUtility;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawUtility*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawUtility*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawCustomEntity, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawCustomEntity*>(t)->MxDrawXLib::IMxDrawCustomEntity::~IMxDrawCustomEntity();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawCustomEntity;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawCustomEntity*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawCustomEntity*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawSelectionSet, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawSelectionSet*>(t)->MxDrawXLib::MxDrawSelectionSet::~MxDrawSelectionSet();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawSelectionSet;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawSelectionSet*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawSelectionSet*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawSelectionSet, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawSelectionSet*>(t)->MxDrawXLib::IMxDrawSelectionSet::~IMxDrawSelectionSet();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawSelectionSet;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawSelectionSet*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawSelectionSet*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawXRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawXRecord*>(t)->MxDrawXLib::MxDrawXRecord::~MxDrawXRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawXRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawXRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawXRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawRasterImageDef, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawRasterImageDef*>(t)->MxDrawXLib::MxDrawRasterImageDef::~MxDrawRasterImageDef();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawRasterImageDef;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawRasterImageDef*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawRasterImageDef*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawRasterImageDef, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawRasterImageDef*>(t)->MxDrawXLib::IMxDrawRasterImageDef::~IMxDrawRasterImageDef();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawRasterImageDef;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawRasterImageDef*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawRasterImageDef*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawVector3d, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawVector3d*>(t)->MxDrawXLib::MxDrawVector3d::~MxDrawVector3d();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawVector3d;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawVector3d*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawVector3d*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawScale3d, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawScale3d*>(t)->MxDrawXLib::MxDrawScale3d::~MxDrawScale3d();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawScale3d;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawScale3d*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawScale3d*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawBlockTableRecordIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawBlockTableRecordIterator*>(t)->MxDrawXLib::MxDrawBlockTableRecordIterator::~MxDrawBlockTableRecordIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawBlockTableRecordIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawBlockTableRecordIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawBlockTableRecordIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawBlockTableIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawBlockTableIterator*>(t)->MxDrawXLib::MxDrawBlockTableIterator::~MxDrawBlockTableIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawBlockTableIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawBlockTableIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawBlockTableIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawLayerTableIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawLayerTableIterator*>(t)->MxDrawXLib::MxDrawLayerTableIterator::~MxDrawLayerTableIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawLayerTableIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawLayerTableIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawLayerTableIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawLinetypeTableIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawLinetypeTableIterator*>(t)->MxDrawXLib::MxDrawLinetypeTableIterator::~MxDrawLinetypeTableIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawLinetypeTableIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawLinetypeTableIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawLinetypeTableIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawTextStyleTableIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawTextStyleTableIterator*>(t)->MxDrawXLib::MxDrawTextStyleTableIterator::~MxDrawTextStyleTableIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawTextStyleTableIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawTextStyleTableIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawTextStyleTableIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawResbuf, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawResbuf*>(t)->MxDrawXLib::MxDrawResbuf::~MxDrawResbuf();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawResbuf;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawResbuf*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawResbuf*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDictionaryIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDictionaryIterator*>(t)->MxDrawXLib::MxDrawDictionaryIterator::~MxDrawDictionaryIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDictionaryIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDictionaryIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDictionaryIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawMatrix3d, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawMatrix3d*>(t)->MxDrawXLib::MxDrawMatrix3d::~MxDrawMatrix3d();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawMatrix3d;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawMatrix3d*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawMatrix3d*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDimStyleTable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDimStyleTable*>(t)->MxDrawXLib::MxDrawDimStyleTable::~MxDrawDimStyleTable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDimStyleTable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDimStyleTable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDimStyleTable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDimStyleTableRecord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDimStyleTableRecord*>(t)->MxDrawXLib::MxDrawDimStyleTableRecord::~MxDrawDimStyleTableRecord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDimStyleTableRecord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDimStyleTableRecord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDimStyleTableRecord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawDimStyleTableIterator, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawDimStyleTableIterator*>(t)->MxDrawXLib::MxDrawDimStyleTableIterator::~MxDrawDimStyleTableIterator();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawDimStyleTableIterator;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawDimStyleTableIterator*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawDimStyleTableIterator*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawEntityImp, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawEntityImp*>(t)->MxDrawXLib::MxDrawEntityImp::~MxDrawEntityImp();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawEntityImp;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawEntityImp*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawEntityImp*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawEntityImp, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawEntityImp*>(t)->MxDrawXLib::IMxDrawEntityImp::~IMxDrawEntityImp();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawEntityImp;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawEntityImp*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawEntityImp*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawBinStream, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawBinStream*>(t)->MxDrawXLib::MxDrawBinStream::~MxDrawBinStream();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawBinStream;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawBinStream*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawBinStream*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawBinStream, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawBinStream*>(t)->MxDrawXLib::IMxDrawBinStream::~IMxDrawBinStream();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawBinStream;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawBinStream*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawBinStream*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawService, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawService*>(t)->MxDrawXLib::MxDrawService::~MxDrawService();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawService;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawService*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawService*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawService, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawService*>(t)->MxDrawXLib::IMxDrawService::~IMxDrawService();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawService;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawService*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawService*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawUiPrString, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawUiPrString*>(t)->MxDrawXLib::MxDrawUiPrString::~MxDrawUiPrString();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawUiPrString;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawUiPrString*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawUiPrString*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawUiPrString, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawUiPrString*>(t)->MxDrawXLib::IMxDrawUiPrString::~IMxDrawUiPrString();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawUiPrString;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawUiPrString*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawUiPrString*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawUiPrBase, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawUiPrBase*>(t)->MxDrawXLib::IMxDrawUiPrBase::~IMxDrawUiPrBase();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawUiPrBase;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawUiPrBase*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawUiPrBase*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawUiPrPoint, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawUiPrPoint*>(t)->MxDrawXLib::MxDrawUiPrPoint::~MxDrawUiPrPoint();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawUiPrPoint;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawUiPrPoint*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawUiPrPoint*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawUiPrPoint, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawUiPrPoint*>(t)->MxDrawXLib::IMxDrawUiPrPoint::~IMxDrawUiPrPoint();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawUiPrPoint;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawUiPrPoint*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawUiPrPoint*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawCustomEntity, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawCustomEntity*>(t)->MxDrawXLib::MxDrawCustomEntity::~MxDrawCustomEntity();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawCustomEntity;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawCustomEntity*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawCustomEntity*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawWorldDraw, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawWorldDraw*>(t)->MxDrawXLib::MxDrawWorldDraw::~MxDrawWorldDraw();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawWorldDraw;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawWorldDraw*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawWorldDraw*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawWorldDraw, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawWorldDraw*>(t)->MxDrawXLib::IMxDrawWorldDraw::~IMxDrawWorldDraw();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawWorldDraw;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawWorldDraw*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawWorldDraw*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawPrint, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawPrint*>(t)->MxDrawXLib::MxDrawPrint::~MxDrawPrint();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawPrint;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawPrint*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawPrint*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawPrint, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawPrint*>(t)->MxDrawXLib::IMxDrawPrint::~IMxDrawPrint();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawPrint;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawPrint*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawPrint*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawImageMark, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawImageMark*>(t)->MxDrawXLib::MxDrawImageMark::~MxDrawImageMark();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawImageMark;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawImageMark*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawImageMark*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawUiPrBase, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawUiPrBase*>(t)->MxDrawXLib::MxDrawUiPrBase::~MxDrawUiPrBase();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawUiPrBase;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawUiPrBase*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawUiPrBase*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawUiPrAngle, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawUiPrAngle*>(t)->MxDrawXLib::MxDrawUiPrAngle::~MxDrawUiPrAngle();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawUiPrAngle;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawUiPrAngle*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawUiPrAngle*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawUiPrAngle, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawUiPrAngle*>(t)->MxDrawXLib::IMxDrawUiPrAngle::~IMxDrawUiPrAngle();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawUiPrAngle;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawUiPrAngle*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawUiPrAngle*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawUiPrDist, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawUiPrDist*>(t)->MxDrawXLib::MxDrawUiPrDist::~MxDrawUiPrDist();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawUiPrDist;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawUiPrDist*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawUiPrDist*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawUiPrDist, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawUiPrDist*>(t)->MxDrawXLib::IMxDrawUiPrDist::~IMxDrawUiPrDist();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawUiPrDist;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawUiPrDist*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawUiPrDist*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawUiPrDouble, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawUiPrDouble*>(t)->MxDrawXLib::MxDrawUiPrDouble::~MxDrawUiPrDouble();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawUiPrDouble;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawUiPrDouble*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawUiPrDouble*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawUiPrDouble, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawUiPrDouble*>(t)->MxDrawXLib::IMxDrawUiPrDouble::~IMxDrawUiPrDouble();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawUiPrDouble;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawUiPrDouble*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawUiPrDouble*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawUiPrEntity, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawUiPrEntity*>(t)->MxDrawXLib::MxDrawUiPrEntity::~MxDrawUiPrEntity();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawUiPrEntity;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawUiPrEntity*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawUiPrEntity*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawUiPrEntity, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawUiPrEntity*>(t)->MxDrawXLib::IMxDrawUiPrEntity::~IMxDrawUiPrEntity();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawUiPrEntity;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawUiPrEntity*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawUiPrEntity*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawUiPrInt, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawUiPrInt*>(t)->MxDrawXLib::MxDrawUiPrInt::~MxDrawUiPrInt();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawUiPrInt;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawUiPrInt*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawUiPrInt*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawUiPrInt, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawUiPrInt*>(t)->MxDrawXLib::IMxDrawUiPrInt::~IMxDrawUiPrInt();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawUiPrInt;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawUiPrInt*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawUiPrInt*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawUiPrKeyWord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawUiPrKeyWord*>(t)->MxDrawXLib::MxDrawUiPrKeyWord::~MxDrawUiPrKeyWord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawUiPrKeyWord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawUiPrKeyWord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawUiPrKeyWord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawUiPrKeyWord, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawUiPrKeyWord*>(t)->MxDrawXLib::IMxDrawUiPrKeyWord::~IMxDrawUiPrKeyWord();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawUiPrKeyWord;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawUiPrKeyWord*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawUiPrKeyWord*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawCompare, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawCompare*>(t)->MxDrawXLib::MxDrawCompare::~MxDrawCompare();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawCompare;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawCompare*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawCompare*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawCompare, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawCompare*>(t)->MxDrawXLib::IMxDrawCompare::~IMxDrawCompare();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawCompare;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawCompare*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawCompare*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawModifyTheColor, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawModifyTheColor*>(t)->MxDrawXLib::MxDrawModifyTheColor::~MxDrawModifyTheColor();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawModifyTheColor;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawModifyTheColor*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawModifyTheColor*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawModifyTheColor, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawModifyTheColor*>(t)->MxDrawXLib::IMxDrawModifyTheColor::~IMxDrawModifyTheColor();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawModifyTheColor;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawModifyTheColor*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawModifyTheColor*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawComment, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawComment*>(t)->MxDrawXLib::MxDrawComment::~MxDrawComment();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawComment;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawComment*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawComment*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawComment, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawComment*>(t)->MxDrawXLib::IMxDrawComment::~IMxDrawComment();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawComment;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawComment*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawComment*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawChange, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawChange*>(t)->MxDrawXLib::MxDrawChange::~MxDrawChange();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawChange;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawChange*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawChange*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawChange, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawChange*>(t)->MxDrawXLib::IMxDrawChange::~IMxDrawChange();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawChange;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawChange*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawChange*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawQrCode, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawQrCode*>(t)->MxDrawXLib::MxDrawQrCode::~MxDrawQrCode();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawQrCode;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawQrCode*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawQrCode*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawQrCode, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawQrCode*>(t)->MxDrawXLib::IMxDrawQrCode::~IMxDrawQrCode();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawQrCode;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawQrCode*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawQrCode*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawAnimation, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawAnimation*>(t)->MxDrawXLib::MxDrawAnimation::~MxDrawAnimation();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawAnimation;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawAnimation*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawAnimation*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawAnimation, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawAnimation*>(t)->MxDrawXLib::IMxDrawAnimation::~IMxDrawAnimation();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawAnimation;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawAnimation*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawAnimation*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::MxDrawProxyEntity, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::MxDrawProxyEntity*>(t)->MxDrawXLib::MxDrawProxyEntity::~MxDrawProxyEntity();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::MxDrawProxyEntity;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::MxDrawProxyEntity*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::MxDrawProxyEntity*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<MxDrawXLib::IMxDrawProxyEntity, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<MxDrawXLib::IMxDrawProxyEntity*>(t)->MxDrawXLib::IMxDrawProxyEntity::~IMxDrawProxyEntity();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) MxDrawXLib::IMxDrawProxyEntity;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const MxDrawXLib::IMxDrawProxyEntity*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<MxDrawXLib::IMxDrawProxyEntity*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

