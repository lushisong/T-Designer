{
    "autoRange": true,
    "fallbackToTemplate": true,
    "faultSummary": [
        {
            "detected": 4,
            "faultId": "func.1",
            "totalTests": 107
        },
        {
            "detected": 107,
            "faultId": "func.2",
            "totalTests": 107
        },
        {
            "detected": 4,
            "faultId": "func.3",
            "totalTests": 107
        },
        {
            "detected": 4,
            "faultId": "func.4",
            "totalTests": 107
        },
        {
            "detected": 107,
            "faultId": "func.5",
            "totalTests": 107
        },
        {
            "detected": 4,
            "faultId": "func.6",
            "totalTests": 107
        },
        {
            "detected": 4,
            "faultId": "func.7",
            "totalTests": 107
        },
        {
            "detected": 4,
            "faultId": "func.8",
            "totalTests": 107
        },
        {
            "detected": 0,
            "faultId": "func.9",
            "totalTests": 107
        }
    ],
    "faults": [
        {
            "faultAssertions": [
            ],
            "function": "功能1_按钮启动电机",
            "id": "func.1",
            "inputAssertions": [
                "(assert (= M.M1.act true))",
                "(assert (and (>= T.A1_B1.u 208.76)(<= T.A1_B1.u 231.24)))",
                "(assert (= QS.closed true))",
                "(assert (> L21.1.u (* L21.1.i 1000)))",
                "(assert (= KM.act true))"
            ],
            "kind": "function",
            "name": "功能1_按钮启动电机"
        },
        {
            "faultAssertions": [
            ],
            "function": "功能2_电机启动后保持转动",
            "id": "func.2",
            "inputAssertions": [
                "(assert (= M.M1.act true))",
                "(assert (and (>= T.A1_B1.u 208.76)(<= T.A1_B1.u 231.24)))",
                "(assert (= QS.closed true))",
                "(assert (> L21.1.u (* L21.1.i 1000000)))",
                "(assert (= KM.act true))"
            ],
            "kind": "function",
            "name": "功能2_电机启动后保持转动"
        },
        {
            "faultAssertions": [
            ],
            "function": "功能3_按钮停止电机",
            "id": "func.3",
            "inputAssertions": [
                "(assert (= M.M1.act false))",
                "(assert (= KM.act false))"
            ],
            "kind": "function",
            "name": "功能3_按钮停止电机"
        },
        {
            "faultAssertions": [
            ],
            "function": "功能4_电机保持停止",
            "id": "func.4",
            "inputAssertions": [
                "(assert (= M.M1.act false))",
                "(assert (= KM.act false))"
            ],
            "kind": "function",
            "name": "功能4_电机保持停止"
        },
        {
            "faultAssertions": [
            ],
            "function": "功能5_按启动按钮继电器动作",
            "id": "func.5",
            "inputAssertions": [
                "(assert (= KM.act true))",
                "(assert (and (>= T.A1_B1.u 208.76)(<= T.A1_B1.u 231.24)))",
                "(assert (= QS.closed true))",
                "(assert (= SB1.M1.pressed false))",
                "(assert (= SB2.M1.pressed true))",
                "(assert (> L7.1.u (* L7.1.i 1000)))"
            ],
            "kind": "function",
            "name": "功能5_按启动按钮继电器动作"
        },
        {
            "faultAssertions": [
            ],
            "function": "功能6_按停止按钮继电器停止动作",
            "id": "func.6",
            "inputAssertions": [
                "(assert (= KM.act false))",
                "(assert (= SB1.M1.pressed true))"
            ],
            "kind": "function",
            "name": "功能6_按停止按钮继电器停止动作"
        },
        {
            "faultAssertions": [
            ],
            "function": "功能7_继电器自保持得电状态",
            "id": "func.7",
            "inputAssertions": [
                "(assert (= KM.act true))",
                "(assert (and (>= T.A1_B1.u 208.76)(<= T.A1_B1.u 231.24)))",
                "(assert (= QS.closed true))",
                "(assert (= SB1.M1.pressed false))",
                "(assert (= SB2.M1.pressed false))",
                "(assert (= KM.act_prev true))"
            ],
            "kind": "function",
            "name": "功能7_继电器自保持得电状态"
        },
        {
            "faultAssertions": [
            ],
            "function": "功能8_继电器保持失电状态",
            "id": "func.8",
            "inputAssertions": [
                "(assert (= KM.act false))",
                "(assert (= SB2.M1.pressed false))",
                "(assert (= KM.act_prev false))"
            ],
            "kind": "function",
            "name": "功能8_继电器保持失电状态"
        },
        {
            "faultAssertions": [
            ],
            "function": "功能9_安全闭锁",
            "id": "func.9",
            "inputAssertions": [
                "(assert (= FR.8.u FR.7.u))",
                "(assert (and (> FR.1.i -10)(< FR.1.i 10)))",
                "(assert (and (> FR.3.i -10)(< FR.3.i 10)))"
            ],
            "kind": "function",
            "name": "功能9_安全闭锁"
        }
    ],
    "mode": "guaranteed",
    "model": "QBT",
    "rangeTolerance": 0.05,
    "searchMaxAbs": 100000,
    "tests": [
        {
            "id": "func.1",
            "kind": "function",
            "name": "功能1_按钮启动电机",
            "negatedPredicate": "(assert (= M.M1.act true))",
            "note": "function",
            "predicate": "(assert (= M.M1.act true))",
            "sourceValue": "true",
            "sourceVariable": "M.M1.act"
        },
        {
            "id": "func.2",
            "kind": "function",
            "name": "功能2_电机启动后保持转动",
            "negatedPredicate": "(assert (= M.M1.act true))",
            "note": "function",
            "predicate": "(assert (= M.M1.act true))",
            "sourceValue": "true",
            "sourceVariable": "M.M1.act"
        },
        {
            "id": "func.3",
            "kind": "function",
            "name": "功能3_按钮停止电机",
            "negatedPredicate": "(assert (= M.M1.act false))",
            "note": "function",
            "predicate": "(assert (= M.M1.act false))",
            "sourceValue": "false",
            "sourceVariable": "M.M1.act"
        },
        {
            "id": "func.4",
            "kind": "function",
            "name": "功能4_电机保持停止",
            "negatedPredicate": "(assert (= M.M1.act false))",
            "note": "function",
            "predicate": "(assert (= M.M1.act false))",
            "sourceValue": "false",
            "sourceVariable": "M.M1.act"
        },
        {
            "id": "func.5",
            "kind": "function",
            "name": "功能5_按启动按钮继电器动作",
            "negatedPredicate": "(assert (= KM.act true))",
            "note": "function",
            "predicate": "(assert (= KM.act true))",
            "sourceValue": "true",
            "sourceVariable": "KM.act"
        },
        {
            "id": "func.6",
            "kind": "function",
            "name": "功能6_按停止按钮继电器停止动作",
            "negatedPredicate": "(assert (= KM.act false))",
            "note": "function",
            "predicate": "(assert (= KM.act false))",
            "sourceValue": "false",
            "sourceVariable": "KM.act"
        },
        {
            "id": "func.7",
            "kind": "function",
            "name": "功能7_继电器自保持得电状态",
            "negatedPredicate": "(assert (= KM.act true))",
            "note": "function",
            "predicate": "(assert (= KM.act true))",
            "sourceValue": "true",
            "sourceVariable": "KM.act"
        },
        {
            "id": "func.8",
            "kind": "function",
            "name": "功能8_继电器保持失电状态",
            "negatedPredicate": "(assert (= KM.act false))",
            "note": "function",
            "predicate": "(assert (= KM.act false))",
            "sourceValue": "false",
            "sourceVariable": "KM.act"
        },
        {
            "id": "func.9",
            "kind": "function",
            "name": "功能9_安全闭锁",
            "negatedPredicate": "(assert (= FR.8.u FR.7.u))",
            "note": "function",
            "predicate": "(assert (= FR.8.u FR.7.u))",
            "sourceValue": "smt(= %1 FR.7.u)",
            "sourceVariable": "FR.8.u"
        },
        {
            "id": "sig.T_A2_B2_u",
            "kind": "signal",
            "name": "T.A2_B2.u",
            "negatedPredicate": "(assert (or (< T.A2_B2.u 207.9) (> T.A2_B2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= T.A2_B2.u 207.9) (<= T.A2_B2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "T.A2_B2.u"
        },
        {
            "id": "sig.T_A2_B2_i",
            "kind": "signal",
            "name": "T.A2_B2.i",
            "negatedPredicate": "(assert (or (< T.A2_B2.i 0.945) (> T.A2_B2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= T.A2_B2.i 0.945) (<= T.A2_B2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "T.A2_B2.i"
        },
        {
            "id": "sig.L1_1_u",
            "kind": "signal",
            "name": "L1.1.u",
            "negatedPredicate": "(assert (or (< L1.1.u 207.9) (> L1.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L1.1.u 207.9) (<= L1.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L1.1.u"
        },
        {
            "id": "sig.L1_1_i",
            "kind": "signal",
            "name": "L1.1.i",
            "negatedPredicate": "(assert (or (< L1.1.i 0.945) (> L1.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L1.1.i 0.945) (<= L1.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L1.1.i"
        },
        {
            "id": "sig.L1_2_u",
            "kind": "signal",
            "name": "L1.2.u",
            "negatedPredicate": "(assert (or (< L1.2.u 207.9) (> L1.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L1.2.u 207.9) (<= L1.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L1.2.u"
        },
        {
            "id": "sig.L1_2_i",
            "kind": "signal",
            "name": "L1.2.i",
            "negatedPredicate": "(assert (or (< L1.2.i 0.945) (> L1.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L1.2.i 0.945) (<= L1.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L1.2.i"
        },
        {
            "id": "sig.QS_1_u",
            "kind": "signal",
            "name": "QS.1.u",
            "negatedPredicate": "(assert (or (< QS.1.u 207.9) (> QS.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= QS.1.u 207.9) (<= QS.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "QS.1.u"
        },
        {
            "id": "sig.QS_1_i",
            "kind": "signal",
            "name": "QS.1.i",
            "negatedPredicate": "(assert (or (< QS.1.i 0.945) (> QS.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= QS.1.i 0.945) (<= QS.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "QS.1.i"
        },
        {
            "id": "sig.QS_2_u",
            "kind": "signal",
            "name": "QS.2.u",
            "negatedPredicate": "(assert (or (< QS.2.u 207.9) (> QS.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= QS.2.u 207.9) (<= QS.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "QS.2.u"
        },
        {
            "id": "sig.QS_2_i",
            "kind": "signal",
            "name": "QS.2.i",
            "negatedPredicate": "(assert (or (< QS.2.i 0.945) (> QS.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= QS.2.i 0.945) (<= QS.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "QS.2.i"
        },
        {
            "id": "sig.L2_1_u",
            "kind": "signal",
            "name": "L2.1.u",
            "negatedPredicate": "(assert (or (< L2.1.u 207.9) (> L2.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L2.1.u 207.9) (<= L2.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L2.1.u"
        },
        {
            "id": "sig.L2_1_i",
            "kind": "signal",
            "name": "L2.1.i",
            "negatedPredicate": "(assert (or (< L2.1.i 0.945) (> L2.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L2.1.i 0.945) (<= L2.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L2.1.i"
        },
        {
            "id": "sig.L2_2_u",
            "kind": "signal",
            "name": "L2.2.u",
            "negatedPredicate": "(assert (or (< L2.2.u 207.9) (> L2.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L2.2.u 207.9) (<= L2.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L2.2.u"
        },
        {
            "id": "sig.L2_2_i",
            "kind": "signal",
            "name": "L2.2.i",
            "negatedPredicate": "(assert (or (< L2.2.i 0.945) (> L2.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L2.2.i 0.945) (<= L2.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L2.2.i"
        },
        {
            "id": "sig.QS_3_u",
            "kind": "signal",
            "name": "QS.3.u",
            "negatedPredicate": "(assert (or (< QS.3.u 207.9) (> QS.3.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= QS.3.u 207.9) (<= QS.3.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "QS.3.u"
        },
        {
            "id": "sig.QS_3_i",
            "kind": "signal",
            "name": "QS.3.i",
            "negatedPredicate": "(assert (or (< QS.3.i 0.945) (> QS.3.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= QS.3.i 0.945) (<= QS.3.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "QS.3.i"
        },
        {
            "id": "sig.QS_4_u",
            "kind": "signal",
            "name": "QS.4.u",
            "negatedPredicate": "(assert (or (< QS.4.u 207.9) (> QS.4.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= QS.4.u 207.9) (<= QS.4.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "QS.4.u"
        },
        {
            "id": "sig.QS_4_i",
            "kind": "signal",
            "name": "QS.4.i",
            "negatedPredicate": "(assert (or (< QS.4.i 0.945) (> QS.4.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= QS.4.i 0.945) (<= QS.4.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "QS.4.i"
        },
        {
            "id": "sig.FU_1_u",
            "kind": "signal",
            "name": "FU.1.u",
            "negatedPredicate": "(assert (or (< FU.1.u 207.9) (> FU.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= FU.1.u 207.9) (<= FU.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "FU.1.u"
        },
        {
            "id": "sig.FU_1_i",
            "kind": "signal",
            "name": "FU.1.i",
            "negatedPredicate": "(assert (or (< FU.1.i 0.945) (> FU.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= FU.1.i 0.945) (<= FU.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "FU.1.i"
        },
        {
            "id": "sig.FU_2_u",
            "kind": "signal",
            "name": "FU.2.u",
            "negatedPredicate": "(assert (or (< FU.2.u 207.9) (> FU.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= FU.2.u 207.9) (<= FU.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "FU.2.u"
        },
        {
            "id": "sig.FU_2_i",
            "kind": "signal",
            "name": "FU.2.i",
            "negatedPredicate": "(assert (or (< FU.2.i 0.945) (> FU.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= FU.2.i 0.945) (<= FU.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "FU.2.i"
        },
        {
            "id": "sig.FU_3_u",
            "kind": "signal",
            "name": "FU.3.u",
            "negatedPredicate": "(assert (or (< FU.3.u 207.9) (> FU.3.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= FU.3.u 207.9) (<= FU.3.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "FU.3.u"
        },
        {
            "id": "sig.FU_3_i",
            "kind": "signal",
            "name": "FU.3.i",
            "negatedPredicate": "(assert (or (< FU.3.i 0.945) (> FU.3.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= FU.3.i 0.945) (<= FU.3.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "FU.3.i"
        },
        {
            "id": "sig.L7_1_u",
            "kind": "signal",
            "name": "L7.1.u",
            "negatedPredicate": "(assert (or (< L7.1.u 207.9) (> L7.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L7.1.u 207.9) (<= L7.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L7.1.u"
        },
        {
            "id": "sig.L7_1_i",
            "kind": "signal",
            "name": "L7.1.i",
            "negatedPredicate": "(assert (or (< L7.1.i 0.945) (> L7.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L7.1.i 0.945) (<= L7.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L7.1.i"
        },
        {
            "id": "sig.L21_1_u",
            "kind": "signal",
            "name": "L21.1.u",
            "negatedPredicate": "(assert (or (< L21.1.u 207.9) (> L21.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L21.1.u 207.9) (<= L21.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L21.1.u"
        },
        {
            "id": "sig.L21_1_i",
            "kind": "signal",
            "name": "L21.1.i",
            "negatedPredicate": "(assert (or (< L21.1.i 0.945) (> L21.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L21.1.i 0.945) (<= L21.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L21.1.i"
        },
        {
            "id": "sig.FU_4_u",
            "kind": "signal",
            "name": "FU.4.u",
            "negatedPredicate": "(assert (or (< FU.4.u 207.9) (> FU.4.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= FU.4.u 207.9) (<= FU.4.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "FU.4.u"
        },
        {
            "id": "sig.FU_4_i",
            "kind": "signal",
            "name": "FU.4.i",
            "negatedPredicate": "(assert (or (< FU.4.i 0.945) (> FU.4.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= FU.4.i 0.945) (<= FU.4.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "FU.4.i"
        },
        {
            "id": "sig.L7_2_u",
            "kind": "signal",
            "name": "L7.2.u",
            "negatedPredicate": "(assert (or (< L7.2.u 207.9) (> L7.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L7.2.u 207.9) (<= L7.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L7.2.u"
        },
        {
            "id": "sig.L7_2_i",
            "kind": "signal",
            "name": "L7.2.i",
            "negatedPredicate": "(assert (or (< L7.2.i 0.945) (> L7.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L7.2.i 0.945) (<= L7.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L7.2.i"
        },
        {
            "id": "sig.L8_1_u",
            "kind": "signal",
            "name": "L8.1.u",
            "negatedPredicate": "(assert (or (< L8.1.u 207.9) (> L8.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L8.1.u 207.9) (<= L8.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L8.1.u"
        },
        {
            "id": "sig.L8_1_i",
            "kind": "signal",
            "name": "L8.1.i",
            "negatedPredicate": "(assert (or (< L8.1.i 0.945) (> L8.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L8.1.i 0.945) (<= L8.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L8.1.i"
        },
        {
            "id": "sig.L8_2_u",
            "kind": "signal",
            "name": "L8.2.u",
            "negatedPredicate": "(assert (or (< L8.2.u 207.9) (> L8.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L8.2.u 207.9) (<= L8.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L8.2.u"
        },
        {
            "id": "sig.L8_2_i",
            "kind": "signal",
            "name": "L8.2.i",
            "negatedPredicate": "(assert (or (< L8.2.i 0.945) (> L8.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L8.2.i 0.945) (<= L8.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L8.2.i"
        },
        {
            "id": "sig.KM_1_u",
            "kind": "signal",
            "name": "KM.1.u",
            "negatedPredicate": "(assert (or (< KM.1.u 207.9) (> KM.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= KM.1.u 207.9) (<= KM.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "KM.1.u"
        },
        {
            "id": "sig.KM_1_i",
            "kind": "signal",
            "name": "KM.1.i",
            "negatedPredicate": "(assert (or (< KM.1.i 0.945) (> KM.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= KM.1.i 0.945) (<= KM.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "KM.1.i"
        },
        {
            "id": "sig.KM_2_u",
            "kind": "signal",
            "name": "KM.2.u",
            "negatedPredicate": "(assert (or (< KM.2.u 207.9) (> KM.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= KM.2.u 207.9) (<= KM.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "KM.2.u"
        },
        {
            "id": "sig.KM_2_i",
            "kind": "signal",
            "name": "KM.2.i",
            "negatedPredicate": "(assert (or (< KM.2.i 0.945) (> KM.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= KM.2.i 0.945) (<= KM.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "KM.2.i"
        },
        {
            "id": "sig.KM_3_u",
            "kind": "signal",
            "name": "KM.3.u",
            "negatedPredicate": "(assert (or (< KM.3.u 207.9) (> KM.3.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= KM.3.u 207.9) (<= KM.3.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "KM.3.u"
        },
        {
            "id": "sig.KM_3_i",
            "kind": "signal",
            "name": "KM.3.i",
            "negatedPredicate": "(assert (or (< KM.3.i 0.945) (> KM.3.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= KM.3.i 0.945) (<= KM.3.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "KM.3.i"
        },
        {
            "id": "sig.KM_4_u",
            "kind": "signal",
            "name": "KM.4.u",
            "negatedPredicate": "(assert (or (< KM.4.u 207.9) (> KM.4.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= KM.4.u 207.9) (<= KM.4.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "KM.4.u"
        },
        {
            "id": "sig.KM_4_i",
            "kind": "signal",
            "name": "KM.4.i",
            "negatedPredicate": "(assert (or (< KM.4.i 0.945) (> KM.4.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= KM.4.i 0.945) (<= KM.4.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "KM.4.i"
        },
        {
            "id": "sig.FR_1_u",
            "kind": "signal",
            "name": "FR.1.u",
            "negatedPredicate": "(assert (or (< FR.1.u 207.9) (> FR.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= FR.1.u 207.9) (<= FR.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "FR.1.u"
        },
        {
            "id": "sig.FR_1_i",
            "kind": "signal",
            "name": "FR.1.i",
            "negatedPredicate": "(assert (or (< FR.1.i 0.945) (> FR.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= FR.1.i 0.945) (<= FR.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "FR.1.i"
        },
        {
            "id": "sig.FR_2_u",
            "kind": "signal",
            "name": "FR.2.u",
            "negatedPredicate": "(assert (or (< FR.2.u 207.9) (> FR.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= FR.2.u 207.9) (<= FR.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "FR.2.u"
        },
        {
            "id": "sig.FR_2_i",
            "kind": "signal",
            "name": "FR.2.i",
            "negatedPredicate": "(assert (or (< FR.2.i 0.945) (> FR.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= FR.2.i 0.945) (<= FR.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "FR.2.i"
        },
        {
            "id": "sig.FR_3_u",
            "kind": "signal",
            "name": "FR.3.u",
            "negatedPredicate": "(assert (or (< FR.3.u 207.9) (> FR.3.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= FR.3.u 207.9) (<= FR.3.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "FR.3.u"
        },
        {
            "id": "sig.FR_3_i",
            "kind": "signal",
            "name": "FR.3.i",
            "negatedPredicate": "(assert (or (< FR.3.i 0.945) (> FR.3.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= FR.3.i 0.945) (<= FR.3.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "FR.3.i"
        },
        {
            "id": "sig.FR_4_u",
            "kind": "signal",
            "name": "FR.4.u",
            "negatedPredicate": "(assert (or (< FR.4.u 207.9) (> FR.4.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= FR.4.u 207.9) (<= FR.4.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "FR.4.u"
        },
        {
            "id": "sig.FR_4_i",
            "kind": "signal",
            "name": "FR.4.i",
            "negatedPredicate": "(assert (or (< FR.4.i 0.945) (> FR.4.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= FR.4.i 0.945) (<= FR.4.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "FR.4.i"
        },
        {
            "id": "sig.M_A_B_u",
            "kind": "signal",
            "name": "M.A_B.u",
            "negatedPredicate": "(assert (or (< M.A_B.u 207.9) (> M.A_B.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= M.A_B.u 207.9) (<= M.A_B.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "M.A_B.u"
        },
        {
            "id": "sig.M_A_B_i",
            "kind": "signal",
            "name": "M.A_B.i",
            "negatedPredicate": "(assert (or (< M.A_B.i 0.945) (> M.A_B.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= M.A_B.i 0.945) (<= M.A_B.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "M.A_B.i"
        },
        {
            "id": "sig.L21_2_u",
            "kind": "signal",
            "name": "L21.2.u",
            "negatedPredicate": "(assert (or (< L21.2.u 207.9) (> L21.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L21.2.u 207.9) (<= L21.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L21.2.u"
        },
        {
            "id": "sig.L21_2_i",
            "kind": "signal",
            "name": "L21.2.i",
            "negatedPredicate": "(assert (or (< L21.2.i 0.945) (> L21.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L21.2.i 0.945) (<= L21.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L21.2.i"
        },
        {
            "id": "sig.FR_7_u",
            "kind": "signal",
            "name": "FR.7.u",
            "negatedPredicate": "(assert (or (< FR.7.u 207.9) (> FR.7.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= FR.7.u 207.9) (<= FR.7.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "FR.7.u"
        },
        {
            "id": "sig.FR_7_i",
            "kind": "signal",
            "name": "FR.7.i",
            "negatedPredicate": "(assert (or (< FR.7.i 0.945) (> FR.7.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= FR.7.i 0.945) (<= FR.7.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "FR.7.i"
        },
        {
            "id": "sig.FR_8_u",
            "kind": "signal",
            "name": "FR.8.u",
            "negatedPredicate": "(assert (or (< FR.8.u 207.9) (> FR.8.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= FR.8.u 207.9) (<= FR.8.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "FR.8.u"
        },
        {
            "id": "sig.FR_8_i",
            "kind": "signal",
            "name": "FR.8.i",
            "negatedPredicate": "(assert (or (< FR.8.i 0.945) (> FR.8.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= FR.8.i 0.945) (<= FR.8.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "FR.8.i"
        },
        {
            "id": "sig.L15_1_u",
            "kind": "signal",
            "name": "L15.1.u",
            "negatedPredicate": "(assert (or (< L15.1.u 207.9) (> L15.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L15.1.u 207.9) (<= L15.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L15.1.u"
        },
        {
            "id": "sig.L15_1_i",
            "kind": "signal",
            "name": "L15.1.i",
            "negatedPredicate": "(assert (or (< L15.1.i 0.945) (> L15.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L15.1.i 0.945) (<= L15.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L15.1.i"
        },
        {
            "id": "sig.L15_2_u",
            "kind": "signal",
            "name": "L15.2.u",
            "negatedPredicate": "(assert (or (< L15.2.u 207.9) (> L15.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L15.2.u 207.9) (<= L15.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L15.2.u"
        },
        {
            "id": "sig.L15_2_i",
            "kind": "signal",
            "name": "L15.2.i",
            "negatedPredicate": "(assert (or (< L15.2.i 0.945) (> L15.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L15.2.i 0.945) (<= L15.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L15.2.i"
        },
        {
            "id": "sig.SB1_1_u",
            "kind": "signal",
            "name": "SB1.1.u",
            "negatedPredicate": "(assert (or (< SB1.1.u 207.9) (> SB1.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= SB1.1.u 207.9) (<= SB1.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "SB1.1.u"
        },
        {
            "id": "sig.SB1_1_i",
            "kind": "signal",
            "name": "SB1.1.i",
            "negatedPredicate": "(assert (or (< SB1.1.i 0.945) (> SB1.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= SB1.1.i 0.945) (<= SB1.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "SB1.1.i"
        },
        {
            "id": "sig.SB1_2_u",
            "kind": "signal",
            "name": "SB1.2.u",
            "negatedPredicate": "(assert (or (< SB1.2.u 207.9) (> SB1.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= SB1.2.u 207.9) (<= SB1.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "SB1.2.u"
        },
        {
            "id": "sig.SB1_2_i",
            "kind": "signal",
            "name": "SB1.2.i",
            "negatedPredicate": "(assert (or (< SB1.2.i 0.945) (> SB1.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= SB1.2.i 0.945) (<= SB1.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "SB1.2.i"
        },
        {
            "id": "sig.L16_1_u",
            "kind": "signal",
            "name": "L16.1.u",
            "negatedPredicate": "(assert (or (< L16.1.u 207.9) (> L16.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L16.1.u 207.9) (<= L16.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L16.1.u"
        },
        {
            "id": "sig.L16_1_i",
            "kind": "signal",
            "name": "L16.1.i",
            "negatedPredicate": "(assert (or (< L16.1.i 0.945) (> L16.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L16.1.i 0.945) (<= L16.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L16.1.i"
        },
        {
            "id": "sig.L16_2_u",
            "kind": "signal",
            "name": "L16.2.u",
            "negatedPredicate": "(assert (or (< L16.2.u 207.9) (> L16.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L16.2.u 207.9) (<= L16.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L16.2.u"
        },
        {
            "id": "sig.L16_2_i",
            "kind": "signal",
            "name": "L16.2.i",
            "negatedPredicate": "(assert (or (< L16.2.i 0.945) (> L16.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L16.2.i 0.945) (<= L16.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L16.2.i"
        },
        {
            "id": "sig.SB2_1_u",
            "kind": "signal",
            "name": "SB2.1.u",
            "negatedPredicate": "(assert (or (< SB2.1.u 207.9) (> SB2.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= SB2.1.u 207.9) (<= SB2.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "SB2.1.u"
        },
        {
            "id": "sig.SB2_1_i",
            "kind": "signal",
            "name": "SB2.1.i",
            "negatedPredicate": "(assert (or (< SB2.1.i 0.945) (> SB2.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= SB2.1.i 0.945) (<= SB2.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "SB2.1.i"
        },
        {
            "id": "sig.L17_1_u",
            "kind": "signal",
            "name": "L17.1.u",
            "negatedPredicate": "(assert (or (< L17.1.u 207.9) (> L17.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L17.1.u 207.9) (<= L17.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L17.1.u"
        },
        {
            "id": "sig.L17_1_i",
            "kind": "signal",
            "name": "L17.1.i",
            "negatedPredicate": "(assert (or (< L17.1.i 0.945) (> L17.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L17.1.i 0.945) (<= L17.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L17.1.i"
        },
        {
            "id": "sig.L17_2_u",
            "kind": "signal",
            "name": "L17.2.u",
            "negatedPredicate": "(assert (or (< L17.2.u 207.9) (> L17.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L17.2.u 207.9) (<= L17.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L17.2.u"
        },
        {
            "id": "sig.L17_2_i",
            "kind": "signal",
            "name": "L17.2.i",
            "negatedPredicate": "(assert (or (< L17.2.i 0.945) (> L17.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L17.2.i 0.945) (<= L17.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L17.2.i"
        },
        {
            "id": "sig.KM_7_u",
            "kind": "signal",
            "name": "KM.7.u",
            "negatedPredicate": "(assert (or (< KM.7.u 207.9) (> KM.7.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= KM.7.u 207.9) (<= KM.7.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "KM.7.u"
        },
        {
            "id": "sig.KM_7_i",
            "kind": "signal",
            "name": "KM.7.i",
            "negatedPredicate": "(assert (or (< KM.7.i 0.945) (> KM.7.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= KM.7.i 0.945) (<= KM.7.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "KM.7.i"
        },
        {
            "id": "sig.KM_8_u",
            "kind": "signal",
            "name": "KM.8.u",
            "negatedPredicate": "(assert (or (< KM.8.u 207.9) (> KM.8.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= KM.8.u 207.9) (<= KM.8.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "KM.8.u"
        },
        {
            "id": "sig.KM_8_i",
            "kind": "signal",
            "name": "KM.8.i",
            "negatedPredicate": "(assert (or (< KM.8.i 0.945) (> KM.8.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= KM.8.i 0.945) (<= KM.8.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "KM.8.i"
        },
        {
            "id": "sig.L18_2_u",
            "kind": "signal",
            "name": "L18.2.u",
            "negatedPredicate": "(assert (or (< L18.2.u 207.9) (> L18.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L18.2.u 207.9) (<= L18.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L18.2.u"
        },
        {
            "id": "sig.L18_2_i",
            "kind": "signal",
            "name": "L18.2.i",
            "negatedPredicate": "(assert (or (< L18.2.i 0.945) (> L18.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L18.2.i 0.945) (<= L18.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L18.2.i"
        },
        {
            "id": "sig.SB2_2_u",
            "kind": "signal",
            "name": "SB2.2.u",
            "negatedPredicate": "(assert (or (< SB2.2.u 207.9) (> SB2.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= SB2.2.u 207.9) (<= SB2.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "SB2.2.u"
        },
        {
            "id": "sig.SB2_2_i",
            "kind": "signal",
            "name": "SB2.2.i",
            "negatedPredicate": "(assert (or (< SB2.2.i 0.945) (> SB2.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= SB2.2.i 0.945) (<= SB2.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "SB2.2.i"
        },
        {
            "id": "sig.L19_1_u",
            "kind": "signal",
            "name": "L19.1.u",
            "negatedPredicate": "(assert (or (< L19.1.u 207.9) (> L19.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L19.1.u 207.9) (<= L19.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L19.1.u"
        },
        {
            "id": "sig.L19_1_i",
            "kind": "signal",
            "name": "L19.1.i",
            "negatedPredicate": "(assert (or (< L19.1.i 0.945) (> L19.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L19.1.i 0.945) (<= L19.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L19.1.i"
        },
        {
            "id": "sig.L18_1_u",
            "kind": "signal",
            "name": "L18.1.u",
            "negatedPredicate": "(assert (or (< L18.1.u 207.9) (> L18.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L18.1.u 207.9) (<= L18.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L18.1.u"
        },
        {
            "id": "sig.L18_1_i",
            "kind": "signal",
            "name": "L18.1.i",
            "negatedPredicate": "(assert (or (< L18.1.i 0.945) (> L18.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L18.1.i 0.945) (<= L18.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L18.1.i"
        },
        {
            "id": "sig.L19_2_u",
            "kind": "signal",
            "name": "L19.2.u",
            "negatedPredicate": "(assert (or (< L19.2.u 207.9) (> L19.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L19.2.u 207.9) (<= L19.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L19.2.u"
        },
        {
            "id": "sig.L19_2_i",
            "kind": "signal",
            "name": "L19.2.i",
            "negatedPredicate": "(assert (or (< L19.2.i 0.945) (> L19.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L19.2.i 0.945) (<= L19.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L19.2.i"
        },
        {
            "id": "sig.L20_1_u",
            "kind": "signal",
            "name": "L20.1.u",
            "negatedPredicate": "(assert (or (< L20.1.u 207.9) (> L20.1.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L20.1.u 207.9) (<= L20.1.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L20.1.u"
        },
        {
            "id": "sig.L20_1_i",
            "kind": "signal",
            "name": "L20.1.i",
            "negatedPredicate": "(assert (or (< L20.1.i 0.945) (> L20.1.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L20.1.i 0.945) (<= L20.1.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L20.1.i"
        },
        {
            "id": "sig.L20_2_u",
            "kind": "signal",
            "name": "L20.2.u",
            "negatedPredicate": "(assert (or (< L20.2.u 207.9) (> L20.2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= L20.2.u 207.9) (<= L20.2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "L20.2.u"
        },
        {
            "id": "sig.L20_2_i",
            "kind": "signal",
            "name": "L20.2.i",
            "negatedPredicate": "(assert (or (< L20.2.i 0.945) (> L20.2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= L20.2.i 0.945) (<= L20.2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "L20.2.i"
        },
        {
            "id": "sig.KM_A1_A2_u",
            "kind": "signal",
            "name": "KM.A1_A2.u",
            "negatedPredicate": "(assert (or (< KM.A1_A2.u 207.9) (> KM.A1_A2.u 232.1)))",
            "note": "template:AC220_1P_u",
            "predicate": "(assert (and (>= KM.A1_A2.u 207.9) (<= KM.A1_A2.u 232.1)))",
            "sourceValue": "[207.9,232.1]",
            "sourceVariable": "KM.A1_A2.u"
        },
        {
            "id": "sig.KM_A1_A2_i",
            "kind": "signal",
            "name": "KM.A1_A2.i",
            "negatedPredicate": "(assert (or (< KM.A1_A2.i 0.945) (> KM.A1_A2.i 1.055)))",
            "note": "template:AC220_1P_i",
            "predicate": "(assert (and (>= KM.A1_A2.i 0.945) (<= KM.A1_A2.i 1.055)))",
            "sourceValue": "[0.945,1.055]",
            "sourceVariable": "KM.A1_A2.i"
        }
    ],
    "timeoutMs": -1,
    "timestamp": "20251024_075251"
}
